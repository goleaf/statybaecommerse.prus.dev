<?php declare(strict_types=1);

namespace App\Filament\Widgets;

use App\Models\Order;
use App\Models\Product;
use App\Models\User;
use Filament\Widgets\StatsOverviewWidget as BaseWidget;
use Filament\Widgets\StatsOverviewWidget\Stat;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\DB;

final class SystemHealthWidget extends BaseWidget
{
    protected static ?int $sort = 1;

    protected function getStats(): array
    {
        return [
            Stat::make(__('admin.stats.total_orders'), $this->getTotalOrders())
                ->description(__('admin.stats.orders_this_month'))
                ->descriptionIcon('heroicon-m-arrow-trending-up')
                ->color('success'),

            Stat::make(__('admin.stats.total_revenue'), $this->getTotalRevenue())
                ->description(__('admin.stats.revenue_this_month'))
                ->descriptionIcon('heroicon-m-currency-euro')
                ->color('primary'),

            Stat::make(__('admin.stats.active_products'), $this->getActiveProducts())
                ->description(__('admin.stats.products_in_stock'))
                ->descriptionIcon('heroicon-m-cube')
                ->color('info'),

            Stat::make(__('admin.stats.registered_users'), $this->getRegisteredUsers())
                ->description(__('admin.stats.new_users_this_week'))
                ->descriptionIcon('heroicon-m-users')
                ->color('warning'),
        ];
    }

    private function getTotalOrders(): string
    {
        return Cache::remember('stats.total_orders', 300, function () {
            $total = Order::count();
            $thisMonth = Order::whereMonth('created_at', now()->month)->count();
            
            return number_format($total) . ' (' . $thisMonth . ')';
        });
    }

    private function getTotalRevenue(): string
    {
        return Cache::remember('stats.total_revenue', 300, function () {
            $total = Order::where('status', 'completed')->sum('total');
            $thisMonth = Order::where('status', 'completed')
                ->whereMonth('created_at', now()->month)
                ->sum('total');
            
            return '€' . number_format($total, 2) . ' (€' . number_format($thisMonth, 2) . ')';
        });
    }

    private function getActiveProducts(): string
    {
        return Cache::remember('stats.active_products', 300, function () {
            $total = Product::where('is_visible', true)->count();
            $inStock = Product::where('is_visible', true)
                ->where('stock_quantity', '>', 0)
                ->count();
            
            return number_format($total) . ' (' . $inStock . ')';
        });
    }

    private function getRegisteredUsers(): string
    {
        return Cache::remember('stats.registered_users', 300, function () {
            $total = User::count();
            $thisWeek = User::where('created_at', '>=', now()->startOfWeek())->count();
            
            return number_format($total) . ' (+' . $thisWeek . ')';
        });
    }
}
