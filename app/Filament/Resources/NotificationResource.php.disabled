<?php declare(strict_types=1);

namespace App\Filament\Resources;

use App\Enums\NavigationGroup;
use App\Filament\Resources\NotificationResource\Pages;
use App\Models\User;
use Filament\Forms;
use Filament\Resources\Resource;
use Filament\Schemas\Schema;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Notifications\DatabaseNotification;
use UnitEnum;

final class NotificationResource extends Resource
{
    protected static ?string $model = DatabaseNotification::class;

    protected static BackedEnum | string | null $navigationIcon = 'heroicon-o-bell';

    protected static UnitEnum | string | null $navigationGroup = NavigationGroup::System;

    protected static ?int $navigationSort = 3;

    protected static ?string $navigationLabel = 'Notifications';

    protected static ?string $modelLabel = 'Notification';

    protected static ?string $pluralModelLabel = 'Notifications';

    public static function form(Schema $schema): Schema
    {
        return $schema
            ->components([
                Forms\Components\TextInput::make('type')
                    ->label(__('Type'))
                    ->disabled()
                    ->dehydrated(false),
                    
                Forms\Components\Select::make('notifiable_type')
                    ->label(__('Notifiable Type'))
                    ->options([
                        User::class => 'User',
                    ])
                    ->disabled()
                    ->dehydrated(false),
                    
                Forms\Components\TextInput::make('notifiable_id')
                    ->label(__('Notifiable ID'))
                    ->disabled()
                    ->dehydrated(false),
                    
                Forms\Components\KeyValue::make('data')
                    ->label(__('Data'))
                    ->disabled()
                    ->dehydrated(false),
                    
                Forms\Components\DateTimePicker::make('read_at')
                    ->label(__('Read At'))
                    ->disabled()
                    ->dehydrated(false),
                    
                Forms\Components\DateTimePicker::make('created_at')
                    ->label(__('Created At'))
                    ->disabled()
                    ->dehydrated(false),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('id')
                    ->label(__('ID'))
                    ->searchable()
                    ->sortable(),
                    
                Tables\Columns\TextColumn::make('type')
                    ->label(__('Type'))
                    ->formatStateUsing(fn (string $state): string => class_basename($state))
                    ->searchable()
                    ->sortable(),
                    
                Tables\Columns\TextColumn::make('notifiable_type')
                    ->label(__('Notifiable Type'))
                    ->formatStateUsing(fn (string $state): string => class_basename($state))
                    ->searchable()
                    ->sortable(),
                    
                Tables\Columns\TextColumn::make('notifiable_id')
                    ->label(__('Notifiable ID'))
                    ->searchable()
                    ->sortable(),
                    
                Tables\Columns\TextColumn::make('data.title')
                    ->label(__('Title'))
                    ->limit(50)
                    ->searchable(),
                    
                Tables\Columns\TextColumn::make('data.message')
                    ->label(__('Message'))
                    ->limit(50)
                    ->searchable(),
                    
                Tables\Columns\TextColumn::make('data.type')
                    ->label(__('Notification Type'))
                    ->badge()
                    ->color(fn (string $state): string => match ($state) {
                        'order' => 'blue',
                        'product' => 'green',
                        'user' => 'purple',
                        'system' => 'orange',
                        'payment' => 'yellow',
                        'shipping' => 'indigo',
                        'review' => 'pink',
                        'promotion' => 'red',
                        'newsletter' => 'cyan',
                        'support' => 'gray',
                        default => 'gray',
                    })
                    ->searchable()
                    ->sortable(),
                    
                Tables\Columns\IconColumn::make('read_at')
                    ->label(__('Read'))
                    ->boolean()
                    ->trueIcon('heroicon-o-check-circle')
                    ->falseIcon('heroicon-o-x-circle')
                    ->trueColor('success')
                    ->falseColor('danger')
                    ->sortable(),
                    
                Tables\Columns\TextColumn::make('created_at')
                    ->label(__('Created At'))
                    ->dateTime()
                    ->sortable()
                    ->toggleable(),
            ])
            ->filters([
                Tables\Filters\SelectFilter::make('data.type')
                    ->label(__('Notification Type'))
                    ->options([
                        'order' => __('notifications.types.order'),
                        'product' => __('notifications.types.product'),
                        'user' => __('notifications.types.user'),
                        'system' => __('notifications.types.system'),
                        'payment' => __('notifications.types.payment'),
                        'shipping' => __('notifications.types.shipping'),
                        'review' => __('notifications.types.review'),
                        'promotion' => __('notifications.types.promotion'),
                        'newsletter' => __('notifications.types.newsletter'),
                        'support' => __('notifications.types.support'),
                    ]),
                    
                Tables\Filters\TernaryFilter::make('read_at')
                    ->label(__('Read Status'))
                    ->placeholder(__('All notifications'))
                    ->trueLabel(__('Read'))
                    ->falseLabel(__('Unread'))
                    ->queries(
                        true: fn (Builder $query) => $query->whereNotNull('read_at'),
                        false: fn (Builder $query) => $query->whereNull('read_at'),
                    ),
                    
                Tables\Filters\Filter::make('created_at')
                    ->form([
                        Forms\Components\DatePicker::make('created_from')
                            ->label(__('Created from')),
                        Forms\Components\DatePicker::make('created_until')
                            ->label(__('Created until')),
                    ])
                    ->query(function (Builder $query, array $data): Builder {
                        return $query
                            ->when(
                                $data['created_from'],
                                fn (Builder $query, $date): Builder => $query->whereDate('created_at', '>=', $date),
                            )
                            ->when(
                                $data['created_until'],
                                fn (Builder $query, $date): Builder => $query->whereDate('created_at', '<=', $date),
                            );
                    }),
            ])
            ->actions([
                Tables\Actions\ViewAction::make(),
                Tables\Actions\DeleteAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ])
            ->defaultSort('created_at', 'desc');
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListNotifications::route('/'),
            'view' => Pages\ViewNotification::route('/{record}'),
        ];
    }

    public static function getEloquentQuery(): Builder
    {
        return parent::getEloquentQuery()
            ->latest();
    }

    public static function canCreate(): bool
    {
        return false;
    }

    public static function canEdit($record): bool
    {
        return false;
    }
}
