<?php declare(strict_types=1);

namespace App\Filament\Resources\ProductResource\RelationManagers;
use App\Models\ProductVariant;
use Filament\Schemas\Schema;
use Filament\Resources\RelationManagers\RelationManager;
use Filament\Tables\Table;
use Filament\Forms;
use Filament\Tables;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\SoftDeletingScope;
final class VariantsRelationManager extends RelationManager
{
    protected static string $relationship = 'variants';
    protected static ?string $title = 'Product Variants';
    public function form(Schema $schema): Schema
    {
        return $schema
            ->components([
                Forms\Components\TextInput::make('name')
                    ->label(__('admin.products.fields.variant_name'))
                    ->required()
                    ->maxLength(255),
                Forms\Components\TextInput::make('sku')
                    ->label(__('admin.products.fields.sku'))
                    ->maxLength(255)
                    ->unique(ProductVariant::class, 'sku', ignoreRecord: true),
                Forms\Components\TextInput::make('barcode')
                    ->label(__('admin.products.fields.barcode'))
                Forms\Components\TextInput::make('price')
                    ->label(__('admin.products.fields.price'))
                    ->numeric()
                    ->prefix('€')
                    ->required(),
                Forms\Components\TextInput::make('compare_price')
                    ->label(__('admin.products.fields.compare_price'))
                    ->prefix('€'),
                Forms\Components\TextInput::make('cost_price')
                    ->label(__('admin.products.fields.cost_price'))
                Forms\Components\TextInput::make('weight')
                    ->label(__('admin.products.fields.weight'))
                    ->suffix(' kg'),
                Forms\Components\TextInput::make('stock_quantity')
                    ->label(__('admin.products.fields.stock_quantity'))
                    ->default(0),
                Forms\Components\TextInput::make('low_stock_threshold')
                    ->label(__('admin.products.fields.low_stock_threshold'))
                    ->default(5),
                Forms\Components\Toggle::make('track_stock')
                    ->label(__('admin.products.fields.track_stock'))
                    ->default(true),
                Forms\Components\Toggle::make('is_published')
                    ->label(__('admin.products.fields.is_published'))
                Forms\Components\KeyValue::make('attributes')
                    ->label(__('admin.products.fields.variant_attributes'))
                    ->keyLabel(__('admin.products.fields.attribute_name'))
                    ->valueLabel(__('admin.products.fields.attribute_value'))
                    ->columnSpanFull(),
            ]);
    }
    public function table(Table $table): Table
        return $table
            ->recordTitleAttribute('name')
            ->columns([
                Tables\Columns\TextColumn::make('name')
                    ->searchable()
                    ->sortable(),
                Tables\Columns\TextColumn::make('sku')
                    ->sortable()
                    ->copyable()
                    ->copyMessage(__('admin.common.copied')),
                Tables\Columns\TextColumn::make('barcode')
                    ->toggleable(isToggledHiddenByDefault: true),
                Tables\Columns\TextColumn::make('price')
                    ->money('EUR')
                Tables\Columns\TextColumn::make('compare_price')
                Tables\Columns\TextColumn::make('cost_price')
                Tables\Columns\TextColumn::make('stock_quantity')
                    ->badge()
                    ->color(fn($state) => match (true) {
                        $state <= 0 => 'danger',
                        $state <= 5 => 'warning',
                        default => 'success',
                    }),
                Tables\Columns\TextColumn::make('weight')
                    ->suffix(' kg')
                Tables\Columns\IconColumn::make('track_stock')
                    ->boolean(),
                Tables\Columns\IconColumn::make('is_published')
                Tables\Columns\TextColumn::make('created_at')
                    ->label(__('admin.products.fields.created_at'))
                    ->dateTime()
            ])
            ->filters([
                Tables\Filters\TernaryFilter::make('track_stock')
                    ->label(__('admin.products.fields.track_stock')),
                Tables\Filters\TernaryFilter::make('is_published')
                    ->label(__('admin.products.fields.is_published')),
                Tables\Filters\Filter::make('low_stock')
                    ->label(__('admin.products.filters.low_stock'))
                    ->query(fn(Builder $query): Builder => $query->whereColumn('stock_quantity', '<=', 'low_stock_threshold')),
                Tables\Filters\Filter::make('out_of_stock')
                    ->label(__('admin.products.filters.out_of_stock'))
                    ->query(fn(Builder $query): Builder => $query->where('stock_quantity', '<=', 0)),
            ->headerActions([
                Tables\Actions\CreateAction::make(),
            ->actions([
                Tables\Actions\EditAction::make(),
                Tables\Actions\DeleteAction::make(),
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ->defaultSort('created_at', 'desc');
}
