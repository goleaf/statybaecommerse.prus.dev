# Cursor Prompt — Laravel/Filament fixer with MCP & full i18n pass

## Role
Act as a **Senior Laravel + Filament engineer** operating inside **Cursor** with **MCP tools** (terminal/exec, fs/search+write, http for docs). Work **autonomously**: analyze the current error, **apply the same fix across all relevant files**, ensure **multilanguage (i18n)** support at DB, backend, seeds, routes, and UI levels, and **run tests via MCP** until green.

> ❗ Hard rule: **Do NOT perform any git actions** (no `git add/commit/push`, no tagging, no PRs, no commit messages).

---

## Global Constraints
- Prefer **editing existing files**; create new files **only if missing or strictly required**.
- Keep framework & libs as-is; **don’t add packages** unless absolutely necessary for i18n. If you can implement without a new package, do so.
- Adhere to **PSR-12**, **PHP ≥ 8.1**, **Laravel best practices**, **Filament latest compatible version in the repo**.
- Make fixes **idempotent** (safe to re-run migrations & seeds).
- Always implement/verify **i18n** where relevant (models/migrations/seeds/routes/views/Filament resources).
- For **images in seeds**, **only generate on localhost** (`APP_ENV=local`), use existing image generation/utilities if present; otherwise create simple placeholders (e.g., GD) and store to `storage/app/public`, ensure `storage:link`.

---

## High-Level Plan (MCP-driven)
1. **Prep & Environment via MCP (Terminal)**
   - `php -v`
   - `php artisan --version`
   - `composer install --no-interaction`
   - `php artisan config:clear && php artisan cache:clear && php artisan view:clear && php artisan route:clear`
   - Detect test runner:
     - If `vendor/bin/pest` exists → use Pest; else use PHPUnit.
   - Confirm DB connectivity (from `.env`), fail fast with actionable message.

2. **Reproduce & Capture Error**
   - Run tests with max verbosity:
     - Pest: `vendor/bin/pest -vvv --colors=always`
     - PHPUnit: `vendor/bin/phpunit -vvv --colors=always`
   - If tests don’t exist or are sparse, run: `php artisan test -vvv`.
   - Capture stack traces & failing files.

3. **Root Cause Analysis & Global Remediation**
   - Use MCP FS search to find similar patterns across the codebase (**“analyze another files and fix same problem everywhere”**). Examples:
     - API contract mismatches, incorrect type hints, nullability issues, mass-assignment, broken casts, outdated Filament field names, route names mismatched, policy/permission guards, enum/string cast mismatches, date casts, missing imports/namespaces, wrong relation names, N+1 in resource tables.
   - Apply **safe codemods** across files. For each change, ensure:
     - Code compiles.
     - Conforms to PSR-12.
     - Covered by or accompanied with tests.

4. **i18n Implementation/Verification (DB + Backend + UI)**
   - **Database/Migrations (edit existing when possible; create new only if needed):**
     - Identify text fields that must be translatable (e.g., `title`, `name`, `slug`, `description`, `content`, `excerpt`, `label`, `meta_*`).
     - If project already has translatable JSON columns: **standardize** (e.g., `json('title')`, `json('description')`).
     - If not present and needed: modify migrations to JSON (or add new migration if editing old ones is unsafe).
     - Ensure sensible defaults & **fallback locale**: at least `{ "en": "...", "lt": "...", "ru": "..." }` where relevant.
     - Add indexes only where necessary; avoid breaking prod data assumptions.
   - **Models:**
     - Add casts for translatables: `protected $casts = ['title' => 'array', 'description' => 'array', ...];`
     - Add accessors with fallback:
       ```php
       public function getTransAttr(array|string|null $val, string $locale = null, string $fallback = null) {
           $locale = $locale ?? app()->getLocale();
           $fallback = $fallback ?? config('app.fallback_locale');
           if (is_array($val)) {
               return $val[$locale] ?? $val[$fallback] ?? reset($val) ?: null;
           }
           return $val;
       }
       // Example usage in accessor:
       public function getTitleLocalizedAttribute() {
           return $this->getTransAttr($this->attributes['title'] ?? null);
       }
       ```
     - Ensure **fillable/guarded** and **casts** consistent.
   - **Lang Files (`resources/lang/{locale}/*.php` or JSON)**:
     - Ensure all static UI strings exist for each supported locale (`en`, `lt`, `ru`, etc.).
     - Replace hardcoded strings in views/Filament with `__('key')` or `@lang('key')`.
   - **Routes with Multilanguage:**
     - Add or verify **localized prefix** and middleware (no external package required):
       ```php
       // routes/web.php
       use App\Http\Middleware\SetLocale;

       Route::get('/', fn () => redirect(app()->getLocale()));

       Route::group([
           'prefix' => '{locale}',
           'where' => ['locale' => 'en|lt|ru'],
           'middleware' => [SetLocale::class],
       ], function () {
           // Place all localized routes here:
           // Route::get('/shop', [ShopController::class, 'index'])->name('shop.index');
           // Filament panels may be mounted here if project expects localized paths.
       });
       ```
       ```php
       // app/Http/Middleware/SetLocale.php
       namespace App\Http\Middleware;
       use Closure;
       use Illuminate\Support\Facades\App;

       class SetLocale {
           public function handle($request, Closure $next) {
               $locale = $request->route('locale');
               $fallback = config('app.fallback_locale', 'en');
               App::setLocale(in_array($locale, ['en','lt','ru']) ? $locale : $fallback);
               return $next($request);
           }
       }
       ```
       - Ensure a **language switcher** exists (Blade/Livewire/Filament action) that redirects to `/{locale}{current_path}`.
   - **Filament Resources/Forms/Tables:**
     - For translatable fields, render **per-locale tabs** or **accordion** (without extra packages):
       - Example: Tabs for `en`, `lt`, `ru`, each bound to `title.en`, `title.lt`, `title.ru` with appropriate `TextInput`/`Textarea`.
     - Ensure list/table columns display the **localized accessor** (fallback aware).
     - Validate per-locale requirements with custom rules (e.g., require at least one locale filled).

5. **Seeds (with i18n + optional local-only images)**
   - Verify all seeders populate **multilingual JSON** fields.
   - If images required and missing, **on local only**:
     - Create placeholder images (e.g., using GD) into `storage/app/public/{module}/...`.
     - Ensure `php artisan storage:link`.
     - Store relative paths/URLs in seeded records.
   - Make seeders **idempotent** (upsert by unique keys).

6. **Tests (Create/Update)**
   - **Per Model**: factories + CRUD tests (create/read/update/delete) including **i18n JSON** payloads and localized accessors.
   - **Per Controller/Route**: feature tests hitting **localized routes** (`/en/...`, `/lt/...`, `/ru/...`) and asserting correct content/redirects.
   - **Per Filament Component/Resource** (if testable): form validation, table listing, actions, policies/permissions.
   - **Seeds/Migrations**: smoke tests to confirm `migrate:fresh --seed` completes without errors and records exist.
   - Use realistic factories (with multilingual arrays).

7. **Run & Iterate (MCP)**
   - `php artisan migrate:fresh --seed`
   - Pest: `vendor/bin/pest -vvv --colors=always`
   - PHPUnit: `vendor/bin/phpunit -vvv --colors=always`
   - Fix any failures; repeat until **all green**.
   - Optional quick static checks:
     - `php -l $(git ls-files '*.php' 2>/dev/null || find . -name '*.php')` (no git if unavailable)
     - `php artisan route:list`
     - `php artisan filament:check` (if applicable)

8. **Acceptance Criteria**
   - All tests pass locally.
   - `migrate:fresh --seed` succeeds, data present with **multilingual JSON** filled.
   - Localized routes work; **SetLocale** middleware active, language switcher present.
   - No hardcoded strings left in views/resources; strings pulled from lang files.
   - Seeds optionally generate **local-only** images and link correctly.
   - Same original error is fixed and **the same class of issue** is corrected across all similar files.

---

## Specific Things to Check/Fix Everywhere
- Wrong/null type hints; nullable DB columns vs non-nullable code assumptions.
- Mismatched casts (json↔string), date formats, enum strings.
- Policies/guards mismatches breaking Filament actions.
- Form field names not matching attributes (especially in i18n tabbed inputs).
- Route names/URLs not respecting locale prefix.
- Factories not generating i18n arrays.
- Seeder ordering/foreign keys causing constraint failures on `migrate:fresh --seed`.
- Missing `use` imports and wrong namespaces after refactors.

---

## Deliverables (printed to console/output)
- **Test results** showing all green.
- **List of created/modified files** (paths only, no git actions).
- Brief **notes on the main fixes** and i18n changes applied (no commits).

> Reminder: **Do not run any git commands**. Output results and stop.



# Project Features & Technical Standards

This document describes the functional scope and the **engineering standards** we follow across frontend, backend (Laravel 11/12), Livewire 3, and Filament 4 admin. It is the single source of truth for required behaviors, quality bars, and best practices.

---

## 1) Public Website (Storefront)

- **Home page**  
  - Uses new `Home` (formerly `EnhancedHome`) with full i18n (LT/EN/RU).  
  - All Blade strings wrapped with `__()` / `@lang`.  
  - Locale switcher persists in session and via `?locale=xx`.
- **Auth pages** (`/register`, `/login`)  
  - Must load CSS/JS via Vite in the shared layout.  
  - Localized labels, validation messages, and meta.
- **Categories** (`/categories`)  
  - Responsive grid: cards show localized name, image, product count, and CTA.  
  - Filters: brand, price, attributes; sorting (price, newest, popularity).  
  - SEO: h1/h2, localized slugs (if enabled), meta tags per locale.  
  - Keyboard accessible and Lighthouse ≥ 90.
- **Products**  
  - Every **Brand** has products.  
  - Localized fields: name, excerpt, description, slug.  
  - Media (cover + gallery), price, stock, SKU, attributes.
- **Currency formatting**  
  - Use `Illuminate\Support\Number::currency($amount, $currency, locale())` (fallback helper if needed).  
  - Remove any `shopper_money_format()` usage.

---

## 2) Admin (Filament 4)

- **Panels & Resources**  
  - CRUD resources for Brand, Category, Product, Media, Orders, Customers.  
  - Forms & Tables defined per Filament 4 conventions with actions, filters, bulk actions. 
- **Relations**  
  - Product ↔ Brand (belongsTo)  
  - Product ↔ Categories (belongsToMany)  
  - Product ↔ Media (morphMany or Media Library)  
  - Product ↔ Attributes/Options (pivot with values)
- **Localization in Admin**  
  - Labels/Placeholders via resource `->label()` / trans strings.  
  - Use JSON translations for ad-hoc copy.
- **Performance**  
  - Prefer **simple pagination** or fast pagination for very large datasets; avoid heavy `count(*)` when not needed; consider `hammerstone/fast-paginate`. 
  - Keep table page-size sane (10/25/50/100). Avoid `all` for huge tables. 
  - Index DB columns used in filters/sorts; eager load relations in tables.
- **Security & Authorization**  
  - Policies for all resources & relation managers.  
  - Guard admin routes; audit logs for destructive actions.

---

## 3) Internationalization (i18n)

- Laravel i18n with `lang/{locale}/` and `*.json` for one-off strings.  
- `fallback_locale` configured; middleware applies locale from `session`/`?locale=`.  
- Translated validation messages; pluralization where needed. 

---

## 4) Testing & QA

- **PHP tests (Pest)**  
  - Feature tests for Home, Auth, Categories, Product show.  
  - Unit tests for currency helper (if fallback used) and seeding rules.
- **E2E (Playwright MCP)**  
  - Smoke checks: `/`, `/register`, `/login?locale=lt`, `/categories`.  
  - Assert CSS loaded, no console errors, localized text present.  
- **Static checks**  
  - `phpstan/phpstan` (level ≥ 6), `larastan`, `php-cs-fixer`.

---

## 5) Data & Seeding

- `migrate:fresh --seed` yields:  
  - ≥ 5 Brands, each with ≥ 8 Products.  
  - Categories with product assignments.  
  - Media attached to products.  
  - Localized names/slugs for brands/categories/products.

---

## 6) Build & Assets

- Vite with `@vite(['resources/css/app.css','resources/js/app.js'])` included in **all** public/auth layouts.  
- Tailwind + Alpine; no blocking CSS/JS on first paint.

---

## 7) Operational Guidelines

- **Routes** kept stable; when renaming, add 301 redirects.  
- Remove dead code/views after renames (e.g., `testhome`).  
- Keep ENV-driven features behind toggles.  
- Document admin-only actions and release notes.

---

## 8) Filament 4 & Livewire Best Practices (excerpt)

- Use Filament 4 resource patterns for CRUD; keep forms/tables cohesive. 
- Mind pagination defaults and avoid massive per-page sizes. 
- Improve heavy tables using “simple pagination” strategies and/or fast paginate. 
- For Livewire 3: cache, debounce, eager load, and (where applicable) SSR for faster first paint. 

---

## 9) Currency Number Helper

- Prefer: `Number::currency($amount, 'EUR', app()->getLocale())` for formatting.  
- Optionally set default currency via `Number::useCurrency('EUR')` at boot. 

---

## References

- Filament 4 Docs: Resources / Tables (pagination) 
- Filament Docs Index / Project site 
- Laravel Localization 12.x 
- Number helper (Laravel News) + default currency tip (Codecourse) 
- Fast pagination note (Filament content by Dan Harrin) 

## Project Feature Overview

This repository is a full-stack, multilingual e‑commerce platform built on Laravel 12, Livewire, and Filament v4, featuring robust catalog management, checkout, document generation (HTML/PDF), analytics, and a modern admin panel. It emphasizes multi-language (default: Lithuanian) and Euro currency support, extensive modular services, and print‑ready document workflows.

---

## Technology Stack
- **Core**: PHP 8.2+, Laravel 12, Livewire, Volt (conditional), Tailwind + Vite
- **Admin**: Filament v4 (resources, pages, widgets, actions)
- **Documents**: DomPDF for PDF generation, print styles in `public/css/documents.css`
- **Search & Queues**: Laravel Scout, Horizon, Queue workers
- **Packages**: 
  - Spatie: Activitylog, MediaLibrary, Permission
  - Filament: Media Library Plugin, Tab Layout Plugin
  - Predis/Redis, Barrryvdh DomPDF, Pest (tests)
- **Database**: SQLite (by default), extensive migrations and indices

---

## Storefront (Livewire)
- **Home**: `App\Livewire\Pages\Home`
  - Featured products, categories/collections hooks, SEO data support
- **Catalog**: `App\Livewire\Pages\ProductCatalog`
  - Product listing with filters/sorting (backed by `ProductService`), pagination, SEO
- **Product Details**: `App\Livewire\Pages\SingleProduct`, `single-product.blade.php`, `single-product-v1.blade.php`
  - Media galleries (`product-gallery.blade.php`), variants, pricing display, reviews
- **Search**: `App\Livewire\Pages\Search`
  - Keyword search API integration with `Api\ProductController::search`
- **Cart**: `App\Livewire\Pages\Cart` with `resources/views/livewire/pages/cart.blade.php`
  - Cart item adjust/remove, totals computation (tax/discount hooks)
- **Checkout**: `App\Livewire\Pages\CheckoutProcess`, `Checkout`
  - Multi‑step checkout, address capture, shipping zone logic, payment hooks
- **Account Area** (`routes/auth.php`):
  - Profile, Addresses, Orders, Order detail (`Volt` route fallback to Blade), Reviews
  - Email verification (`VerifyEmailController`), throttling, signed URLs
- **Other Pages**:
  - Brands (`resources/views/brands`), Categories/Collections, Locations, Legal pages

---

## API Endpoints
- `GET /api/products/search` → `App\Http\Controllers\Api\ProductController::search`
- `GET /api/categories/tree` → `App\Http\Controllers\Api\CategoryController::tree`
- Health check: `GET /health` returns `{ ok: true }`

---

## Routing & Localization
- Language switch: `GET /lang/{locale}` (persists in session + cookie; updates authenticated user `preferred_locale`)
- Admin language switch: `POST /admin/language/switch` (auth‑protected)
- Storefront routes: `/`, `/products`, `/products/{product}`, `/categories`, `/brands`, `/cart`, `/search`
- Auth flows (`routes/auth.php`): Register/Login/Forgot/Reset; Auth‑only: verify email, confirm password, account routes

---

## Internationalization (lt default, en supported)
- Translations located in `lang/lt.php`, `lang/en.php` and JSON files (`lt.json`, `en.json`), plus `de` scaffolding
- Translation helpers/services:
  - `App\Services\Shared\TranslationService`
  - `App\Services\Shared\MultiLanguageTabService` (Filament UI tabs per locale)
- Frontend + Admin translation usage pervasive (models use Spatie Translatable)
- Route‑level locale switching and admin‑side switch endpoint

---

## Core Domain Models (selected)
- Catalog: `Product`, `Category`, `Brand`, `Collection`, `Attribute`, `AttributeValue`, `ProductVariant`, `Inventory`, `VariantInventory`
- Pricing: `Price`, `PriceList`, `PriceListItem`, `Currency`
- Discounts & Campaigns: `Discount`, `DiscountCode`, `DiscountCondition`, `Campaign`
- Orders & Cart: `Order`, `OrderItem`, `OrderShipping`, `CartItem`
- Users & Groups: `User`, `CustomerGroup`, `Partner`, `PartnerTier`
- Region & Tax: `Zone`, `Country`, `Location`
- Content & SEO: `SeoData`, `Legal`, `Page` (via migrations), `NotificationTemplate`
- Analytics & Activity: `AnalyticsEvent`
- Wishlists & Compare: `UserWishlist`, `WishlistItem`, `ProductComparison`
- Settings & Feature Flags: `Setting`, `EnhancedSetting`, `EnhancedSettingTranslation`, `FeatureFlag`

---

## Admin Panel (Filament v4)
Comprehensive admin with resources for full CRUD, policies, and advanced table/form features.

- Product & Catalog
  - `ProductResource`, `CategoryResource`, `CollectionResource`, `BrandResource`, `AttributeResource`
  - Media management via Filament Media plugin, variant/inventory tabs, SEO fields
- Pricing & Discounts
  - `PriceListResource`, `DiscountResource`, `DiscountCodeResource`, `DiscountConditionResource`, `CampaignResource`, `CouponResource`
- Orders & Customers
  - `OrderResource`, `CartItemResource`, `CustomerManagementResource`, `UserResource`, `CustomerGroupResource`
- Geography & Currencies
  - `CountryResource`, `CurrencyResource`, `LocationResource`, `ZoneResource`
- Content & Documents
  - `DocumentTemplateResource`, `DocumentResource`, `MediaResource`, `LegalResource`, `ActivityLogResource`
- System & Analytics
  - `SystemSettingsResource`, `AnalyticsResource`, `AnalyticsEventResource`, `EnhancedSettingResource`

### Filament Pages
- Admin dashboards and specialized pages: SEO analytics, reports, security audits, inventory tools, data import/export, system monitoring, user impersonation, advanced reports, dashboard

### Filament Widgets (Selected)
- Sales & Orders: `OrdersChartWidget`, `AdvancedOrdersWidget`, `RecentOrders`, `RecentOrdersWidget`
- Products: `TopProductsWidget`, `TopSellingProductsWidget`, `ProductManagementWidget`, `LowStockAlertsWidget`
- Analytics: `EnhancedEcommerceOverview`, `RealtimeAnalyticsWidget`, `RecentActivityWidget`, `ModernSalesWidget`, `SalesChart`, `AdvancedStatsWidget`

### Filament Actions
- `DocumentAction` (generate documents from resources)
- `BulkProductOperationsAction` (bulk workflows)

---

## Document Generation System
- Models: `DocumentTemplate` (HTML with variables), `Document` (generated instances, morphed to entities)
- Service: `App\Services\DocumentService` to process variables, render HTML, and save PDF (DomPDF)
- Action: `App\Filament\Actions\DocumentAction` integrates with Filament resources
- Admin: `DocumentTemplateResource`, `DocumentResource` for managing templates/documents
- Templates: `resources/views/documents/print/` with print‑optimized Blade templates
- Styles: `public/css/documents.css` with print media queries (page size, margins, headers/footers)
- Variables: `$ENTITY_ATTRIBUTE` pattern, global/company variables, locale‑aware formatting (dates/currency)

---

## Discounts, Taxes, and Payments
- Discounts: `App\Services\Discounts\DiscountEngine` (stacking rules, conditions, campaigns, voucher codes)
- Taxes: `App\Services\Taxes\TaxCalculator` with zone‑based logic
- Payments: `App\Services\Payments\PaymentService` (extensible provider hooks)

---

## SEO, Sitemap, and Robots
- Controllers: `SitemapController` (XML rendering + Blade), `RobotsController`
- Views: `resources/views/sitemap/`, `resources/views/sitemap.xml.blade.php`, and static `resources/views/sitemap.xml`
- SEO model: `SeoData` on entities; SEO analytics page and service

---

## Media & Assets
- Spatie Media Library integration across products and content
- Public assets for Filament and document rendering under `public/`

---

## Security & Permissions
- Spatie Permission for roles/permissions (admin access control)
- Email verification, throttle, signed routes (`routes/auth.php`)
- Activity logging via Spatie Activitylog (`ActivityLogResource`)
- Admin language switching behind `auth`

---

## Performance & Caching
- Cache services: `App\Services\CacheService`, `App\Services\Shared\CacheService`
- Database migrations include performance indexes for prices, products, and common lookups
- Route/config/view caching scripts in Composer (`cache:warm`) and clear (`cache:clear`)

---

## Data Import/Export
- Services: `DataImportExport` (admin page), `CategoryDocsImporter`
- Controller: `ExportController` for data exports

---

## Testing & Quality
- Pest setup with extensive Feature tests across translations, documents, analytics, Filament resources, and storefront flows (see `tests/Feature/**`)
- Static analysis (Larastan, PHPStan), Pint coding standards, Dusk support

---

## Database Schema Highlights (via migrations)
- Comprehensive e‑commerce schema: products, categories, brands, collections, variants, inventories
- Orders with shipping, payment, totals, timeline, tracking
- Pricing: currencies, price lists, price list items, price indexes
- Discounts: codes, conditions, redemptions
- Regions: countries (with translations), zones, locations
- Content: pages, media, activity logs, notifications
- Settings: enhanced settings with translations, feature flags
- Soft deletes (e.g., cart items), timestamps, foreign keys, composite/unique indexes

---

## Services Overview (selected)
- Catalog: `ProductService`
- Documents: `DocumentService`
- Translations/UI: `TranslationService`, `MultiLanguageTabService`
- SEO/Analytics: `SEOService`, `SEOAnalytics`, `AnalyticsEventResource`
- Performance/Validation: `ComponentPerformanceService`, `ComponentValidationService`, `ComponentRegistryService`
- Media & Images: `ImageConversionService`
- Payments/Discounts/Taxes: `PaymentService`, `DiscountEngine`, `TaxCalculator`
- Utilities: `DatabaseDateService`, `CacheService` (core + shared)

---

## Wishlist, Reviews, and User Features
- Wishlists: `UserWishlist`, `WishlistItem` with customer association
- Reviews: `ReviewResource` and `App\Models\Review` for moderation and display
- User management: `UserResource`, impersonation tool page, customer groups and tiers

---

## Developer Experience
- Local dev script (`composer dev`) launches server, queue listener, logs, and Vite concurrently
- Automated Filament upgrade hook in Composer scripts
- Helper functions in `app/helpers.php`

---

## Extensibility
- Final classes, service‑oriented design, PSR‑12, typed APIs
- Spatie ecosystem for permissions, media, and logging
- Filament actions, widgets, and pages for extendable admin functionality
- Document templates enable custom HTML/PDF documents with variables and print styling

---

## Localization & Currency Defaults
- Default language: **Lithuanian (lt)**; English (en) also provided (German scaffold present)
- Default money representation: **Euro (€)** in views/documents

---

## Quick Index of Admin Resources
ProductResource, CategoryResource, CollectionResource, BrandResource, AttributeResource, InventoryResource, PriceListResource, DiscountResource, DiscountCodeResource, DiscountConditionResource, CampaignResource, CouponResource, OrderResource, CartItemResource, CustomerManagementResource, UserResource, CustomerGroupResource, CountryResource, CurrencyResource, LocationResource, ZoneResource, DocumentTemplateResource, DocumentResource, MediaResource, LegalResource, ActivityLogResource, SystemSettingsResource, AnalyticsResource, AnalyticsEventResource, EnhancedSettingResource, PartnerResource, PartnerTierResource, ReviewResource.

---

## Notable Routes
- Public: `/`, `/home` (redirect), `/products`, `/products/{product}`, `/categories`, `/categories/{category}`, `/brands`, `/brands/{brand}`, `/cart`, `/search`
- Auth (guest): `/register`, `/login`, `/forgot-password`, `/reset-password/{token}`
- Auth (user): `/verify-email`, `/verify-email/{id}/{hash}`, `/confirm-password`, `/account`, `/account/profile`, `/account/addresses`, `/account/orders`, `/account/orders/{number}`
- Admin helpers: `/admin/language/switch` (POST), `/admin/zones` CRUD helper endpoints (for testing flows)
- API: `/api/products/search`, `/api/categories/tree`

---

## Print & PDF Best Practices Implemented
- Separate CSS for print with page breaks, headers/footers, and table styling
- DomPDF integration with locale‑aware currency and date formatting
- Document metadata fields (status, format, file path, generated_at) on `Document`

---

## Security, Auditing, and Monitoring
- Role/permission gates via Spatie Permission
- Activity log across critical models (create/update/delete)
- System monitoring and security audit admin pages

---

## Performance Considerations
- Optimized queries and indexes for catalog and price operations
- Cache layers for expensive UI components and data queries
- Route/config/view caches exposed as Composer scripts

---

## Storefront Subpages & Templates (detailed)
- Brands: `resources/views/livewire/pages/brand/index.blade.php`
- Categories: `resources/views/livewire/pages/category/index.blade.php`, `.../category/show.blade.php`
- Collections: `resources/views/livewire/pages/collection/index.blade.php`, `.../collection/show.blade.php`
- Locations: `resources/views/livewire/pages/location` (index/show templates)
- Account:
  - `resources/views/livewire/pages/account/index.blade.php`
  - `.../account/profile.blade.php`, `.../account/addresses.blade.php`, `.../account/reviews.blade.php`
  - Orders: `.../account/orders/index.blade.php`, `.../account/orders/detail.blade.php`, `.../account/orders/invoice.blade.php`
- Auth:
  - `resources/views/livewire/pages/auth/register.blade.php`, `login.blade.php`, `forgot-password.blade.php`, `reset-password.blade.php`, `verify-email.blade.php`, `confirm-password.blade.php`
- Product templates:
  - `resources/views/livewire/pages/single-product.blade.php`, `single-product-v1.blade.php`, `product-gallery.blade.php`
- Other:
  - `home.blade.php`, `cart.blade.php`, `checkout.blade.php`, `search.blade.php`, `legal.blade.php`, `component-showcase.blade.php`

---

## Seeders (data bootstrapping)
- Core data: `AdminUserSeeder`, `CustomerSeeder`, `RolesAndPermissionsSeeder`/`RolePermissionSeeder`
- Geography & locales: `CountrySeeder`, `CountriesTableSeeder`, `ZoneSeeder`, `TranslationSeeder`
- Catalog: `BrandSeeder`, `CategorySeeder`, `CollectionSeeder`, `PriceListSeeder`
- Media/images: `UltraFastProductImageSeeder`, `OptimizedProductImageSeeder`, `EnhancedProductImageSeeder`, `RealProductImagesSeeder`, `LocalProductImagesSeeder`, `ProductRandomImagesSeeder`, `ProductPlaceholdersSeeder`
- Documents: `DocumentTemplateSeeder`
- Orders & Analytics: `OrderSeeder`, `ComprehensiveOrderSeeder`, `AnalyticsEventSeeder`, `AnalyticsEventsSeeder`
- Filament Admin presets: `BasicFilamentSeeder`, `ComprehensiveFilamentSeeder`, `FilamentEnhancedSeeder`, `EnhancedFilamentSeeder`
- Demos & comprehensive data: `ExtendedDemoSeeder`, `ComprehensiveMultilanguageSeeder`, `LithuanianBuilderShopSeeder`
- Discounts/Campaigns: `AdminPresetDiscountsSeeder`, `CampaignSeeder`, `DiscountCodeSeeder`, `GroupSeeder`, `PartnerSeeder`
- Settings: `SettingsSeeder`, `EnumDataFixSeeder`, `CurrencySeeder`
- Utility: `EnsureBrandProductsSeeder`

---

## Print Templates & Styles
- Templates: `resources/views/documents/print/header.blade.php`, `resources/views/documents/print/footer.blade.php`
- Stylesheet: `public/css/documents.css` (print media queries, page sizes, page breaks)

---

## Selected Migrations (highlights)
- Core e‑commerce tables: `2025_09_02_151538_create_new_ecommerce_tables.php`
- Documents: `2025_01_27_000001_create_document_templates_table.php`, `2025_01_27_000002_create_documents_table.php`
- Prices & currency: `2025_09_03_000001_create_currencies_table.php`, `2025_09_03_000002_create_prices_table.php`, `2025_09_01_000500_add_price_composite_index.php`
- Orders: shipping/tracking/totals/timeline (`2025_09_01_010400_create_order_shippings_table.php`, related add_* migrations)
- Discounts: `2025_08_31_200000_extend_discounts_and_create_discount_tables.php`
- Translations: `2025_08_31_200100_create_translation_tables.php`, `2025_09_02_162921_create_country_translations_table.php`, `2025_01_30_000002_create_zone_translations_table.php`
- Geography: `2025_09_04_170000_create_countries_table.php`, `2025_01_30_000001_create_zones_table.php`, `2025_01_30_000003_create_location_translations_table.php`
- Admin/Activity: `2025_09_02_215149_create_activity_log_table.php` (+ subsequent columns), `2025_09_02_220236_create_permission_tables.php`
- Enhancements: `2025_01_20_120000_enhance_filament_tables.php`, `2025_09_03_120000_enhance_filament_tables.php`, `2025_09_04_000000_enhance_filament_system_final.php`
- Media: `2025_08_31_183927_create_media_table.php`

---

## Composer Scripts & Dev Tooling
- `dev`: runs server, queue listener, logs, and Vite concurrently via `concurrently`
- `app:install`: migrations + storage:link
- `qa`: Pint test mode + PHPStan analysis
- `test`: parallel test run via `php artisan test --parallel`
- `dusk:chrome`: chromedriver detection + Dusk run
- `cache:warm` and `cache:clear`: cache lifecycle commands

---

## Internal Documentation
- `docs/report.md`: extensive system analysis and implementation log
- `docs/SHARED_COMPONENTS_IMPLEMENTATION.md`, `docs/shared-components-guide.md`: shared UI components and usage
- `docs/multilanguage-tabs-implementation.md`: Filament multi-language tabs patterns
- `docs/implementation-status.md`, `docs/IMPLEMENTATION_STATUS_FINAL.md`: status snapshots
- `docs/changelog.md`: notable changes and evolution
- `docs/todo.md`: pending tasks and ideas

---

## Translation Models
- `App\Models\Translations\ZoneTranslation`
- `App\Models\Translations\CountryTranslation`
- `App\Models\Translations\CategoryTranslation`
- `App\Models\Translations\ProductTranslation`
- `App\Models\Translations\CollectionTranslation`
- `App\Models\Translations\AttributeTranslation`
- `App\Models\Translations\AttributeValueTranslation`
- `App\Models\Translations\BrandTranslation`
- `App\Models\Translations\LegalTranslation`

---

## Filament Pages (Explicit List)
- `Dashboard`
- `AdvancedReports`
- `CustomerSegmentation`
- `DataImportExport`
- `InventoryManagement`
- `SEOAnalytics`
- `SecurityAudit`
- `SystemMonitoring`
- `UserImpersonation`

---

## Filament Widgets (Explicit List)
- `EnhancedEcommerceOverview`
- `AdvancedStatsWidget`
- `ModernSalesWidget`
- `SalesChart`
- `OrdersChartWidget`
- `AdvancedOrdersWidget`
- `RecentOrders`
- `RecentOrdersWidget`
- `TopProductsWidget`
- `TopSellingProductsWidget`
- `ProductManagementWidget`
- `LowStockAlertsWidget`
- `RealtimeAnalyticsWidget`
- `RecentActivityWidget`

---

## Frontend Tooling & Assets
- Vite + Tailwind CSS 4 with plugins: Forms, Typography, Aspect‑ratio
- Fonts via `@fontsource` (Inter, Instrument Sans, Figtree, Space Grotesk)
- JS utilities: Axios, SortableJS, TreeselectJS, Shiki (for code highlighting in docs/components)
- Playwright available (headless browser) alongside Laravel Dusk
- MCP server helper for Filament docs: `npm run mcp:filament`

---

## Layouts & Shared Components
- Layouts: `resources/views/layouts/templates/app.blade.php` and component‑based layouts under `resources/views/components/layouts`
- Shared components include:
  - UI: `breadcrumbs`, `banner`, `alert`, `modal`, `status-indicator`, `loading-dots`
  - SEO: `meta`, `canonical`, `social-meta`, `hreflang`
  - Commerce: `product-card`, `checkout-steps`, `zones-selector`, `rate-stars`, `store-badge`, `discount-badge`
  - Navigation, forms, cart, brand, category, order, address, attributes, icons, skeleton loaders
- Icon components: UntitledUI and Phosphor icon blades

---

## Summary
This codebase delivers a production‑grade, Filament‑powered e‑commerce platform with a multilingual storefront, comprehensive admin, document generation suite (HTML/PDF), pricing/discount engines, analytics dashboards, and robust DevEx. It is designed for extensibility, performance, and localized experiences by default (lt/€), while maintaining clear boundaries via services and resources.

---

## Helpers (Global)
- `app_setting(key, default)`: typed settings accessor
- Currency helpers: `current_currency()`, `app_currency()`
- Formatting: `format_money()`, `app_money_format()`, `format_date()`, `format_datetime()`
- Feature flags: `app_feature_enabled()`
- Debug hooks: `debug_discount()`, `debug_translation()`, `debug_livewire()`, `debug_cart()`, `debug_order()`
- Assets: `app_placeholder_url()`

---

## Admin Resources (descriptions)
- Products: `ProductResource` manages products, variants, media, pricing, SEO
- Categories & Collections: `CategoryResource`, `CollectionResource` manage taxonomy and landing content
- Brands: `BrandResource` manages brand metadata and media
- Attributes: `AttributeResource` and values for product specifications
- Inventory: `InventoryResource`, `VariantInventory` quantities and statuses
- Pricing: `PriceListResource`, `CurrencyResource`, `Price` entries and strategies
- Discounts: `DiscountResource`, `DiscountCodeResource`, `DiscountConditionResource`, `CampaignResource`, `CouponResource`
- Orders & Cart: `OrderResource`, `CartItemResource` with timelines, shipping, payments
- Customers: `UserResource`, `CustomerManagementResource`, `CustomerGroupResource`, `PartnerResource`, `PartnerTierResource`
- Geography: `CountryResource`, `LocationResource`, `ZoneResource` for region/currency/tax
- Content & Legal: `DocumentTemplateResource`, `DocumentResource`, `LegalResource`, `MediaResource`
- System: `SystemSettingsResource`, `EnhancedSettingResource`, `ActivityLogResource`, `AnalyticsResource`, `AnalyticsEventResource`

---

## Public API Details
- Products Search: `GET /api/products/search`
  - Query params: `q` (string, keyword), `limit` (int, max 50, default 10)
  - Filters visible products and matches `name`, `description`, `sku`
  - Includes: brand name, thumbnail URL, product URL, price/sale_price
- Categories Tree: `GET /api/categories/tree`
  - Returns top‑level categories with nested visible children
  - Sorted by `sort_order` then `name`; includes slug, description, and URLs

---

## Exports & Sitemap
- Exports UI: `ExportController`
  - Lists files under `public/exports`, provides stream download with CSV headers
  - Errors handled with redirect+flash messages
- Sitemap: `SitemapController`
  - Locale‑aware per `config('app.supported_locales')`; caches per‑locale URL lists for 1 day
  - Includes localized links for home, categories, collections, brands, products, and legal pages
  - Resilient when tables/columns are missing (testing scenarios)

---

## Best Practices (Admin & Frontend)

### Filament v4
- Architecture
  - Keep heavy logic in services; resources focus on forms/tables/actions
  - Use navigation groups/enums for consistent grouping (`App\Enums\NavigationGroup`)
  - Prefer typed closures and early returns; avoid deep nesting in resource configs
- Tables
  - Tune `searchDebounce('750ms')` to reduce query load on large datasets
  - Provide empty state actions (`emptyStateActions([Action::make('create')...])`)
  - Use relationship counts with filters via `TextColumn::make('...')->counts([...])`
  - Group wisely and consider `groupQueryUsing()` when grouping large datasets
  - Prefer server-side filters; validate filter configuration via tests
- Forms
  - Apply granular validation rules (e.g., `required`, `filled`, `enum`, `regex`, `lt/lte`, `multipleOf`) directly on fields
  - Use conditional rules (`requiredIf`, `prohibitedIf`, `requiredWith`, `requiredWithAll`)
  - Keep translatable fields organized with `MultiLanguageTabService` tabs
- Actions/Widgets
  - Extract reusable actions; keep long‑running actions queued when appropriate
  - Widgets should cache aggregate queries and avoid N+1 with eager loading
- Testing
  - Assert page mount, table columns/filters/actions; use Livewire testing helpers for actions and bulk actions

### Livewire
- Performance & UX
  - Use `wire:navigate` (optionally `.hover`) for fast in‑app navigation
  - Apply `wire:loading` and `wire:loading.attr="disabled"` for clear loading states
  - Persist global elements outside components (`@persist`) in layouts
- Code Quality
  - Avoid duplicate names for public props/methods; keep component state minimal
  - Use pagination traits thoughtfully and reset page on filter changes

### Spatie Media Library
- Conversions & Manipulations
  - Define conversions and use `getFirstMediaUrl('collection', 'conversion')`
  - Apply per‑file manipulations with `withManipulations([...])`; use wildcard `'*'` for global
  - Regenerate conversions by updating `manipulations` on a `Media` instance and `save()`
  - Opt out of optimization for specific conversions via `nonOptimized()` if needed
- Storage & Fallbacks
  - Choose disks per collection (`toMediaCollection('images', 's3')`)
  - Provide fallbacks for empty collections and conversions
  - Consider custom file removal strategy (`file_remover_class`) for granular deletion

### Documents & PDFs (DomPDF)
- Keep print CSS separate (`public/css/documents.css`) and use print media queries
- Prefer web‑safe fonts; keep layout simple for consistent rendering
- Control page breaks explicitly; add headers/footers through Blade partials
- Format money/dates via helpers; localize content based on active locale

### Permissions (Spatie Laravel Permission)
- Prefer permission checks over role checks for flexibility (`user()->can('perm')`)
- Use enums for roles/permissions for type‑safety where suitable
- Bulk updates via `syncPermissions()` / `syncRoles()`; seed with `saveOrFail()` for performance in large runs
- Middleware: use `RoleMiddleware::using(...)`, `PermissionMiddleware::using(...)`; ensure middleware priority if scoping (e.g., teams)
- Eager load `roles`/`permissions` when listing to avoid N+1

### Activity Log (Spatie Activitylog)
- Use `LogsActivity` and configure `getActivitylogOptions()`; prefer `logOnlyDirty()` to reduce noise
- Group related changes with batches (`LogBatch::withinBatch(...)`); propagate batch UUID to jobs when needed
- Prune old logs regularly; keep ~90 days (already scheduled); optimize table during maintenance windows

### Queues & Horizon
- Use named queues per concern (emails, media, imports) and tags for observability
- Configure supervisors for concurrency and memory limits appropriate to job weight
- Keep idempotency in jobs; prefer small, chunked jobs (as with import jobs)


## Development Prompt (Quick Reference)

Use this document as a compact guide when implementing new features or refactors in this repository. It distills core constraints, conventions, and capabilities from `FEATURES.md`.

---

## Core Stack & Conventions
- Laravel 12, PHP 8.2+, Livewire, Filament v4, Tailwind + Vite
- SQLite by default (do not switch to MySQL). ENV: `DB_CONNECTION=sqlite`
- Strict typing, PSR‑12, final classes, explicit return types
- Use services for domain logic, keep controllers thin
- Prefer `match` over `switch`; use constructor property promotion
- Default locale: Lithuanian (`lt`), currency: EUR (`€`)
- Translations: use `lang/lt.php` and `lang/en.php` (snake_case keys). JSON files supported
- Spatie packages: Permission, Media Library, Activitylog
- Filament v4 for admin (resources, pages, widgets, actions)

---

## Internationalization
- Language switch route: `GET /lang/{locale}` sets session + cookie and persists to `users.preferred_locale`
- Admin language switch: `POST /admin/language/switch` (auth)
- Use `App\Services\Shared\TranslationService` and `MultiLanguageTabService` for admin forms
- Models leverage Spatie Translatable where applicable

---

## Documents & PDFs
- Use `App\Services\DocumentService` to render HTML + PDF (DomPDF)
- Templates live under `resources/views/documents/print/` with `public/css/documents.css` styles
- Variable format: `$ENTITY_ATTRIBUTE` and locale‑aware formatting via helpers
- Filament action: `App\Filament\Actions\DocumentAction`

---

## Pricing, Discounts, Taxes, Payments
- Discounts: `App\Services\Discounts\DiscountEngine`
- Taxes: `App\Services\Taxes\TaxCalculator` (zone‑based)
- Payments: `App\Services\Payments\PaymentService` (extensible)
- Helpers: `format_money()`, `current_currency()`, `app_currency()`

---

## Storefront Pages (Livewire)
- Home, Catalog, Product, Search, Cart, Checkout Process
- Account area (profile, addresses, orders, order detail, reviews)
- Brand, Category, Collection, Location pages

Routes: see `routes/web.php` and `routes/auth.php`.

---

## Admin (Filament)
- Resources: Products, Categories, Collections, Brands, Attributes, Inventory, Pricing, Discounts, Orders, Customers, Geography, Content, System, Analytics
- Pages: Dashboard, AdvancedReports, CustomerSegmentation, DataImportExport, InventoryManagement, SEOAnalytics, SecurityAudit, SystemMonitoring, UserImpersonation
- Widgets: EnhancedEcommerceOverview, Sales/Orders charts, Top Products, Low Stock, Realtime Analytics, Recent Activity

---

## Data & Seeds
- Seeders cover admin users/roles, countries/zones/translations, catalog, media, orders, analytics, discounts/campaigns, settings
- Use appropriate seeders during development (`DatabaseSeeder`, demo/comprehensive seeders)

---

## Background Jobs & Schedules
- Jobs: low stock checks, chunked importers (products, inventory, prices)
- Scheduler: low stock (6h), cache warmup (hourly), activity cleanup (daily)

---

## Public API (Quick)
- `GET /api/products/search`: params `q` (string), `limit` (<=50); returns id, name, slug, sku, price/sale_price, brand, image, product URL
- `GET /api/categories/tree`: returns top-level categories with visible children (id, name, slug, description, URLs)

---

## Best Practices (Quick)
- Filament v4
  - Resources: keep logic in services; organize navigation; typed closures; early returns
  - Tables: tune `searchDebounce`, combine global + column search; 
  
  - Forms: use granular validation (`required`, `filled`, `enum`, `regex`, `lt/lte`, `multipleOf`, `requiredIf`, `prohibitedIf`, `requiredWith*`); multi-language tabs
  - Widgets/Actions: cache aggregates; eager load; queue long actions
- Livewire
  - Use `wire:navigate(.hover)`; `wire:loading` + `wire:loading.attr="disabled"`; persist layout elements; avoid duplicate prop/method names; reset pagination on filter changes
- Media Library
  - Define conversions; `getFirstMediaUrl('collection','conversion')`; per-file `withManipulations` (use `'*'` for wildcard); `nonOptimized()` when needed; configure disks per collection; fallbacks; custom `file_remover_class` if required
- PDFs (DomPDF)
  - Separate print CSS; simple layouts; explicit page breaks; headers/footers via partials; locale-aware formatting via helpers
- Permissions
  - Prefer `can()` over role checks; use enums; sync roles/permissions; middleware via `::using()`; eager load relations when listing
- Activitylog
  - Use `LogsActivity` with `logOnlyDirty()`; group with `LogBatch::withinBatch()`; prune logs regularly
- Queues/Horizon
  - Named queues per concern; supervisor tuning; chunked idempotent jobs

---

## Security & Observability
- Roles/permissions with Spatie Permission
- Activity logging with Spatie Activitylog
- Email verification + throttling; signed routes for verification

---

## Helpers (essentials)
- `app_setting(key, default)` — typed settings
- `format_money(amount, currency?, locale?)`, `format_date(date)`
- Debug hooks: `debug_discount`, `debug_translation`, `debug_livewire`, `debug_cart`, `debug_order`

---

## Dev Tooling
- Composer scripts: `dev`, `app:install`, `qa`, `test`, `cache:warm`, `cache:clear`, `dusk:chrome`
- NPM: Tailwind, Vite, Axios, SortableJS, TreeselectJS, Shiki; `mcp:filament` docs server

---

## Implementation Checklist (when adding features)
- Data: create/update migrations, seeders if needed
- Model: add relationships, casts, translatable attributes
- Service: encapsulate business logic; add tests where applicable
- Admin: update/create Filament Resource (forms, tables, actions)
- Storefront: build Livewire component and Blade views
- Translations: add lt/en keys in lang files; default UI in LT, amounts in EUR
- Documents: update templates/variables if needed and print styles
- Security: add permissions/policies if required
- Performance: indexes, eager loads, cache layers
- Background: add/schedule jobs if relevant

---

## Do/Don’t
- Do: default to LT language and EUR currency across UI & documents
- Do: keep controllers slim and logic in services; use typed helpers
- Don’t: switch DB to MySQL; don’t rely on legacy shopper_* helpers
- Don’t: add new service providers unless absolutely necessary (Laravel 11+ patterns)

---

## Quick Links
- Features inventory: see `FEATURES.md`
- Routes: `routes/web.php`, `routes/auth.php`, `routes/console.php`
- Services: `app/Services/**`
- Admin: `app/Filament/**`
- Storefront: `app/Livewire/Pages/**` and `resources/views/livewire/pages/**`
- Translations: `lang/lt.php`, `lang/en.php`
- Documents: `app/Models/Document*.php`, `resources/views/documents/print/`
- Prompt: `prompt.txt` (constraints summary)

# Project Features & Technical Standards

This document describes the functional scope and the **engineering standards** we follow across frontend, backend (Laravel 11/12), Livewire 3, and Filament 4 admin. It is the single source of truth for required behaviors, quality bars, and best practices.

---

## 1) Public Website (Storefront)

- **Home page**  
  - Uses new `Home` (formerly `EnhancedHome`) with full i18n (LT/EN/RU).  
  - All Blade strings wrapped with `__()` / `@lang`.  
  - Locale switcher persists in session and via `?locale=xx`.
- **Auth pages** (`/register`, `/login`)  
  - Must load CSS/JS via Vite in the shared layout.  
  - Localized labels, validation messages, and meta.
- **Categories** (`/categories`)  
  - Responsive grid: cards show localized name, image, product count, and CTA.  
  - Filters: brand, price, attributes; sorting (price, newest, popularity).  
  - SEO: h1/h2, localized slugs (if enabled), meta tags per locale.  
  - Keyboard accessible and Lighthouse ≥ 90.
- **Products**  
  - Every **Brand** has products.  
  - Localized fields: name, excerpt, description, slug.  
  - Media (cover + gallery), price, stock, SKU, attributes.
- **Currency formatting**  
  - Use `Illuminate\Support\Number::currency($amount, $currency, locale())` (fallback helper if needed).  
  - Remove any `shopper_money_format()` usage.

---

## 2) Admin (Filament 4)

- **Panels & Resources**  
  - CRUD resources for Brand, Category, Product, Media, Orders, Customers.  
  - Forms & Tables defined per Filament 4 conventions with actions, filters, bulk actions. 
- **Relations**  
  - Product ↔ Brand (belongsTo)  
  - Product ↔ Categories (belongsToMany)  
  - Product ↔ Media (morphMany or Media Library)  
  - Product ↔ Attributes/Options (pivot with values)
- **Localization in Admin**  
  - Labels/Placeholders via resource `->label()` / trans strings.  
  - Use JSON translations for ad-hoc copy.
- **Performance**  
  - Prefer **simple pagination** or fast pagination for very large datasets; avoid heavy `count(*)` when not needed; consider `hammerstone/fast-paginate`. 
  - Keep table page-size sane (10/25/50/100). Avoid `all` for huge tables. 
  - Index DB columns used in filters/sorts; eager load relations in tables.
- **Security & Authorization**  
  - Policies for all resources & relation managers.  
  - Guard admin routes; audit logs for destructive actions.

---

## 3) Internationalization (i18n)

- Laravel i18n with `lang/{locale}/` and `*.json` for one-off strings.  
- `fallback_locale` configured; middleware applies locale from `session`/`?locale=`.  
- Translated validation messages; pluralization where needed. 

---

## 4) Testing & QA

- **PHP tests (Pest)**  
  - Feature tests for Home, Auth, Categories, Product show.  
  - Unit tests for currency helper (if fallback used) and seeding rules.
- **E2E (Playwright MCP)**  
  - Smoke checks: `/`, `/register`, `/login?locale=lt`, `/categories`.  
  - Assert CSS loaded, no console errors, localized text present.  
- **Static checks**  
  - `phpstan/phpstan` (level ≥ 6), `larastan`, `php-cs-fixer`.

---

## 5) Data & Seeding

- `migrate:fresh --seed` yields:  
  - ≥ 5 Brands, each with ≥ 8 Products.  
  - Categories with product assignments.  
  - Media attached to products.  
  - Localized names/slugs for brands/categories/products.

---

## 6) Build & Assets

- Vite with `@vite(['resources/css/app.css','resources/js/app.js'])` included in **all** public/auth layouts.  
- Tailwind + Alpine; no blocking CSS/JS on first paint.

---

## 7) Operational Guidelines

- **Routes** kept stable; when renaming, add 301 redirects.  
- Remove dead code/views after renames (e.g., `testhome`).  
- Keep ENV-driven features behind toggles.  
- Document admin-only actions and release notes.

---

## 8) Filament 4 & Livewire Best Practices (excerpt)

- Use Filament 4 resource patterns for CRUD; keep forms/tables cohesive. 
- Mind pagination defaults and avoid massive per-page sizes. 
- Improve heavy tables using “simple pagination” strategies and/or fast paginate. 
- For Livewire 3: cache, debounce, eager load, and (where applicable) SSR for faster first paint. 

---

## 9) Currency Number Helper

- Prefer: `Number::currency($amount, 'EUR', app()->getLocale())` for formatting.  
- Optionally set default currency via `Number::useCurrency('EUR')` at boot. 

---

## References

- Filament 4 Docs: Resources / Tables (pagination) 
- Filament Docs Index / Project site 
- Laravel Localization 12.x 
- Number helper (Laravel News) + default currency tip (Codecourse) 
- Fast pagination note (Filament content by Dan Harrin) 