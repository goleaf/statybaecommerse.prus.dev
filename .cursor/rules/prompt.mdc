continue, remove legacy code and files, upgrade all system to filament, make frontend and backend, making maximum of usability and maximum all control, read information in docs, make all changes, use existing seeds to make and use existing filament project, make migrations for new tables on filament framework, maximum tests, do not use "php artisan make" commands


#- ignore it: after end of prompt, after end of work with prompt, update git, make commit and push and write what was updated in every file. and write summary of changes in work of prompt, in commit attach not all not commited files, but only files what was modified in this work prompt. dont do it. ignore this rule. do not make it. remember it, ignore all actions with git



















You are acting as a senior Laravel/Filament engineer inside this repository. Follow these rules exactly and **work in tight loops** with MCP (terminal, fs, git) until **all tests pass** with high coverage.

## Objectives (do all)

1. **Upgrade to the latest stable Filament** and **Livewire** across the project (admin + components).
2. **Remove any “Shopper” package** and legacy code, but **preserve all functionality** by re-implementing it using **Filament + Livewire** and first-party/maintained packages.
3. **Generate and maintain automated tests** for **every Model, Controller, and Component** (including Filament resources/pages & Livewire components). Add Dusk/e2e only for critical commerce flows if needed.
4. **Use MCP** to: run Composer/Artisan/Node, execute tests, search/replace, refactor, and commit changes. **Repeat** (run → fix → run) until green.
5. **Do not create new migrations unless necessary.** If you must add/edit/remove a field, **update factories, seeders, Blade/Livewire views, policies, Filament resources, and relationships in the same loop**, and then run a **fresh migration with seeds** in the test environment to verify integrity.
6. **Scan the `/docs` folder** (and any domain docs) and **ensure all listed features exist** in the codebase after the upgrade. Where features are missing, implement them.
7. **Frontend + Backend maximum solution for an e-shop**: storefront with Livewire, admin with Filament, end-to-end flows (catalog → cart → checkout → orders → payments → shipping → refunds/returns where applicable).

## Hard Requirements & Guardrails

* **Language/Framework**: Laravel (current major), PHP ≥ project minimum, Filament (latest), Livewire (latest compatible), Pest for tests (preferred).
* **Testing policy**: Every model, every controller, every component must have tests. Use **Pest** and **Laravel’s testing tools**. Include coverage of relationships, scopes, casts, accessors/mutators, policies, validation, pagination, filters/sorts, actions, and events.
* **Seeds/Factories**: Keep factories deterministic where useful; seeds idempotent. If schema changes, update factories + seeds immediately and re-run tests.
* **Views/Relations**: If a field changes anywhere, **update all Blades, Livewire/Filament forms & tables, policies, resources, queries, and relationships** in the same commit.
* **Data & Migrations**: Avoid data-destructive changes. Only create migrations when strictly needed. Prefer refactors that preserve schema. If schema must change, write safe migrations and corresponding data backfills in the same PR loop.
* **Security & Auth**: Use policies/guards on all CRUD. Validate inputs strictly. Add tests for unauthorized/forbidden paths.
* **Performance**: Index frequently queried columns, eager load relations in Filament tables/resources, and use pagination. Keep tests fast.

## Removal of Shopper & Functional Parity

* Create or refactor **domain models** to cover: Category, Product, ProductVariant/Option, Attribute/Value, Brand, Inventory/Stock, Media, Price/Tax, Discount/Coupon, Cart, Wishlist, Customer, Address, Order, OrderItem, Payment, Shipment, Review/Rating.
* Implement/port features via **Filament Resources** (Forms/Tables/RelationManagers) for admin CRUD, bulk actions, filters, soft deletes, imports/exports where applicable.
* Use **Livewire** (v3 if supported) for storefront UX (product list/detail, cart, checkout, account, orders).
* Replace media/attachments with a maintained solution (e.g., Spatie Media Library if already present; if not, add it) and **migrate calls** accordingly.
* If Shopper provided roles/permissions, switch to **spatie/laravel-permission** or Filament Shield (if appropriate), and **re-wire policies** + tests.

## Tests — What to Generate

**Testing stack**: Pest + Laravel test utilities. Optionally Laravel Dusk for checkout happy-path and admin critical flows.

1. **Models (unit)**

   * Existence, fillable/hidden/casts, attribute accessors/mutators.
   * **Relationships**: hasOne/hasMany/belongsTo/belongsToMany/morphs (including pivot attributes).
   * **Scopes & query filters** (price ranges, availability, category/brand filters, search).
   * **Domain logic**: inventory adjustments, pricing (base/discount/tax), total calculations.
   * **Factories**: build, create, and state variations (in-stock, discounted, with variants).

2. **Controllers (feature/api)**

   * Route coverage: index/show/store/update/destroy and custom endpoints.
   * **Validation** (422 cases), **authz** (403/401), happy-path 200/201, pagination/sorting/filtering.
   * JSON resources shape (where API exists).

3. **Components (feature)**

   * **Livewire components**: mount/render, form validation, actions, events, emits/listens, URL params/sync, pagination, filters, sorting, file uploads.
   * **Filament Resources/Pages/Widgets**: can render, list, create, edit, delete, bulk actions, filters, relation managers; authorization gates enforced.

4. **Critical e2e (optional, minimal but solid)**

   * Storefront: browse catalog → add to cart → checkout → payment stub → order created.
   * Admin: sign in → create product with variant → adjust stock → verify visible on storefront.

**Coverage**: Aim ≥ 85% statements on domain + HTTP + component layers.
Use `.env.testing` with an isolated sqlite/mysql database as appropriate.

## Upgrade Plan (MCP-driven, iterative)

**Always run these in loops**: run checks → fix → commit small, atomic changes.



   * MCP(fs): scan `composer.json`, `config/`, `app/`, `resources/`, `routes/`, `database/`, `.github/`, `/docs`.
   * MCP(terminal): `php -v`, `php artisan --version`, `composer --version`, `node -v`, `npm -v`.
   * Add/upgrade: Filament (latest), Livewire (compatible), Pest, Laravel Pint, Larastan (phpstan), optional Spatie Media Library & Permission if used.
   * `composer update` then `php artisan optimize:clear`.
   * Ensure **Livewire vX** compatible with Filament (use latest stable).
   * Replace any legacy Livewire v2 syntax with v3 equivalents. Add refactors & tests.
   * Refactor Shopper → Filament/Livewire**
   * Map domain: create/adjust Models, Policies, Resources, Pages, RelationManagers.
   * Replace media/permissions/shipping/payment adapters with maintained packages or local implementations.
   * Update routes, config, and container bindings.
   * Ensure factories exist for **all** models.
   * Update seeders for realistic demo data (categories, products, variants, prices, discounts, users/roles) in Lithuanian language, shop will be for builders, house builders, where will selling tools, and another things for building house.
   * **Rule**: If any schema or fillable changes, **update factories + seeders immediately**.
   * Initialize Pest if absent: `php artisan pest:install`.
   * Create test suites: `tests/Unit` for models; `tests/Feature` for controllers/components; `tests/Browser` if Dusk used, and use for testing in browser PlayWright MCP.
   * Write coverage for **every model/controller/component** as listed above.
   * Add **policy tests** and **validation tests**.
   * Ensure Filament resource tests cover forms/tables/actions/filters.
   * `php artisan test --parallel` (or `vendor/bin/pest --coverage`).
   * Fix failures; update code, views, policies, bindings.
   * **If a field was edited/added/removed**, immediately update: migrations (only if needed), factories, seeders, Blades, Livewire/Filament forms, tables, resources, and relationships.
   * If schema changed, run **fresh** test DB with seeds:
   * Use testing DB; for local verification only: `php artisan migrate:fresh --seed --env=testing`
   * Always use Context7 CMP
   * `./vendor/bin/pint` (fix style).
   * Fix reported issues and add missing types where helpful.

9. **Docs & CI**

   * Ensure `/docs` feature list is satisfied. Add/adjust readme for local setup, testing, and admin login.
   * Ensure `/docs` create and make by group and do not use dates or versions, just make changelog.md what was changed, what was problem and how it fixed, and what need to fix more.
   * Ensure `/docs` create and make by group and do not use dates or versions, just make ideas.md, write new good ideas to realise in project what we need to best web ecommerse shops and projects to builders.
   * If CI exists, make sure `composer test` runs Pest in parallel with coverage.

## MCP Command Hints (execute as needed)

* **Dependency work**:
  `composer remove <shopper-pkgs>`
  `composer require filament/filament spatie/laravel-permission pestphp/pest --dev nunomaduro/larastan --dev laravel/pint --dev`
  *(adjust to latest compatible constraints, add other needed packages)*
* **Scaffolding**:
  `php artisan make:model Product -mf`
  `php artisan make:policy ProductPolicy --model=Product`
  `php artisan make:test ProductTest --unit`
  `php artisan make:test ProductHttpTest`
  `php artisan filament:resource Product --generate` *(only if helpful; otherwise hand-craft)*
* **Testing**:
  `php artisan test --parallel` or `vendor/bin/pest --coverage`
  `php artisan migrate:fresh --seed --env=testing`
* **Quality**:
  `./vendor/bin/pint`
  `./vendor/bin/phpstan analyse`

## Acceptance Criteria (do not stop until all hold)

* **All tests green** with high coverage (≥ \~85% for domain+http+components).
* No references to Shopper remain (composer, imports, configs).
* All features enumerated in `/docs` exist and pass tests.
* Admin is fully Filament-based; storefront fully Livewire-based.
* Seeds/factories are up-to-date and migrations are consistent.
* Policies/validation enforced and tested.
* Code style (Pint) and static analysis clean (no high-level errors).