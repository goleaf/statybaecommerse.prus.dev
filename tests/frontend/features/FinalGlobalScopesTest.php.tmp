<?php

declare(strict_types=1);

namespace Tests\Feature;

use App\Models\OrderItem;
use App\Models\ProductVariant;
use App\Models\StockMovement;
use App\Models\User;
use App\Models\UserBehavior;
use App\Models\UserPreference;
use App\Models\UserProductInteraction;
use App\Models\UserWishlist;
use App\Models\WishlistItem;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

final class FinalGlobalScopesTest extends TestCase
{
    use RefreshDatabase;

    public function test_product_variant_model_has_multiple_scopes(): void
    {
        // Create test product variants
        $activeVariant = ProductVariant::factory()->create([
            'is_enabled' => true,
            'status' => 'active',
        ]);

        $disabledVariant = ProductVariant::factory()->create([
            'is_enabled' => false,
            'status' => 'active',
        ]);

        $inactiveVariant = ProductVariant::factory()->create([
            'is_enabled' => true,
            'status' => 'inactive',
        ]);

        // Test that only active, enabled variants with active status are returned
        $variants = ProductVariant::all();

        $this->assertCount(1, $variants);
        $this->assertEquals($activeVariant->id, $variants->first()->id);

        // Test bypassing scopes
        $allVariants = ProductVariant::withoutGlobalScopes()->get();
        $this->assertCount(3, $allVariants);
    }

    public function test_user_wishlist_model_has_user_owned_scope(): void
    {
        // Create test users
        $user1 = User::factory()->create();
        $user2 = User::factory()->create();

        // Create test wishlists
        $user1Wishlist = UserWishlist::factory()->create(['user_id' => $user1->id]);
        $user2Wishlist = UserWishlist::factory()->create(['user_id' => $user2->id]);

        // Test that only current user's wishlists are returned
        $this->actingAs($user1);
        $wishlists = UserWishlist::all();

        $this->assertCount(1, $wishlists);
        $this->assertEquals($user1Wishlist->id, $wishlists->first()->id);

        // Test bypassing scopes
        $allWishlists = UserWishlist::withoutGlobalScopes()->get();
        $this->assertCount(2, $allWishlists);
    }

    public function test_wishlist_item_model_has_user_owned_scope(): void
    {
        // Create test users
        $user1 = User::factory()->create();
        $user2 = User::factory()->create();

        // Create test wishlists
        $user1Wishlist = UserWishlist::factory()->create(['user_id' => $user1->id]);
        $user2Wishlist = UserWishlist::factory()->create(['user_id' => $user2->id]);

        // Create test wishlist items
        $user1Item = WishlistItem::factory()->create(['wishlist_id' => $user1Wishlist->id]);
        $user2Item = WishlistItem::factory()->create(['wishlist_id' => $user2Wishlist->id]);

        // Test that only current user's wishlist items are returned
        $this->actingAs($user1);
        $items = WishlistItem::all();

        $this->assertCount(1, $items);
        $this->assertEquals($user1Item->id, $items->first()->id);

        // Test bypassing scopes
        $allItems = WishlistItem::withoutGlobalScopes()->get();
        $this->assertCount(2, $allItems);
    }

    public function test_order_item_model_has_user_owned_scope(): void
    {
        // Create test users
        $user1 = User::factory()->create();
        $user2 = User::factory()->create();

        // Create test orders
        $user1Order = \App\Models\Order::factory()->create(['user_id' => $user1->id]);
        $user2Order = \App\Models\Order::factory()->create(['user_id' => $user2->id]);

        // Create test order items
        $user1OrderItem = OrderItem::factory()->create(['order_id' => $user1Order->id]);
        $user2OrderItem = OrderItem::factory()->create(['order_id' => $user2Order->id]);

        // Test that only current user's order items are returned
        $this->actingAs($user1);
        $orderItems = OrderItem::all();

        $this->assertCount(1, $orderItems);
        $this->assertEquals($user1OrderItem->id, $orderItems->first()->id);

        // Test bypassing scopes
        $allOrderItems = OrderItem::withoutGlobalScopes()->get();
        $this->assertCount(2, $allOrderItems);
    }

    public function test_stock_movement_model_has_user_owned_scope(): void
    {
        // Create test users
        $user1 = User::factory()->create();
        $user2 = User::factory()->create();

        // Create test stock movements
        $user1Movement = StockMovement::factory()->create(['user_id' => $user1->id]);
        $user2Movement = StockMovement::factory()->create(['user_id' => $user2->id]);

        // Test that only current user's stock movements are returned
        $this->actingAs($user1);
        $movements = StockMovement::all();

        $this->assertCount(1, $movements);
        $this->assertEquals($user1Movement->id, $movements->first()->id);

        // Test bypassing scopes
        $allMovements = StockMovement::withoutGlobalScopes()->get();
        $this->assertCount(2, $allMovements);
    }

    public function test_user_behavior_model_has_user_owned_scope(): void
    {
        // Create test users
        $user1 = User::factory()->create();
        $user2 = User::factory()->create();

        // Create test user behaviors
        $user1Behavior = UserBehavior::factory()->create(['user_id' => $user1->id]);
        $user2Behavior = UserBehavior::factory()->create(['user_id' => $user2->id]);

        // Test that only current user's behaviors are returned
        $this->actingAs($user1);
        $behaviors = UserBehavior::all();

        $this->assertCount(1, $behaviors);
        $this->assertEquals($user1Behavior->id, $behaviors->first()->id);

        // Test bypassing scopes
        $allBehaviors = UserBehavior::withoutGlobalScopes()->get();
        $this->assertCount(2, $allBehaviors);
    }

    public function test_user_preference_model_has_user_owned_scope(): void
    {
        // Create test users
        $user1 = User::factory()->create();
        $user2 = User::factory()->create();

        // Create test user preferences
        $user1Preference = UserPreference::factory()->create(['user_id' => $user1->id]);
        $user2Preference = UserPreference::factory()->create(['user_id' => $user2->id]);

        // Test that only current user's preferences are returned
        $this->actingAs($user1);
        $preferences = UserPreference::all();

        $this->assertCount(1, $preferences);
        $this->assertEquals($user1Preference->id, $preferences->first()->id);

        // Test bypassing scopes
        $allPreferences = UserPreference::withoutGlobalScopes()->get();
        $this->assertCount(2, $allPreferences);
    }

    public function test_user_product_interaction_model_has_user_owned_scope(): void
    {
        // Create test users
        $user1 = User::factory()->create();
        $user2 = User::factory()->create();

        // Create test user product interactions
        $user1Interaction = UserProductInteraction::factory()->create(['user_id' => $user1->id]);
        $user2Interaction = UserProductInteraction::factory()->create(['user_id' => $user2->id]);

        // Test that only current user's interactions are returned
        $this->actingAs($user1);
        $interactions = UserProductInteraction::all();

        $this->assertCount(1, $interactions);
        $this->assertEquals($user1Interaction->id, $interactions->first()->id);

        // Test bypassing scopes
        $allInteractions = UserProductInteraction::withoutGlobalScopes()->get();
        $this->assertCount(2, $allInteractions);
    }

    public function test_global_scopes_can_be_combined_with_local_scopes(): void
    {
        // Create test data
        $user = User::factory()->create();
        $wishlist = UserWishlist::factory()->create(['user_id' => $user->id]);

        // Test that global scopes work with local scopes
        $this->actingAs($user);
        $wishlists = UserWishlist::where('name', 'like', '%test%')->get();
        $this->assertCount(0, $wishlists); // No wishlists with 'test' in name

        // Test bypassing global scopes with local scopes
        $allWishlists = UserWishlist::withoutGlobalScopes()->where('user_id', $user->id)->get();
        $this->assertCount(1, $allWishlists);
        $this->assertEquals($wishlist->id, $allWishlists->first()->id);
    }

    public function test_global_scopes_are_applied_to_relationships(): void
    {
        // Create test data with relationships
        $user = User::factory()->create();
        $wishlist = UserWishlist::factory()->create(['user_id' => $user->id]);
        $item = WishlistItem::factory()->create(['wishlist_id' => $wishlist->id]);

        // Test that relationships also apply global scopes
        $this->actingAs($user);
        $wishlistItems = $wishlist->items;
        $this->assertCount(1, $wishlistItems);
        $this->assertEquals($item->id, $wishlistItems->first()->id);
    }

    public function test_user_owned_scope_works_without_authentication(): void
    {
        // Create test data
        $user = User::factory()->create();
        $wishlist = UserWishlist::factory()->create(['user_id' => $user->id]);

        // Test without authentication
        $wishlists = UserWishlist::all();
        $this->assertCount(0, $wishlists); // No wishlists returned without auth

        // Test with authentication
        $this->actingAs($user);
        $wishlists = UserWishlist::all();
        $this->assertCount(1, $wishlists);
        $this->assertEquals($wishlist->id, $wishlists->first()->id);
    }
}
