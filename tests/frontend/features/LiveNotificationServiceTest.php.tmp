<?php

declare(strict_types=1);

namespace Tests\Feature;

use App\Models\User;
use App\Notifications\TestNotification;
use App\Services\LiveNotificationService;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Notifications\DatabaseNotification;
use Illuminate\Support\Facades\Event;
use Tests\TestCase;

final class LiveNotificationServiceTest extends TestCase
{
    use RefreshDatabase;

    protected LiveNotificationService $liveNotificationService;

    protected User $adminUser;

    protected User $regularUser;

    protected function setUp(): void
    {
        parent::setUp();

        $this->liveNotificationService = new LiveNotificationService;

        $this->adminUser = User::factory()->create([
            'email' => 'admin@example.com',
        ]);

        $this->regularUser = User::factory()->create([
            'email' => 'user@example.com',
        ]);
    }

    public function test_send_to_admins_sends_notification_to_admin_users(): void
    {
        // Create admin users with roles
        $admin1 = User::factory()->create(['email' => 'admin1@example.com']);
        $admin2 = User::factory()->create(['email' => 'admin2@example.com']);

        // Assign admin roles (assuming you have a role system)
        $admin1->assignRole('administrator');
        $admin2->assignRole('manager');

        Event::fake();

        $this->liveNotificationService->sendToAdmins('Test Title', 'Test Message', 'info');

        $this->assertDatabaseHas('notifications', [
            'notifiable_type' => User::class,
            'notifiable_id' => $admin1->id,
            'type' => TestNotification::class,
        ]);

        $this->assertDatabaseHas('notifications', [
            'notifiable_type' => User::class,
            'notifiable_id' => $admin2->id,
            'type' => TestNotification::class,
        ]);

        // Verify events were dispatched
        Event::assertDispatched('notification.sent', function ($event, $payload) use ($admin1) {
            return $payload['user_id'] === $admin1->id &&
                   $payload['title'] === 'Test Title' &&
                   $payload['message'] === 'Test Message' &&
                   $payload['type'] === 'info';
        });
    }

    public function test_send_to_user_sends_notification_and_dispatches_event(): void
    {
        Event::fake();

        $this->liveNotificationService->sendToUser($this->regularUser, 'Test Title', 'Test Message', 'warning');

        $this->assertDatabaseHas('notifications', [
            'notifiable_type' => User::class,
            'notifiable_id' => $this->regularUser->id,
            'type' => TestNotification::class,
        ]);

        $notification = DatabaseNotification::where('notifiable_id', $this->regularUser->id)->first();
        $this->assertEquals('Test Title', $notification->data['title']);
        $this->assertEquals('Test Message', $notification->data['message']);
        $this->assertEquals('warning', $notification->data['type']);

        // Verify event was dispatched
        Event::assertDispatched('notification.sent', function ($event, $payload) {
            return $payload['user_id'] === $this->regularUser->id &&
                   $payload['title'] === 'Test Title' &&
                   $payload['message'] === 'Test Message' &&
                   $payload['type'] === 'warning';
        });
    }

    public function test_send_to_users_sends_notification_to_multiple_users(): void
    {
        $users = collect([
            User::factory()->create(['email' => 'user1@example.com']),
            User::factory()->create(['email' => 'user2@example.com']),
            User::factory()->create(['email' => 'user3@example.com']),
        ]);

        Event::fake();

        $this->liveNotificationService->sendToUsers($users, 'Test Title', 'Test Message', 'success');

        foreach ($users as $user) {
            $this->assertDatabaseHas('notifications', [
                'notifiable_type' => User::class,
                'notifiable_id' => $user->id,
                'type' => TestNotification::class,
            ]);

            // Verify event was dispatched for each user
            Event::assertDispatched('notification.sent', function ($event, $payload) use ($user) {
                return $payload['user_id'] === $user->id &&
                       $payload['title'] === 'Test Title' &&
                       $payload['message'] === 'Test Message' &&
                       $payload['type'] === 'success';
            });
        }
    }

    public function test_send_system_notification_sends_to_admins(): void
    {
        // Create admin user
        $admin = User::factory()->create(['email' => 'admin@example.com']);
        $admin->assignRole('administrator');

        Event::fake();

        $this->liveNotificationService->sendSystemNotification('System Title', 'System Message', 'error');

        $this->assertDatabaseHas('notifications', [
            'notifiable_type' => User::class,
            'notifiable_id' => $admin->id,
            'type' => TestNotification::class,
        ]);

        $notification = DatabaseNotification::where('notifiable_id', $admin->id)->first();
        $this->assertEquals('System Title', $notification->data['title']);
        $this->assertEquals('System Message', $notification->data['message']);
        $this->assertEquals('error', $notification->data['type']);
    }

    public function test_send_order_notification_sends_to_admins(): void
    {
        // Create admin user
        $admin = User::factory()->create(['email' => 'admin@example.com']);
        $admin->assignRole('administrator');

        Event::fake();

        $this->liveNotificationService->sendOrderNotification(123, 'Order message', 'info');

        $this->assertDatabaseHas('notifications', [
            'notifiable_type' => User::class,
            'notifiable_id' => $admin->id,
            'type' => TestNotification::class,
        ]);

        $notification = DatabaseNotification::where('notifiable_id', $admin->id)->first();
        $this->assertEquals('UÅ¾sakymas #123', $notification->data['title']);
        $this->assertEquals('Order message', $notification->data['message']);
        $this->assertEquals('info', $notification->data['type']);
    }

    public function test_send_stock_alert_sends_to_admins(): void
    {
        // Create admin user
        $admin = User::factory()->create(['email' => 'admin@example.com']);
        $admin->assignRole('administrator');

        Event::fake();

        $this->liveNotificationService->sendStockAlert('Test Product', 5, 10);

        $this->assertDatabaseHas('notifications', [
            'notifiable_type' => User::class,
            'notifiable_id' => $admin->id,
            'type' => TestNotification::class,
        ]);

        $notification = DatabaseNotification::where('notifiable_id', $admin->id)->first();
        $this->assertEquals('MaÅ¾os atsargos', $notification->data['title']);
        $this->assertStringContainsString('Test Product', $notification->data['message']);
        $this->assertStringContainsString('5', $notification->data['message']);
        $this->assertStringContainsString('10', $notification->data['message']);
    }

    public function test_send_to_user_defaults_to_info_type(): void
    {
        Event::fake();

        $this->liveNotificationService->sendToUser($this->regularUser, 'Test Title', 'Test Message');

        $notification = DatabaseNotification::where('notifiable_id', $this->regularUser->id)->first();
        $this->assertEquals('info', $notification->data['type']);

        // Verify event was dispatched with default type
        Event::assertDispatched('notification.sent', function ($event, $payload) {
            return $payload['type'] === 'info';
        });
    }

    public function test_send_to_admins_defaults_to_info_type(): void
    {
        // Create admin user
        $admin = User::factory()->create(['email' => 'admin@example.com']);
        $admin->assignRole('administrator');

        Event::fake();

        $this->liveNotificationService->sendToAdmins('Test Title', 'Test Message');

        $notification = DatabaseNotification::where('notifiable_id', $admin->id)->first();
        $this->assertEquals('info', $notification->data['type']);
    }

    public function test_send_to_users_defaults_to_info_type(): void
    {
        $users = collect([
            User::factory()->create(['email' => 'user1@example.com']),
        ]);

        Event::fake();

        $this->liveNotificationService->sendToUsers($users, 'Test Title', 'Test Message');

        $notification = DatabaseNotification::where('notifiable_id', $users->first()->id)->first();
        $this->assertEquals('info', $notification->data['type']);
    }

    public function test_send_system_notification_defaults_to_info_type(): void
    {
        // Create admin user
        $admin = User::factory()->create(['email' => 'admin@example.com']);
        $admin->assignRole('administrator');

        Event::fake();

        $this->liveNotificationService->sendSystemNotification('System Title', 'System Message');

        $notification = DatabaseNotification::where('notifiable_id', $admin->id)->first();
        $this->assertEquals('info', $notification->data['type']);
    }

    public function test_send_order_notification_defaults_to_info_type(): void
    {
        // Create admin user
        $admin = User::factory()->create(['email' => 'admin@example.com']);
        $admin->assignRole('administrator');

        Event::fake();

        $this->liveNotificationService->sendOrderNotification(123, 'Order message');

        $notification = DatabaseNotification::where('notifiable_id', $admin->id)->first();
        $this->assertEquals('info', $notification->data['type']);
    }

    public function test_event_payload_contains_timestamp(): void
    {
        Event::fake();

        $this->liveNotificationService->sendToUser($this->regularUser, 'Test Title', 'Test Message', 'info');

        Event::assertDispatched('notification.sent', function ($event, $payload) {
            return isset($payload['timestamp']) &&
                   is_string($payload['timestamp']) &&
                   ! empty($payload['timestamp']);
        });
    }
}
