<?php

declare(strict_types=1);

namespace Tests\Feature;

use App\Models\Address;
use App\Models\CartItem;
use App\Models\Inventory;
use App\Models\Menu;
use App\Models\MenuItem;
use App\Models\Scopes\ActiveScope;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

final class NewGlobalScopesTest extends TestCase
{
    use RefreshDatabase;

    public function test_menu_model_has_active_scope(): void
    {
        // Create test menus
        $activeMenu = Menu::factory()->create(['is_active' => true]);
        $inactiveMenu = Menu::factory()->create(['is_active' => false]);

        // Test that only active menus are returned
        $menus = Menu::all();

        $this->assertCount(1, $menus);
        $this->assertEquals($activeMenu->id, $menus->first()->id);

        // Test bypassing scopes
        $allMenus = Menu::withoutGlobalScopes()->get();
        $this->assertCount(2, $allMenus);
    }

    public function test_menu_item_model_has_visible_scope(): void
    {
        // Create test menu items
        $visibleItem = MenuItem::factory()->create(['is_visible' => true]);
        $hiddenItem = MenuItem::factory()->create(['is_visible' => false]);

        // Test that only visible menu items are returned
        $items = MenuItem::all();

        $this->assertCount(1, $items);
        $this->assertEquals($visibleItem->id, $items->first()->id);

        // Test bypassing scopes
        $allItems = MenuItem::withoutGlobalScopes()->get();
        $this->assertCount(2, $allItems);
    }

    public function test_inventory_model_has_active_scope(): void
    {
        // Create test inventories
        $activeInventory = Inventory::factory()->create(['is_tracked' => true]);
        $inactiveInventory = Inventory::factory()->create(['is_tracked' => false]);

        // Test that only active inventories are returned
        $inventories = Inventory::all();

        $this->assertCount(1, $inventories);
        $this->assertEquals($activeInventory->id, $inventories->first()->id);

        // Test bypassing scopes
        $allInventories = Inventory::withoutGlobalScopes()->get();
        $this->assertCount(2, $allInventories);
    }

    public function test_cart_item_model_has_user_owned_scope(): void
    {
        // Create test users
        $user1 = User::factory()->create();
        $user2 = User::factory()->create();

        // Create test cart items
        $user1CartItem = CartItem::factory()->create(['user_id' => $user1->id]);
        $user2CartItem = CartItem::factory()->create(['user_id' => $user2->id]);

        // Test that only current user's cart items are returned
        $this->actingAs($user1);
        $cartItems = CartItem::all();

        $this->assertCount(1, $cartItems);
        $this->assertEquals($user1CartItem->id, $cartItems->first()->id);

        // Test bypassing scopes
        $allCartItems = CartItem::withoutGlobalScopes()->get();
        $this->assertCount(2, $allCartItems);
    }

    public function test_address_model_has_user_owned_scope(): void
    {
        // Create test users
        $user1 = User::factory()->create();
        $user2 = User::factory()->create();

        // Create test addresses
        $user1Address = Address::factory()->create(['user_id' => $user1->id]);
        $user2Address = Address::factory()->create(['user_id' => $user2->id]);

        // Test that only current user's addresses are returned
        $this->actingAs($user1);
        $addresses = Address::all();

        $this->assertCount(1, $addresses);
        $this->assertEquals($user1Address->id, $addresses->first()->id);

        // Test bypassing scopes
        $allAddresses = Address::withoutGlobalScopes()->get();
        $this->assertCount(2, $allAddresses);
    }

    public function test_tenant_scope_filters_by_tenant_id(): void
    {
        // Create test data with tenant_id
        $tenant1Data = \App\Models\Product::factory()->create(['tenant_id' => 1]);
        $tenant2Data = \App\Models\Product::factory()->create(['tenant_id' => 2]);

        // Mock tenant context
        session(['tenant_id' => 1]);

        // Test that only tenant 1 data is returned
        $products = \App\Models\Product::withoutGlobalScope(ActiveScope::class)->get();

        // Note: This test assumes the Product model has tenant_id field
        // Adjust based on actual implementation
        $this->assertTrue(true); // Placeholder assertion
    }

    public function test_date_range_scope_filters_by_dates(): void
    {
        // Create test data with different date scenarios
        $publishedPost = \App\Models\Post::factory()->create([
            'published_at' => now()->subDay(),
        ]);

        $futurePost = \App\Models\Post::factory()->create([
            'published_at' => now()->addDay(),
        ]);

        // Test that only published posts are returned
        $posts = \App\Models\Post::all();

        $this->assertCount(1, $posts);
        $this->assertEquals($publishedPost->id, $posts->first()->id);

        // Test bypassing scopes
        $allPosts = \App\Models\Post::withoutGlobalScopes()->get();
        $this->assertCount(2, $allPosts);
    }

    public function test_global_scopes_can_be_combined(): void
    {
        // Create test data
        $activeMenu = Menu::factory()->create(['is_active' => true]);
        $inactiveMenu = Menu::factory()->create(['is_active' => false]);

        // Test that global scopes work with local scopes
        $menus = Menu::where('name', 'like', '%test%')->get();
        $this->assertCount(0, $menus); // No menus with 'test' in name

        // Test bypassing global scopes with local scopes
        $allMenus = Menu::withoutGlobalScopes()->where('is_active', false)->get();
        $this->assertCount(1, $allMenus);
        $this->assertEquals($inactiveMenu->id, $allMenus->first()->id);
    }

    public function test_global_scopes_are_applied_to_relationships(): void
    {
        // Create test data with relationships
        $activeMenu = Menu::factory()->create(['is_active' => true]);
        $inactiveMenu = Menu::factory()->create(['is_active' => false]);

        $visibleItem = MenuItem::factory()->create([
            'menu_id' => $activeMenu->id,
            'is_visible' => true,
        ]);

        $hiddenItem = MenuItem::factory()->create([
            'menu_id' => $inactiveMenu->id,
            'is_visible' => false,
        ]);

        // Test that relationships also apply global scopes
        $menuItems = $activeMenu->items;
        $this->assertCount(1, $menuItems);
        $this->assertEquals($visibleItem->id, $menuItems->first()->id);
    }

    public function test_user_owned_scope_works_without_authentication(): void
    {
        // Create test data
        $user = User::factory()->create();
        $cartItem = CartItem::factory()->create(['user_id' => $user->id]);

        // Test without authentication
        $cartItems = CartItem::all();
        $this->assertCount(0, $cartItems); // No items returned without auth

        // Test with authentication
        $this->actingAs($user);
        $cartItems = CartItem::all();
        $this->assertCount(1, $cartItems);
        $this->assertEquals($cartItem->id, $cartItems->first()->id);
    }
}
