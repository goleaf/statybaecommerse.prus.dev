<?php

declare(strict_types=1);

namespace Tests\Feature\Frontend;

use App\Models\Campaign;
use App\Models\CampaignClick;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class CampaignClickTest extends TestCase
{
    use RefreshDatabase;

    public function test_can_view_campaign_clicks_page(): void
    {
        $user = User::factory()->create();
        $this->actingAs($user);

        $response = $this->get('/campaign-clicks');

        $response->assertStatus(200);
        $response->assertViewIs('campaign-clicks.index');
    }

    public function test_can_view_campaign_click_details(): void
    {
        $user = User::factory()->create();
        $this->actingAs($user);

        $campaign = Campaign::factory()->create();
        $click = CampaignClick::factory()->create([
            'campaign_id' => $campaign->id,
            'customer_id' => $user->id,
        ]);

        $response = $this->get("/campaign-clicks/{$click->id}");

        $response->assertStatus(200);
        $response->assertViewIs('campaign-clicks.show');
        $response->assertViewHas('click', $click);
    }

    public function test_can_create_campaign_click_via_api(): void
    {
        $user = User::factory()->create();
        $this->actingAs($user);

        $campaign = Campaign::factory()->create();

        $clickData = [
            'campaign_id' => $campaign->id,
            'session_id' => 'test-session-123',
            'ip_address' => '192.168.1.1',
            'user_agent' => 'Mozilla/5.0 Test Browser',
            'click_type' => 'cta',
            'clicked_url' => 'https://example.com/cta',
            'device_type' => 'desktop',
            'browser' => 'chrome',
            'os' => 'windows',
            'country' => 'Lithuania',
            'city' => 'Vilnius',
            'utm_source' => 'google',
            'utm_medium' => 'cpc',
            'utm_campaign' => 'test-campaign',
        ];

        $response = $this->postJson('/api/campaign-clicks', $clickData);

        $response->assertStatus(201);
        $response->assertJsonStructure([
            'data' => [
                'id',
                'campaign_id',
                'session_id',
                'ip_address',
                'click_type',
                'clicked_url',
                'clicked_at',
                'device_type',
                'browser',
                'os',
                'country',
                'city',
                'utm_source',
                'utm_medium',
                'utm_campaign',
            ],
        ]);

        $this->assertDatabaseHas('campaign_clicks', [
            'campaign_id' => $campaign->id,
            'session_id' => 'test-session-123',
            'click_type' => 'cta',
        ]);
    }

    public function test_can_update_campaign_click_via_api(): void
    {
        $user = User::factory()->create();
        $this->actingAs($user);

        $click = CampaignClick::factory()->create(['customer_id' => $user->id]);

        $updateData = [
            'is_converted' => true,
            'conversion_value' => 150.75,
            'conversion_data' => ['product_id' => 123, 'category' => 'electronics'],
        ];

        $response = $this->putJson("/api/campaign-clicks/{$click->id}", $updateData);

        $response->assertStatus(200);
        $response->assertJsonFragment([
            'is_converted' => true,
            'conversion_value' => 150.75,
        ]);

        $click->refresh();
        $this->assertTrue($click->is_converted);
        $this->assertEquals(150.75, $click->conversion_value);
    }

    public function test_can_delete_campaign_click_via_api(): void
    {
        $user = User::factory()->create();
        $this->actingAs($user);

        $click = CampaignClick::factory()->create(['customer_id' => $user->id]);

        $response = $this->deleteJson("/api/campaign-clicks/{$click->id}");

        $response->assertStatus(204);
        $this->assertDatabaseMissing('campaign_clicks', [
            'id' => $click->id,
        ]);
    }

    public function test_can_get_campaign_clicks_with_filters(): void
    {
        $user = User::factory()->create();
        $this->actingAs($user);

        $campaign = Campaign::factory()->create();
        $ctaClick = CampaignClick::factory()->cta()->create(['campaign_id' => $campaign->id]);
        $bannerClick = CampaignClick::factory()->banner()->create(['campaign_id' => $campaign->id]);

        $response = $this->getJson('/api/campaign-clicks?click_type=cta');

        $response->assertStatus(200);
        $response->assertJsonCount(1, 'data');
        $response->assertJsonFragment(['click_type' => 'cta']);
    }

    public function test_can_get_campaign_click_statistics(): void
    {
        $user = User::factory()->create();
        $this->actingAs($user);

        CampaignClick::factory()->count(10)->create();
        CampaignClick::factory()->converted()->count(3)->create();

        $response = $this->getJson('/api/campaign-clicks/statistics');

        $response->assertStatus(200);
        $response->assertJsonStructure([
            'total_clicks',
            'converted_clicks',
            'conversion_rate',
            'total_conversion_value',
            'today_clicks',
            'this_week_clicks',
        ]);

        $data = $response->json();
        $this->assertEquals(10, $data['total_clicks']);
        $this->assertEquals(3, $data['converted_clicks']);
        $this->assertEquals(30.0, $data['conversion_rate']);
    }

    public function test_can_get_campaign_click_analytics(): void
    {
        $user = User::factory()->create();
        $this->actingAs($user);

        // Create clicks for different days
        CampaignClick::factory()->create(['clicked_at' => now()->subDays(1)]);
        CampaignClick::factory()->create(['clicked_at' => now()->subDays(2)]);
        CampaignClick::factory()->create(['clicked_at' => now()->subDays(3)]);

        $response = $this->getJson('/api/campaign-clicks/analytics?days=7');

        $response->assertStatus(200);
        $response->assertJsonStructure([
            'clicks_over_time',
            'device_types',
            'browsers',
            'countries',
            'utm_sources',
        ]);
    }

    public function test_guest_can_create_campaign_click(): void
    {
        $campaign = Campaign::factory()->create();

        $clickData = [
            'campaign_id' => $campaign->id,
            'session_id' => 'guest-session-123',
            'ip_address' => '192.168.1.1',
            'user_agent' => 'Mozilla/5.0 Guest Browser',
            'click_type' => 'banner',
            'clicked_url' => 'https://example.com/banner',
        ];

        $response = $this->postJson('/api/campaign-clicks', $clickData);

        $response->assertStatus(201);
        $this->assertDatabaseHas('campaign_clicks', [
            'campaign_id' => $campaign->id,
            'session_id' => 'guest-session-123',
            'customer_id' => null,
        ]);
    }

    public function test_can_track_campaign_click_with_utm_parameters(): void
    {
        $campaign = Campaign::factory()->create();

        $clickData = [
            'campaign_id' => $campaign->id,
            'session_id' => 'utm-session-123',
            'click_type' => 'cta',
            'utm_source' => 'google',
            'utm_medium' => 'cpc',
            'utm_campaign' => 'summer-sale',
            'utm_term' => 'discount',
            'utm_content' => 'banner-ad',
        ];

        $response = $this->postJson('/api/campaign-clicks', $clickData);

        $response->assertStatus(201);
        $response->assertJsonFragment([
            'utm_source' => 'google',
            'utm_medium' => 'cpc',
            'utm_campaign' => 'summer-sale',
            'utm_term' => 'discount',
            'utm_content' => 'banner-ad',
        ]);
    }

    public function test_can_get_campaign_click_by_campaign(): void
    {
        $user = User::factory()->create();
        $this->actingAs($user);

        $campaign1 = Campaign::factory()->create();
        $campaign2 = Campaign::factory()->create();

        $click1 = CampaignClick::factory()->create(['campaign_id' => $campaign1->id]);
        $click2 = CampaignClick::factory()->create(['campaign_id' => $campaign2->id]);

        $response = $this->getJson("/api/campaigns/{$campaign1->id}/clicks");

        $response->assertStatus(200);
        $response->assertJsonCount(1, 'data');
        $response->assertJsonFragment(['id' => $click1->id]);
    }

    public function test_can_get_user_campaign_clicks(): void
    {
        $user = User::factory()->create();
        $this->actingAs($user);

        $otherUser = User::factory()->create();

        $userClick = CampaignClick::factory()->create(['customer_id' => $user->id]);
        $otherUserClick = CampaignClick::factory()->create(['customer_id' => $otherUser->id]);

        $response = $this->getJson('/api/my/campaign-clicks');

        $response->assertStatus(200);
        $response->assertJsonCount(1, 'data');
        $response->assertJsonFragment(['id' => $userClick->id]);
        $response->assertJsonMissing(['id' => $otherUserClick->id]);
    }

    public function test_campaign_click_validation(): void
    {
        $response = $this->postJson('/api/campaign-clicks', [
            'campaign_id' => 999999, // Non-existent campaign
            'click_type' => 'invalid_type',
            'conversion_value' => 'not_a_number',
        ]);

        $response->assertStatus(422);
        $response->assertJsonValidationErrors([
            'campaign_id',
            'click_type',
            'conversion_value',
        ]);
    }

    public function test_can_export_campaign_clicks(): void
    {
        $user = User::factory()->create();
        $this->actingAs($user);

        CampaignClick::factory()->count(5)->create();

        $response = $this->get('/api/campaign-clicks/export?format=csv');

        $response->assertStatus(200);
        $response->assertHeader('Content-Type', 'text/csv; charset=UTF-8');
    }
}
