<?php

declare(strict_types=1);

namespace Tests\Feature;

use App\Models\Document;
use App\Models\DocumentTemplate;
use App\Models\Legal;
use App\Models\Location;
use App\Models\OrderShipping;
use App\Models\Scopes\ActiveScope;
use App\Models\Scopes\EnabledScope;
use App\Models\Scopes\PublishedScope;
use App\Models\Scopes\StatusScope;
use App\Models\Scopes\UserOwnedScope;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

final class DocumentLegalLocationGlobalScopesTest extends TestCase
{
    use RefreshDatabase;

    public function test_document_model_has_status_scope(): void
    {
        // Create test documents
        $activeDocument = Document::factory()->create(['status' => 'active']);
        $inactiveDocument = Document::factory()->create(['status' => 'inactive']);
        $draftDocument = Document::factory()->create(['status' => 'draft']);

        // Test that only documents with allowed status are returned
        $documents = Document::all();

        $this->assertCount(1, $documents);
        $this->assertEquals($activeDocument->id, $documents->first()->id);

        // Test bypassing scopes
        $allDocuments = Document::withoutGlobalScopes()->get();
        $this->assertCount(3, $allDocuments);
    }

    public function test_document_template_model_has_active_scope(): void
    {
        // Create test document templates
        $activeTemplate = DocumentTemplate::factory()->create(['is_active' => true]);
        $inactiveTemplate = DocumentTemplate::factory()->create(['is_active' => false]);

        // Test that only active templates are returned
        $templates = DocumentTemplate::all();

        $this->assertCount(1, $templates);
        $this->assertEquals($activeTemplate->id, $templates->first()->id);

        // Test bypassing scopes
        $allTemplates = DocumentTemplate::withoutGlobalScopes()->get();
        $this->assertCount(2, $allTemplates);
    }

    public function test_legal_model_has_multiple_scopes(): void
    {
        // Create test legal documents
        $enabledPublishedLegal = Legal::factory()->create([
            'is_enabled' => true,
            'published_at' => now()->subDay(),
        ]);

        $disabledLegal = Legal::factory()->create([
            'is_enabled' => false,
            'published_at' => now()->subDay(),
        ]);

        $unpublishedLegal = Legal::factory()->create([
            'is_enabled' => true,
            'published_at' => now()->addDay(),
        ]);

        // Test that only enabled and published legal documents are returned
        $legals = Legal::all();

        $this->assertCount(1, $legals);
        $this->assertEquals($enabledPublishedLegal->id, $legals->first()->id);

        // Test bypassing scopes
        $allLegals = Legal::withoutGlobalScopes()->get();
        $this->assertCount(3, $allLegals);
    }

    public function test_location_model_has_multiple_scopes(): void
    {
        // Create test locations
        $activeEnabledLocation = Location::factory()->create([
            'is_active' => true,
            'is_enabled' => true,
        ]);

        $inactiveLocation = Location::factory()->create([
            'is_active' => false,
            'is_enabled' => true,
        ]);

        $disabledLocation = Location::factory()->create([
            'is_active' => true,
            'is_enabled' => false,
        ]);

        // Test that only active and enabled locations are returned
        $locations = Location::all();

        $this->assertCount(1, $locations);
        $this->assertEquals($activeEnabledLocation->id, $locations->first()->id);

        // Test bypassing scopes
        $allLocations = Location::withoutGlobalScopes()->get();
        $this->assertCount(3, $allLocations);
    }

    public function test_order_shipping_model_has_user_owned_scope(): void
    {
        $user = User::factory()->create();
        $this->actingAs($user);

        // Create test order shippings
        $userShipping = OrderShipping::factory()->create([
            'user_id' => $user->id,
        ]);

        $otherUserShipping = OrderShipping::factory()->create([
            'user_id' => User::factory()->create()->id,
        ]);

        // Test that only current user's shipping records are returned
        $shippings = OrderShipping::all();

        $this->assertCount(1, $shippings);
        $this->assertEquals($userShipping->id, $shippings->first()->id);

        // Test bypassing scopes
        $allShippings = OrderShipping::withoutGlobalScopes()->get();
        $this->assertCount(2, $allShippings);
    }

    public function test_global_scopes_can_be_combined_with_local_scopes(): void
    {
        // Create test data
        $activeTemplate = DocumentTemplate::factory()->create(['is_active' => true]);
        $inactiveTemplate = DocumentTemplate::factory()->create(['is_active' => false]);

        // Test that global scopes work with local scopes
        $templates = DocumentTemplate::where('name', 'like', '%test%')->get();
        $this->assertCount(0, $templates); // No templates with 'test' in name

        // Test bypassing global scopes with local scopes
        $allTemplates = DocumentTemplate::withoutGlobalScopes()->where('is_active', true)->get();
        $this->assertCount(1, $allTemplates);
        $this->assertEquals($activeTemplate->id, $allTemplates->first()->id);
    }

    public function test_global_scopes_are_applied_to_relationships(): void
    {
        // Create test data with relationships
        $activeLocation = Location::factory()->create([
            'is_active' => true,
            'is_enabled' => true,
        ]);

        $inactiveLocation = Location::factory()->create([
            'is_active' => false,
            'is_enabled' => true,
        ]);

        // Test that relationships also apply global scopes
        $locations = Location::all();
        $this->assertCount(1, $locations);
        $this->assertEquals($activeLocation->id, $locations->first()->id);
    }

    public function test_document_scope_combinations(): void
    {
        // Test different combinations of document scopes
        $document1 = Document::factory()->create(['status' => 'active']);
        $document2 = Document::factory()->create(['status' => 'inactive']);
        $document3 = Document::factory()->create(['status' => 'draft']);

        // Test bypassing specific scopes
        $allDocuments = Document::withoutGlobalScope(StatusScope::class)->get();
        $this->assertCount(3, $allDocuments); // All documents regardless of status
    }

    public function test_legal_scope_combinations(): void
    {
        // Test different combinations of legal scopes
        $legal1 = Legal::factory()->create([
            'is_enabled' => true,
            'published_at' => now()->subDay(),
        ]);

        $legal2 = Legal::factory()->create([
            'is_enabled' => false,
            'published_at' => now()->subDay(),
        ]);

        $legal3 = Legal::factory()->create([
            'is_enabled' => true,
            'published_at' => now()->addDay(),
        ]);

        // Test bypassing specific scopes
        $enabledLegals = Legal::withoutGlobalScope(PublishedScope::class)->get();
        $this->assertCount(1, $enabledLegals); // Only enabled legals

        $publishedLegals = Legal::withoutGlobalScope(EnabledScope::class)->get();
        $this->assertCount(1, $publishedLegals); // Only published legals
    }

    public function test_location_scope_combinations(): void
    {
        // Test different combinations of location scopes
        $location1 = Location::factory()->create([
            'is_active' => true,
            'is_enabled' => true,
        ]);

        $location2 = Location::factory()->create([
            'is_active' => false,
            'is_enabled' => true,
        ]);

        $location3 = Location::factory()->create([
            'is_active' => true,
            'is_enabled' => false,
        ]);

        // Test bypassing specific scopes
        $activeLocations = Location::withoutGlobalScope(EnabledScope::class)->get();
        $this->assertCount(2, $activeLocations); // Only active locations

        $enabledLocations = Location::withoutGlobalScope(ActiveScope::class)->get();
        $this->assertCount(2, $enabledLocations); // Only enabled locations
    }

    public function test_user_owned_scope_with_order_shipping(): void
    {
        $user1 = User::factory()->create();
        $user2 = User::factory()->create();

        // Create shippings for different users
        $user1Shipping = OrderShipping::factory()->create([
            'user_id' => $user1->id,
        ]);

        $user2Shipping = OrderShipping::factory()->create([
            'user_id' => $user2->id,
        ]);

        // Test as user1
        $this->actingAs($user1);
        $user1Shippings = OrderShipping::all();
        $this->assertCount(1, $user1Shippings);
        $this->assertEquals($user1Shipping->id, $user1Shippings->first()->id);

        // Test as user2
        $this->actingAs($user2);
        $user2Shippings = OrderShipping::all();
        $this->assertCount(1, $user2Shippings);
        $this->assertEquals($user2Shipping->id, $user2Shippings->first()->id);

        // Test bypassing user scope
        $allShippings = OrderShipping::withoutGlobalScope(UserOwnedScope::class)->get();
        $this->assertCount(2, $allShippings);
    }

    public function test_published_scope_with_legal_models(): void
    {
        // Test published scope with different date scenarios
        $legal1 = Legal::factory()->create([
            'is_enabled' => true,
            'published_at' => now()->subDay(),
        ]);

        $legal2 = Legal::factory()->create([
            'is_enabled' => true,
            'published_at' => now()->addDay(),
        ]);

        $legal3 = Legal::factory()->create([
            'is_enabled' => true,
            'published_at' => null,
        ]);

        // Test that only published legals are returned
        $legals = Legal::all();
        $this->assertCount(1, $legals);
        $this->assertEquals($legal1->id, $legals->first()->id);

        // Test bypassing published scope
        $allLegals = Legal::withoutGlobalScope(PublishedScope::class)->get();
        $this->assertCount(2, $allLegals); // Only enabled legals
    }
}
