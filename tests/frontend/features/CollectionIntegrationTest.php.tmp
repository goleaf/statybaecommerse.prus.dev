<?php

declare(strict_types=1);

namespace Tests\Feature;

use App\Models\Brand;
use App\Models\Category;
use App\Models\Collection;
use App\Models\Product;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

final class CollectionIntegrationTest extends TestCase
{
    use RefreshDatabase;

    public function test_complete_collection_workflow(): void
    {
        // Create collections with different types
        $manualCollection = Collection::factory()->create([
            'name' => 'Manual Collection',
            'is_automatic' => false,
            'is_visible' => true,
            'is_active' => true,
        ]);

        $automaticCollection = Collection::factory()->create([
            'name' => 'Automatic Collection',
            'is_automatic' => true,
            'is_visible' => true,
            'is_active' => true,
        ]);

        // Create products and brands
        $brand = Brand::factory()->create(['name' => 'Test Brand']);
        $category = Category::factory()->create(['name' => 'Test Category']);

        $product1 = Product::factory()->create([
            'name' => 'Product 1',
            'brand_id' => $brand->id,
            'is_visible' => true,
        ]);
        $product2 = Product::factory()->create([
            'name' => 'Product 2',
            'brand_id' => $brand->id,
            'is_visible' => true,
        ]);

        // Attach products to collections
        $manualCollection->products()->attach([$product1->id, $product2->id]);
        $automaticCollection->products()->attach($product1->id);

        // Test collections index page
        $response = $this->get('/lt/collections');
        $response->assertOk()
            ->assertSee($manualCollection->name)
            ->assertSee($automaticCollection->name);

        // Test individual collection pages
        $response = $this->get("/lt/collections/{$manualCollection->slug}");
        $response->assertOk()
            ->assertSee($manualCollection->name)
            ->assertSee($product1->name)
            ->assertSee($product2->name);

        $response = $this->get("/lt/collections/{$automaticCollection->slug}");
        $response->assertOk()
            ->assertSee($automaticCollection->name)
            ->assertSee($product1->name)
            ->assertDontSee($product2->name);

        // Test API endpoints
        $response = $this->getJson('/collections/api/search');
        $response->assertOk()
            ->assertJsonFragment(['name' => $manualCollection->name])
            ->assertJsonFragment(['name' => $automaticCollection->name]);

        // Test filtering by type
        $response = $this->getJson('/collections/api/by-type/manual');
        $response->assertOk()
            ->assertJsonFragment(['name' => $manualCollection->name])
            ->assertJsonMissing(['name' => $automaticCollection->name]);

        // Test collections with products
        $response = $this->getJson('/collections/api/with-products');
        $response->assertOk()
            ->assertJsonFragment(['name' => $manualCollection->name])
            ->assertJsonFragment(['name' => $automaticCollection->name]);
    }

    public function test_collection_search_and_filtering_workflow(): void
    {
        // Create collections with different names and types
        $summerCollection = Collection::factory()->create([
            'name' => 'Summer Collection',
            'is_automatic' => false,
            'is_visible' => true,
        ]);

        $winterCollection = Collection::factory()->create([
            'name' => 'Winter Collection',
            'is_automatic' => true,
            'is_visible' => true,
        ]);

        $toolsCollection = Collection::factory()->create([
            'name' => 'Tools Collection',
            'is_automatic' => false,
            'is_visible' => true,
        ]);

        // Test search functionality
        $response = $this->get('/lt/collections?search=Summer');
        $response->assertOk()
            ->assertSee($summerCollection->name)
            ->assertDontSee($winterCollection->name)
            ->assertDontSee($toolsCollection->name);

        // Test type filtering
        $response = $this->get('/lt/collections?type=manual');
        $response->assertOk();

        // Test API search
        $response = $this->getJson('/collections/api/search?search=Tools');
        $response->assertOk()
            ->assertJsonFragment(['name' => $toolsCollection->name])
            ->assertJsonMissing(['name' => $summerCollection->name])
            ->assertJsonMissing(['name' => $winterCollection->name]);
    }

    public function test_collection_product_management_workflow(): void
    {
        $collection = Collection::factory()->create([
            'is_visible' => true,
            'is_active' => true,
        ]);

        $brand = Brand::factory()->create();
        $category = Category::factory()->create();

        $products = Product::factory()->count(5)->create([
            'brand_id' => $brand->id,
            'is_visible' => true,
        ]);

        // Attach products to collection
        $collection->products()->attach($products->pluck('id'));

        // Test collection show page with products
        $response = $this->get("/lt/collections/{$collection->slug}");
        $response->assertOk()
            ->assertSee($collection->name);

        // Test brand filtering
        $response = $this->get("/lt/collections/{$collection->slug}?brandIds[]={$brand->id}");
        $response->assertOk();

        // Test sorting
        $response = $this->get("/lt/collections/{$collection->slug}?sort=name_asc");
        $response->assertOk();

        // Test API endpoint for collection products
        $response = $this->getJson("/collections/{$collection->slug}/products");
        $response->assertOk()
            ->assertJsonCount(5, 'data');

        // Test pagination
        $response = $this->getJson("/collections/{$collection->slug}/products?page=1&per_page=3");
        $response->assertOk()
            ->assertJsonCount(3, 'data');
    }

    public function test_collection_translation_workflow(): void
    {
        $collection = Collection::factory()->create([
            'name' => 'English Collection',
            'slug' => 'english-collection',
            'is_visible' => true,
            'is_active' => true,
        ]);

        // Create Lithuanian translation
        \App\Models\Translations\CollectionTranslation::factory()->create([
            'collection_id' => $collection->id,
            'locale' => 'lt',
            'name' => 'Lietuvių Kolekcija',
            'slug' => 'lietuviu-kolekcija',
            'description' => 'Lietuvių aprašymas',
        ]);

        // Test with English locale
        app()->setLocale('en');
        $response = $this->get("/lt/collections/{$collection->slug}");
        $response->assertOk()
            ->assertSee('English Collection');

        // Test with Lithuanian locale
        app()->setLocale('lt');
        $response = $this->get("/lt/collections/{$collection->slug}");
        $response->assertOk()
            ->assertSee('Lietuvių Kolekcija');

        // Test canonical redirect
        $response = $this->get('/lt/collections/english-collection');
        $response->assertRedirect('/lt/collections/lietuviu-kolekcija');
    }

    public function test_collection_admin_workflow(): void
    {
        $adminUser = User::factory()->create(['is_admin' => true]);

        // Test admin can view collections
        $response = $this->actingAs($adminUser)
            ->get('/admin/collections');
        $response->assertOk();

        // Test admin can create collection
        $collectionData = [
            'name' => 'Admin Created Collection',
            'slug' => 'admin-created-collection',
            'description' => 'Admin created description',
            'is_visible' => true,
            'is_automatic' => false,
            'sort_order' => 1,
            'display_type' => 'grid',
            'products_per_page' => 12,
            'show_filters' => true,
        ];

        $response = $this->actingAs($adminUser)
            ->post('/admin/collections', $collectionData);
        $response->assertRedirect();

        $this->assertDatabaseHas('collections', [
            'name' => 'Admin Created Collection',
            'slug' => 'admin-created-collection',
        ]);

        // Test admin can edit collection
        $collection = Collection::where('slug', 'admin-created-collection')->first();
        $response = $this->actingAs($adminUser)
            ->get("/admin/collections/{$collection->id}/edit");
        $response->assertOk();

        // Test admin can update collection
        $updateData = [
            'name' => 'Updated Collection Name',
            'description' => 'Updated description',
        ];

        $response = $this->actingAs($adminUser)
            ->put("/admin/collections/{$collection->id}", $updateData);
        $response->assertRedirect();

        $this->assertDatabaseHas('collections', [
            'id' => $collection->id,
            'name' => 'Updated Collection Name',
        ]);
    }

    public function test_collection_performance_workflow(): void
    {
        // Create multiple collections with products
        $collections = Collection::factory()->count(10)->create(['is_visible' => true]);
        $products = Product::factory()->count(50)->create(['is_visible' => true]);

        // Attach products to collections
        foreach ($collections as $collection) {
            $collection->products()->attach($products->random(5)->pluck('id'));
        }

        // Test collections index performance
        $startTime = microtime(true);
        $response = $this->get('/lt/collections');
        $endTime = microtime(true);

        $response->assertOk();
        $this->assertLessThan(2.0, $endTime - $startTime); // Should load in less than 2 seconds

        // Test API performance
        $startTime = microtime(true);
        $response = $this->getJson('/collections/api/search');
        $endTime = microtime(true);

        $response->assertOk();
        $this->assertLessThan(1.0, $endTime - $startTime); // API should respond in less than 1 second

        // Test individual collection performance
        $collection = $collections->first();
        $startTime = microtime(true);
        $response = $this->get("/lt/collections/{$collection->slug}");
        $endTime = microtime(true);

        $response->assertOk();
        $this->assertLessThan(2.0, $endTime - $startTime); // Should load in less than 2 seconds
    }

    public function test_collection_error_handling_workflow(): void
    {
        // Test 404 for non-existent collection
        $response = $this->get('/lt/collections/non-existent-collection');
        $response->assertNotFound();

        // Test 404 for hidden collection
        $hiddenCollection = Collection::factory()->create(['is_visible' => false]);
        $response = $this->get("/lt/collections/{$hiddenCollection->slug}");
        $response->assertNotFound();

        // Test 404 for inactive collection
        $inactiveCollection = Collection::factory()->create(['is_active' => false]);
        $response = $this->get("/lt/collections/{$inactiveCollection->slug}");
        $response->assertNotFound();

        // Test API error handling
        $response = $this->getJson('/collections/api/search?search=non-existent');
        $response->assertOk()
            ->assertJsonCount(0, 'data');

        // Test invalid API parameters
        $response = $this->getJson('/collections/api/by-type/invalid-type');
        $response->assertOk()
            ->assertJsonCount(0, 'data');
    }

    public function test_collection_cache_workflow(): void
    {
        $collection = Collection::factory()->create(['is_visible' => true]);

        // Test cache is cleared on collection update
        $collection->update(['name' => 'Updated Name']);

        $response = $this->get("/lt/collections/{$collection->slug}");
        $response->assertOk()
            ->assertSee('Updated Name');

        // Test cache is cleared on collection delete
        $collection->delete();

        $response = $this->get("/lt/collections/{$collection->slug}");
        $response->assertNotFound();
    }

    public function test_collection_seo_workflow(): void
    {
        $collection = Collection::factory()->create([
            'name' => 'SEO Test Collection',
            'seo_title' => 'SEO Title',
            'seo_description' => 'SEO Description',
            'meta_title' => 'Meta Title',
            'meta_description' => 'Meta Description',
            'meta_keywords' => ['keyword1', 'keyword2'],
            'is_visible' => true,
        ]);

        $response = $this->get("/lt/collections/{$collection->slug}");

        $response->assertOk()
            ->assertSee('SEO Title')
            ->assertSee('SEO Description')
            ->assertSee('Meta Title')
            ->assertSee('Meta Description');
    }
}
