<?php

declare(strict_types=1);

namespace Tests\Feature;

use App\Services\PaginationService;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

final class SimpleSkipWhileTest extends TestCase
{
    use RefreshDatabase;

    public function test_basic_skip_while_functionality(): void
    {
        $collection = collect([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);

        $subset = $collection->skipWhile(function (int $item) {
            return $item <= 5;
        });

        $this->assertEquals([5 => 6, 6 => 7, 7 => 8, 8 => 9, 9 => 10], $subset->all());
        $this->assertCount(5, $subset);
    }

    public function test_skip_while_with_objects(): void
    {
        $products = collect([
            (object) ['id' => 1, 'name' => '', 'is_visible' => true, 'price' => 100],
            (object) ['id' => 2, 'name' => 'Valid Product', 'is_visible' => false, 'price' => 200],
            (object) ['id' => 3, 'name' => 'Another Valid', 'is_visible' => true, 'price' => 0],
            (object) ['id' => 4, 'name' => 'Good Product', 'is_visible' => true, 'price' => 300],
        ]);

        $filteredProducts = $products->skipWhile(function ($product) {
            return empty($product->name) ||
                   ! $product->is_visible ||
                   $product->price <= 0;
        });

        $this->assertCount(1, $filteredProducts);
        $this->assertEquals(4, $filteredProducts->first()->id);
    }

    public function test_pagination_service_with_skip_while(): void
    {
        $products = collect([
            (object) ['id' => 1, 'name' => '', 'is_visible' => true, 'price' => 100],
            (object) ['id' => 2, 'name' => 'Valid Product', 'is_visible' => false, 'price' => 200],
            (object) ['id' => 3, 'name' => 'Another Valid', 'is_visible' => true, 'price' => 0],
            (object) ['id' => 4, 'name' => 'Good Product', 'is_visible' => true, 'price' => 300],
        ]);

        $skipWhileCallback = function ($product) {
            return empty($product->name) ||
                   ! $product->is_visible ||
                   $product->price <= 0;
        };

        $paginator = PaginationService::paginateWithSkipWhile($products, $skipWhileCallback, 2, 1);

        $this->assertEquals(1, $paginator->total());
        $this->assertEquals(1, $paginator->lastPage());
        $this->assertCount(1, $paginator->items());
        $this->assertEquals(4, $paginator->items()[0]->id);
    }

    public function test_skip_while_with_split_in(): void
    {
        $products = collect([
            (object) ['id' => 1, 'name' => '', 'is_visible' => true, 'price' => 100],
            (object) ['id' => 2, 'name' => 'Valid Product 1', 'is_visible' => true, 'price' => 200],
            (object) ['id' => 3, 'name' => 'Valid Product 2', 'is_visible' => true, 'price' => 300],
            (object) ['id' => 4, 'name' => 'Valid Product 3', 'is_visible' => true, 'price' => 400],
        ]);

        $validProducts = $products->skipWhile(function ($product) {
            return empty($product->name) ||
                   ! $product->is_visible ||
                   $product->price <= 0;
        });

        $splitProducts = $validProducts->splitIn(2);

        $this->assertCount(2, $splitProducts);
        $this->assertEquals(2, $splitProducts->first()->count());
        $this->assertEquals(1, $splitProducts->last()->count());
        $this->assertEquals(2, $splitProducts->first()->first()->id);
        $this->assertEquals(4, $splitProducts->last()->first()->id);
    }

    public function test_skip_while_performance(): void
    {
        $products = collect();

        // Add 1000 invalid products first
        for ($i = 1; $i <= 1000; $i++) {
            $products->push((object) [
                'id' => $i,
                'name' => '',
                'is_visible' => false,
                'price' => 0,
            ]);
        }

        // Add 10 valid products at the end
        for ($i = 1001; $i <= 1010; $i++) {
            $products->push((object) [
                'id' => $i,
                'name' => "Valid Product {$i}",
                'is_visible' => true,
                'price' => 100,
            ]);
        }

        $startTime = microtime(true);

        $validProducts = $products->skipWhile(function ($product) {
            return empty($product->name) ||
                   ! $product->is_visible ||
                   $product->price <= 0;
        });

        $endTime = microtime(true);
        $executionTime = $endTime - $startTime;

        $this->assertCount(10, $validProducts);
        $this->assertEquals(1001, $validProducts->first()->id);
        $this->assertEquals(1010, $validProducts->last()->id);
        $this->assertLessThan(1.0, $executionTime);
    }
}
