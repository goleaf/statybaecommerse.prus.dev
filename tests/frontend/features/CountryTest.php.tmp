<?php

declare(strict_types=1);

namespace Tests\Feature;

use App\Models\Country;
use App\Models\Translations\CountryTranslation;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

final class CountryTest extends TestCase
{
    use RefreshDatabase;

    private User $adminUser;

    protected function setUp(): void
    {
        parent::setUp();

        $this->adminUser = User::factory()->create([
            'email' => 'admin@test.com',
            'name' => 'Admin User',
        ]);

        // Assign admin role if roles exist
        if (class_exists(\Spatie\Permission\Models\Role::class)) {
            $adminRole = \Spatie\Permission\Models\Role::firstOrCreate(['name' => 'admin']);
            $this->adminUser->assignRole($adminRole);
        }
    }

    public function test_country_model_can_be_created(): void
    {
        $country = Country::create([
            'cca2' => 'LT',
            'cca3' => 'LTU',
            'phone_calling_code' => '370',
            'flag' => 'ðŸ‡±ðŸ‡¹',
            'region' => 'Europe',
            'subregion' => 'Northern Europe',
            'latitude' => 55.169438,
            'longitude' => 23.881275,
            'currencies' => ['EUR'],
            'is_enabled' => true,
            'sort_order' => 1,
        ]);

        $this->assertDatabaseHas('countries', [
            'cca2' => 'LT',
            'cca3' => 'LTU',
            'phone_calling_code' => '370',
            'region' => 'Europe',
        ]);

        $this->assertEquals('LT', $country->cca2);
        $this->assertEquals('LTU', $country->cca3);
        $this->assertEquals(['EUR'], $country->currencies);
        $this->assertTrue($country->is_enabled);
    }

    public function test_country_translations_can_be_created(): void
    {
        $country = Country::create([
            'cca2' => 'LT',
            'cca3' => 'LTU',
            'phone_calling_code' => '370',
            'flag' => 'ðŸ‡±ðŸ‡¹',
            'region' => 'Europe',
            'subregion' => 'Northern Europe',
            'latitude' => 55.169438,
            'longitude' => 23.881275,
            'currencies' => ['EUR'],
            'is_enabled' => true,
            'sort_order' => 1,
        ]);

        $translation = CountryTranslation::create([
            'country_id' => $country->id,
            'locale' => 'en',
            'name' => 'Lithuania',
            'name_official' => 'Republic of Lithuania',
        ]);

        $this->assertDatabaseHas('country_translations', [
            'country_id' => $country->id,
            'locale' => 'en',
            'name' => 'Lithuania',
            'name_official' => 'Republic of Lithuania',
        ]);

        $this->assertEquals('Lithuania', $translation->name);
        $this->assertEquals('Republic of Lithuania', $translation->name_official);
    }

    public function test_country_has_translations_relationship(): void
    {
        $country = Country::create([
            'cca2' => 'LT',
            'cca3' => 'LTU',
            'phone_calling_code' => '370',
            'flag' => 'ðŸ‡±ðŸ‡¹',
            'region' => 'Europe',
            'subregion' => 'Northern Europe',
            'latitude' => 55.169438,
            'longitude' => 23.881275,
            'currencies' => ['EUR'],
            'is_enabled' => true,
            'sort_order' => 1,
        ]);

        CountryTranslation::create([
            'country_id' => $country->id,
            'locale' => 'en',
            'name' => 'Lithuania',
            'name_official' => 'Republic of Lithuania',
        ]);

        CountryTranslation::create([
            'country_id' => $country->id,
            'locale' => 'lt',
            'name' => 'Lietuva',
            'name_official' => 'Lietuvos Respublika',
        ]);

        $country->load('translations');

        $this->assertCount(2, $country->translations);
        $this->assertEquals('Lithuania', $country->translations->where('locale', 'en')->first()->name);
        $this->assertEquals('Lietuva', $country->translations->where('locale', 'lt')->first()->name);
    }

    public function test_country_trans_method_returns_translated_name(): void
    {
        $country = Country::create([
            'cca2' => 'LT',
            'cca3' => 'LTU',
            'phone_calling_code' => '370',
            'flag' => 'ðŸ‡±ðŸ‡¹',
            'region' => 'Europe',
            'subregion' => 'Northern Europe',
            'latitude' => 55.169438,
            'longitude' => 23.881275,
            'currencies' => ['EUR'],
            'is_enabled' => true,
            'sort_order' => 1,
        ]);

        CountryTranslation::create([
            'country_id' => $country->id,
            'locale' => 'en',
            'name' => 'Lithuania',
            'name_official' => 'Republic of Lithuania',
        ]);

        CountryTranslation::create([
            'country_id' => $country->id,
            'locale' => 'lt',
            'name' => 'Lietuva',
            'name_official' => 'Lietuvos Respublika',
        ]);

        $country->load('translations');

        // Test English translation
        app()->setLocale('en');
        $this->assertEquals('Lithuania', $country->trans('name'));
        $this->assertEquals('Republic of Lithuania', $country->trans('name_official'));

        // Test Lithuanian translation
        app()->setLocale('lt');
        $this->assertEquals('Lietuva', $country->trans('name'));
        $this->assertEquals('Lietuvos Respublika', $country->trans('name_official'));
    }

    public function test_country_display_name_attribute(): void
    {
        $country = Country::create([
            'cca2' => 'LT',
            'cca3' => 'LTU',
            'phone_calling_code' => '370',
            'flag' => 'ðŸ‡±ðŸ‡¹',
            'region' => 'Europe',
            'subregion' => 'Northern Europe',
            'latitude' => 55.169438,
            'longitude' => 23.881275,
            'currencies' => ['EUR'],
            'is_enabled' => true,
            'sort_order' => 1,
        ]);

        CountryTranslation::create([
            'country_id' => $country->id,
            'locale' => 'en',
            'name' => 'Lithuania',
            'name_official' => 'Republic of Lithuania',
        ]);

        $country->load('translations');
        app()->setLocale('en');

        $this->assertEquals('Lithuania (+370)', $country->display_name);
    }

    public function test_country_admin_routes_exist(): void
    {
        $this->actingAs($this->adminUser);

        // Test countries index route
        $response = $this->get(route('filament.admin.resources.countries.index'));
        $response->assertStatus(200);

        // Test countries create route
        $response = $this->get(route('filament.admin.resources.countries.create'));
        $response->assertStatus(200);
    }

    public function test_country_admin_index_displays_countries(): void
    {
        $this->actingAs($this->adminUser);

        // Create test countries
        $lithuania = Country::create([
            'cca2' => 'LT',
            'cca3' => 'LTU',
            'phone_calling_code' => '370',
            'flag' => 'ðŸ‡±ðŸ‡¹',
            'region' => 'Europe',
            'subregion' => 'Northern Europe',
            'latitude' => 55.169438,
            'longitude' => 23.881275,
            'currencies' => ['EUR'],
            'is_enabled' => true,
            'sort_order' => 1,
        ]);

        CountryTranslation::create([
            'country_id' => $lithuania->id,
            'locale' => 'en',
            'name' => 'Lithuania',
            'name_official' => 'Republic of Lithuania',
        ]);

        $response = $this->get(route('filament.admin.resources.countries.index'));
        $response->assertStatus(200);
        $response->assertSee('LT');
        $response->assertSee('ðŸ‡±ðŸ‡¹');
        $response->assertSee('Europe');
    }

    public function test_country_can_be_created_via_admin(): void
    {
        $this->actingAs($this->adminUser);

        $countryData = [
            'cca2' => 'DE',
            'cca3' => 'DEU',
            'phone_calling_code' => '49',
            'flag' => 'ðŸ‡©ðŸ‡ª',
            'region' => 'Europe',
            'subregion' => 'Central Europe',
            'latitude' => 51.165691,
            'longitude' => 10.451526,
            'currencies' => ['EUR'],
        ];

        $response = $this->post(route('filament.admin.resources.countries.create'), $countryData);

        // Should redirect after successful creation
        $response->assertRedirect();

        $this->assertDatabaseHas('countries', [
            'cca2' => 'DE',
            'cca3' => 'DEU',
            'phone_calling_code' => '49',
            'region' => 'Europe',
        ]);
    }

    public function test_country_validation_rules(): void
    {
        $this->actingAs($this->adminUser);

        // Test with invalid data
        $invalidData = [
            'cca2' => '',  // Required
            'cca3' => '',  // Required
            'phone_calling_code' => '',
        ];

        $response = $this->post(route('filament.admin.resources.countries.create'), $invalidData);

        $response->assertSessionHasErrors(['cca2', 'cca3']);
    }

    public function test_country_unique_constraints(): void
    {
        $this->actingAs($this->adminUser);

        // Create first country
        Country::create([
            'cca2' => 'LT',
            'cca3' => 'LTU',
            'phone_calling_code' => '370',
            'flag' => 'ðŸ‡±ðŸ‡¹',
            'region' => 'Europe',
            'subregion' => 'Northern Europe',
            'latitude' => 55.169438,
            'longitude' => 23.881275,
            'currencies' => ['EUR'],
            'is_enabled' => true,
            'sort_order' => 1,
        ]);

        // Try to create another country with same codes
        $duplicateData = [
            'cca2' => 'LT',  // Duplicate
            'cca3' => 'LTU',  // Duplicate
            'phone_calling_code' => '370',
            'flag' => 'ðŸ‡±ðŸ‡¹',
            'region' => 'Europe',
        ];

        $response = $this->post(route('filament.admin.resources.countries.create'), $duplicateData);

        $response->assertSessionHasErrors(['cca2', 'cca3']);
    }

    public function test_country_soft_deletes(): void
    {
        $country = Country::create([
            'cca2' => 'LT',
            'cca3' => 'LTU',
            'phone_calling_code' => '370',
            'flag' => 'ðŸ‡±ðŸ‡¹',
            'region' => 'Europe',
            'subregion' => 'Northern Europe',
            'latitude' => 55.169438,
            'longitude' => 23.881275,
            'currencies' => ['EUR'],
            'is_enabled' => true,
            'sort_order' => 1,
        ]);

        $country->delete();

        $this->assertSoftDeleted('countries', ['id' => $country->id]);
        $this->assertNull(Country::find($country->id));
        $this->assertNotNull(Country::withTrashed()->find($country->id));
    }
}
