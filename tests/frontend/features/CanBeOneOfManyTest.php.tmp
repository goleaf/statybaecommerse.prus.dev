<?php

declare(strict_types=1);

namespace Tests\Feature;

use App\Models\Order;
use App\Models\Product;
use App\Models\ProductHistory;
use App\Models\Review;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

final class CanBeOneOfManyTest extends TestCase
{
    use RefreshDatabase;

    public function test_user_latest_order_relationship(): void
    {
        $user = User::factory()->create();

        // Create multiple orders
        $oldOrder = Order::factory()->create([
            'user_id' => $user->id,
            'created_at' => now()->subDays(5),
        ]);

        $latestOrder = Order::factory()->create([
            'user_id' => $user->id,
            'created_at' => now()->subDays(1),
        ]);

        // Refresh the user to clear any cached relationships
        $user->refresh();

        // Test the latestOrder relationship
        $this->assertInstanceOf(Order::class, $user->latestOrder);
        $this->assertEquals($latestOrder->id, $user->latestOrder->id);
        $this->assertNotEquals($oldOrder->id, $user->latestOrder->id);
    }

    public function test_user_latest_completed_order_relationship(): void
    {
        $user = User::factory()->create();

        // Create orders with different statuses
        $pendingOrder = Order::factory()->create([
            'user_id' => $user->id,
            'status' => 'pending',
            'created_at' => now()->subDays(1),
        ]);

        $completedOrder = Order::factory()->create([
            'user_id' => $user->id,
            'status' => 'completed',
            'created_at' => now()->subDays(2),
        ]);

        $deliveredOrder = Order::factory()->create([
            'user_id' => $user->id,
            'status' => 'delivered',
            'created_at' => now()->subDays(3),
        ]);

        // Test the latestCompletedOrder relationship
        $this->assertInstanceOf(Order::class, $user->latestCompletedOrder);
        $this->assertEquals($completedOrder->id, $user->latestCompletedOrder->id);
        $this->assertNotEquals($pendingOrder->id, $user->latestCompletedOrder->id);
    }

    public function test_user_highest_value_order_relationship(): void
    {
        $user = User::factory()->create();

        // Create orders with different totals
        $lowValueOrder = Order::factory()->create([
            'user_id' => $user->id,
            'total' => 100.00,
        ]);

        $highValueOrder = Order::factory()->create([
            'user_id' => $user->id,
            'total' => 500.00,
        ]);

        $mediumValueOrder = Order::factory()->create([
            'user_id' => $user->id,
            'total' => 250.00,
        ]);

        // Refresh the user to clear any cached relationships
        $user->refresh();

        // Test the highestValueOrder relationship
        $this->assertInstanceOf(Order::class, $user->highestValueOrder);
        $this->assertEquals($highValueOrder->id, $user->highestValueOrder->id);
        $this->assertEquals(500.00, $user->highestValueOrder->total);
    }

    public function test_user_latest_review_relationship(): void
    {
        $user = User::factory()->create();
        $product = Product::factory()->create();

        // Create multiple reviews
        $oldReview = Review::factory()->create([
            'user_id' => $user->id,
            'product_id' => $product->id,
            'created_at' => now()->subDays(5),
        ]);

        $latestReview = Review::factory()->create([
            'user_id' => $user->id,
            'product_id' => $product->id,
            'created_at' => now()->subDays(1),
        ]);

        // Refresh the user to clear any cached relationships
        $user->refresh();

        // Test the latestReview relationship
        $this->assertInstanceOf(Review::class, $user->latestReview);

        // Debug: Let's see what we're actually getting
        $actualLatestReview = $user->latestReview;
        $this->assertNotNull($actualLatestReview, 'Latest review should not be null');

        // Check if the relationship is working by comparing created_at dates
        $this->assertTrue(
            $actualLatestReview->created_at->gte($oldReview->created_at),
            'Latest review should be newer than old review'
        );

        $this->assertEquals($latestReview->id, $user->latestReview->id);
        $this->assertNotEquals($oldReview->id, $user->latestReview->id);
    }

    public function test_user_highest_rated_review_relationship(): void
    {
        $user = User::factory()->create();
        $product = Product::factory()->create();

        // Create reviews with different ratings
        $lowRatingReview = Review::factory()->create([
            'user_id' => $user->id,
            'product_id' => $product->id,
            'rating' => 2,
        ]);

        $highRatingReview = Review::factory()->create([
            'user_id' => $user->id,
            'product_id' => $product->id,
            'rating' => 5,
        ]);

        $mediumRatingReview = Review::factory()->create([
            'user_id' => $user->id,
            'product_id' => $product->id,
            'rating' => 3,
        ]);

        // Refresh the user to clear any cached relationships
        $user->refresh();

        // Test the highestRatedReview relationship
        $this->assertInstanceOf(Review::class, $user->highestRatedReview);
        $this->assertEquals($highRatingReview->id, $user->highestRatedReview->id);
        $this->assertEquals(5, $user->highestRatedReview->rating);
    }

    public function test_product_latest_review_relationship(): void
    {
        $product = Product::factory()->create();
        $user = User::factory()->create();

        // Create multiple reviews
        $oldReview = Review::factory()->create([
            'product_id' => $product->id,
            'user_id' => $user->id,
            'created_at' => now()->subDays(5),
        ]);

        $latestReview = Review::factory()->create([
            'product_id' => $product->id,
            'user_id' => $user->id,
            'created_at' => now()->subDays(1),
        ]);

        // Refresh the product to clear any cached relationships
        $product->refresh();

        // Test the latestReview relationship
        $this->assertInstanceOf(Review::class, $product->latestReview);
        $this->assertEquals($latestReview->id, $product->latestReview->id);
        $this->assertNotEquals($oldReview->id, $product->latestReview->id);
    }

    public function test_product_highest_rated_review_relationship(): void
    {
        $product = Product::factory()->create();
        $user = User::factory()->create();

        // Create reviews with different ratings
        $lowRatingReview = Review::factory()->create([
            'product_id' => $product->id,
            'user_id' => $user->id,
            'rating' => 2,
        ]);

        $highRatingReview = Review::factory()->create([
            'product_id' => $product->id,
            'user_id' => $user->id,
            'rating' => 5,
        ]);

        // Refresh the product to clear any cached relationships
        $product->refresh();

        // Test the highestRatedReview relationship
        $this->assertInstanceOf(Review::class, $product->highestRatedReview);
        $this->assertEquals($highRatingReview->id, $product->highestRatedReview->id);
        $this->assertEquals(5, $product->highestRatedReview->rating);
    }

    public function test_product_latest_approved_review_relationship(): void
    {
        $product = Product::factory()->create();
        $user = User::factory()->create();

        // Create reviews with different approval statuses
        $pendingReview = Review::factory()->create([
            'product_id' => $product->id,
            'user_id' => $user->id,
            'is_approved' => false,
            'created_at' => now()->subDays(1),
        ]);

        $approvedReview = Review::factory()->create([
            'product_id' => $product->id,
            'user_id' => $user->id,
            'is_approved' => true,
            'created_at' => now()->subDays(2),
        ]);

        // Test the latestApprovedReview relationship
        $this->assertInstanceOf(Review::class, $product->latestApprovedReview);
        $this->assertEquals($approvedReview->id, $product->latestApprovedReview->id);
        $this->assertTrue($product->latestApprovedReview->is_approved);
    }

    public function test_product_latest_price_change_relationship(): void
    {
        $product = Product::factory()->create();

        // Create price history entries
        $oldPriceChange = ProductHistory::factory()->create([
            'product_id' => $product->id,
            'field_name' => 'price',
            'old_value' => '100.00',
            'new_value' => '120.00',
            'created_at' => now()->subDays(5),
        ]);

        $latestPriceChange = ProductHistory::factory()->create([
            'product_id' => $product->id,
            'field_name' => 'price',
            'old_value' => '120.00',
            'new_value' => '150.00',
            'created_at' => now()->subDays(1),
        ]);

        // Test the latestPriceChange relationship
        $this->assertInstanceOf(ProductHistory::class, $product->latestPriceChange);
        $this->assertEquals($latestPriceChange->id, $product->latestPriceChange->id);
        $this->assertEquals('price', $product->latestPriceChange->field_name);
    }

    public function test_order_latest_item_relationship(): void
    {
        $order = Order::factory()->create();
        $product = Product::factory()->create();

        // Create multiple order items
        $oldItem = $order->items()->create([
            'product_id' => $product->id,
            'name' => $product->name,
            'sku' => $product->sku,
            'quantity' => 1,
            'price' => 100.00,
            'total' => 100.00,
            'created_at' => now()->subDays(5),
        ]);

        $latestItem = $order->items()->create([
            'product_id' => $product->id,
            'name' => $product->name,
            'sku' => $product->sku,
            'quantity' => 2,
            'price' => 150.00,
            'total' => 300.00,
            'created_at' => now()->subDays(1),
        ]);

        // Test the latestItem relationship
        $this->assertInstanceOf(\App\Models\OrderItem::class, $order->latestItem);
        $this->assertEquals($latestItem->id, $order->latestItem->id);
        $this->assertNotEquals($oldItem->id, $order->latestItem->id);
    }

    public function test_user_last_order_date_attribute_uses_latest_order(): void
    {
        $user = User::factory()->create();

        // Create an order
        $order = Order::factory()->create([
            'user_id' => $user->id,
            'created_at' => now()->subDays(2),
        ]);

        // Refresh the user to clear any cached relationships
        $user->refresh();

        // Test that the attribute uses the latestOrder relationship
        $this->assertEquals($order->created_at->format('Y-m-d'), $user->last_order_date);

        // Also test that the latestOrder relationship works directly
        $this->assertInstanceOf(Order::class, $user->latestOrder);
        $this->assertEquals($order->id, $user->latestOrder->id);
    }
}
