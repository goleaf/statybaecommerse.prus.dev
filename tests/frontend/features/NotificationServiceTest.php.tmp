<?php

declare(strict_types=1);

namespace Tests\Feature;

use App\Models\Order;
use App\Models\Product;
use App\Models\User;
use App\Notifications\OrderNotification;
use App\Notifications\ProductNotification;
use App\Notifications\SystemNotification;
use App\Notifications\TestNotification;
use App\Notifications\UserNotification;
use App\Services\NotificationService;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Notifications\DatabaseNotification;
use Illuminate\Support\Collection;
use Tests\TestCase;

final class NotificationServiceTest extends TestCase
{
    use RefreshDatabase;

    protected NotificationService $notificationService;

    protected User $adminUser;

    protected User $regularUser;

    protected function setUp(): void
    {
        parent::setUp();

        $this->notificationService = new NotificationService;

        $this->adminUser = User::factory()->create([
            'email' => 'admin@example.com',
        ]);

        $this->regularUser = User::factory()->create([
            'email' => 'user@example.com',
        ]);
    }

    public function test_send_to_admins_sends_notification_to_admin_users(): void
    {
        // Create admin users with roles
        $admin1 = User::factory()->create(['email' => 'admin1@example.com']);
        $admin2 = User::factory()->create(['email' => 'admin2@example.com']);

        // Assign admin roles (assuming you have a role system)
        $admin1->assignRole('administrator');
        $admin2->assignRole('manager');

        $this->notificationService->sendToAdmins('Test Title', 'Test Message', 'info');

        $this->assertDatabaseHas('notifications', [
            'notifiable_type' => User::class,
            'notifiable_id' => $admin1->id,
            'type' => TestNotification::class,
        ]);

        $this->assertDatabaseHas('notifications', [
            'notifiable_type' => User::class,
            'notifiable_id' => $admin2->id,
            'type' => TestNotification::class,
        ]);
    }

    public function test_send_to_user_sends_notification_to_specific_user(): void
    {
        $this->notificationService->sendToUser($this->regularUser, 'Test Title', 'Test Message', 'warning');

        $this->assertDatabaseHas('notifications', [
            'notifiable_type' => User::class,
            'notifiable_id' => $this->regularUser->id,
            'type' => TestNotification::class,
        ]);

        $notification = DatabaseNotification::where('notifiable_id', $this->regularUser->id)->first();
        $this->assertEquals('Test Title', $notification->data['title']);
        $this->assertEquals('Test Message', $notification->data['message']);
        $this->assertEquals('warning', $notification->data['type']);
    }

    public function test_send_to_users_sends_notification_to_multiple_users(): void
    {
        $users = collect([
            User::factory()->create(['email' => 'user1@example.com']),
            User::factory()->create(['email' => 'user2@example.com']),
            User::factory()->create(['email' => 'user3@example.com']),
        ]);

        $this->notificationService->sendToUsers($users, 'Test Title', 'Test Message', 'success');

        foreach ($users as $user) {
            $this->assertDatabaseHas('notifications', [
                'notifiable_type' => User::class,
                'notifiable_id' => $user->id,
                'type' => TestNotification::class,
            ]);
        }
    }

    public function test_notify_order_created_sends_notifications(): void
    {
        $order = Order::factory()->create([
            'user_id' => $this->regularUser->id,
            'order_number' => 'ORD-001',
            'total' => 100.00,
            'status' => 'pending',
        ]);

        $this->notificationService->notifyOrderCreated($order);

        // Check customer notification
        $this->assertDatabaseHas('notifications', [
            'notifiable_type' => User::class,
            'notifiable_id' => $this->regularUser->id,
            'type' => OrderNotification::class,
        ]);

        $customerNotification = DatabaseNotification::where('notifiable_id', $this->regularUser->id)->first();
        $this->assertEquals('order', $customerNotification->data['type']);
        $this->assertEquals('created', $customerNotification->data['action']);
        $this->assertEquals($order->id, $customerNotification->data['order_id']);
        $this->assertEquals('ORD-001', $customerNotification->data['order_number']);
    }

    public function test_notify_order_updated_sends_notifications(): void
    {
        $order = Order::factory()->create([
            'user_id' => $this->regularUser->id,
            'order_number' => 'ORD-002',
            'total' => 150.00,
            'status' => 'processing',
        ]);

        $this->notificationService->notifyOrderUpdated($order);

        $this->assertDatabaseHas('notifications', [
            'notifiable_type' => User::class,
            'notifiable_id' => $this->regularUser->id,
            'type' => OrderNotification::class,
        ]);

        $notification = DatabaseNotification::where('notifiable_id', $this->regularUser->id)->first();
        $this->assertEquals('order', $notification->data['type']);
        $this->assertEquals('updated', $notification->data['action']);
        $this->assertEquals($order->id, $notification->data['order_id']);
    }

    public function test_notify_product_created_sends_notifications(): void
    {
        $product = Product::factory()->create([
            'name' => 'Test Product',
            'sku' => 'TEST-001',
            'price' => 99.99,
        ]);

        $this->notificationService->notifyProductCreated($product);

        $this->assertDatabaseHas('notifications', [
            'type' => ProductNotification::class,
        ]);

        $notification = DatabaseNotification::where('type', ProductNotification::class)->first();
        $this->assertEquals('product', $notification->data['type']);
        $this->assertEquals('created', $notification->data['action']);
        $this->assertEquals($product->id, $notification->data['product_id']);
        $this->assertEquals('Test Product', $notification->data['product_name']);
    }

    public function test_notify_product_updated_sends_notifications(): void
    {
        $product = Product::factory()->create([
            'name' => 'Updated Product',
            'sku' => 'UPD-001',
            'price' => 149.99,
        ]);

        $this->notificationService->notifyProductUpdated($product);

        $this->assertDatabaseHas('notifications', [
            'type' => ProductNotification::class,
        ]);

        $notification = DatabaseNotification::where('type', ProductNotification::class)->first();
        $this->assertEquals('product', $notification->data['type']);
        $this->assertEquals('updated', $notification->data['action']);
        $this->assertEquals($product->id, $notification->data['product_id']);
        $this->assertEquals('Updated Product', $notification->data['product_name']);
    }

    public function test_notify_user_registered_sends_notifications(): void
    {
        $newUser = User::factory()->create([
            'name' => 'New User',
            'email' => 'newuser@example.com',
        ]);

        $this->notificationService->notifyUserRegistered($newUser);

        $this->assertDatabaseHas('notifications', [
            'type' => UserNotification::class,
        ]);

        $notification = DatabaseNotification::where('type', UserNotification::class)->first();
        $this->assertEquals('user', $notification->data['type']);
        $this->assertEquals('registered', $notification->data['action']);
        $this->assertEquals($newUser->id, $notification->data['user_id']);
        $this->assertEquals('New User', $notification->data['user_name']);
        $this->assertEquals('newuser@example.com', $notification->data['user_email']);
    }

    public function test_notify_system_event_sends_notifications(): void
    {
        $systemData = [
            'maintenance_type' => 'scheduled',
            'duration' => '2 hours',
        ];

        $this->notificationService->notifySystemEvent('maintenance_started', $systemData);

        $this->assertDatabaseHas('notifications', [
            'type' => SystemNotification::class,
        ]);

        $notification = DatabaseNotification::where('type', SystemNotification::class)->first();
        $this->assertEquals('system', $notification->data['type']);
        $this->assertEquals('maintenance_started', $notification->data['action']);
        $this->assertEquals($systemData, $notification->data['data']);
    }

    public function test_get_unread_count_returns_correct_count(): void
    {
        // Create unread notifications
        DatabaseNotification::create([
            'id' => 'test-count-1',
            'type' => TestNotification::class,
            'notifiable_type' => User::class,
            'notifiable_id' => $this->regularUser->id,
            'data' => ['title' => 'Test 1', 'message' => 'Test message 1'],
        ]);

        DatabaseNotification::create([
            'id' => 'test-count-2',
            'type' => TestNotification::class,
            'notifiable_type' => User::class,
            'notifiable_id' => $this->regularUser->id,
            'data' => ['title' => 'Test 2', 'message' => 'Test message 2'],
        ]);

        // Create read notification
        DatabaseNotification::create([
            'id' => 'test-count-3',
            'type' => TestNotification::class,
            'notifiable_type' => User::class,
            'notifiable_id' => $this->regularUser->id,
            'data' => ['title' => 'Test 3', 'message' => 'Test message 3'],
            'read_at' => now(),
        ]);

        $count = $this->notificationService->getUnreadCount($this->regularUser);

        $this->assertEquals(2, $count);
    }

    public function test_mark_all_as_read_marks_all_notifications_as_read(): void
    {
        // Create unread notifications
        DatabaseNotification::create([
            'id' => 'test-mark-read-1',
            'type' => TestNotification::class,
            'notifiable_type' => User::class,
            'notifiable_id' => $this->regularUser->id,
            'data' => ['title' => 'Test 1', 'message' => 'Test message 1'],
        ]);

        DatabaseNotification::create([
            'id' => 'test-mark-read-2',
            'type' => TestNotification::class,
            'notifiable_type' => User::class,
            'notifiable_id' => $this->regularUser->id,
            'data' => ['title' => 'Test 2', 'message' => 'Test message 2'],
        ]);

        $this->assertEquals(2, $this->regularUser->unreadNotifications()->count());

        $this->notificationService->markAllAsRead($this->regularUser);

        $this->assertEquals(0, $this->regularUser->unreadNotifications()->count());
    }

    public function test_get_recent_notifications_returns_limited_notifications(): void
    {
        // Create notifications with different timestamps
        for ($i = 1; $i <= 7; $i++) {
            DatabaseNotification::create([
                'id' => "test-recent-{$i}",
                'type' => TestNotification::class,
                'notifiable_type' => User::class,
                'notifiable_id' => $this->regularUser->id,
                'data' => ['title' => "Test {$i}", 'message' => "Test message {$i}"],
                'created_at' => now()->subMinutes($i),
            ]);
        }

        $recentNotifications = $this->notificationService->getRecentNotifications($this->regularUser, 5);

        $this->assertInstanceOf(Collection::class, $recentNotifications);
        $this->assertCount(5, $recentNotifications);

        // Should be ordered by latest first
        $this->assertEquals('test-recent-1', $recentNotifications->first()->id);
    }

    public function test_delete_notification_deletes_specific_notification(): void
    {
        $notification = DatabaseNotification::create([
            'id' => 'test-delete',
            'type' => TestNotification::class,
            'notifiable_type' => User::class,
            'notifiable_id' => $this->regularUser->id,
            'data' => ['title' => 'Test', 'message' => 'Test message'],
        ]);

        $result = $this->notificationService->deleteNotification($this->regularUser, $notification->id);

        $this->assertTrue($result);
        $this->assertDatabaseMissing('notifications', [
            'id' => $notification->id,
        ]);
    }

    public function test_delete_notification_returns_false_for_non_existent_notification(): void
    {
        $result = $this->notificationService->deleteNotification($this->regularUser, 'non-existent-id');

        $this->assertFalse($result);
    }

    public function test_delete_all_notifications_deletes_all_user_notifications(): void
    {
        // Create multiple notifications
        DatabaseNotification::create([
            'id' => 'test-delete-all-1',
            'type' => TestNotification::class,
            'notifiable_type' => User::class,
            'notifiable_id' => $this->regularUser->id,
            'data' => ['title' => 'Test 1', 'message' => 'Test message 1'],
        ]);

        DatabaseNotification::create([
            'id' => 'test-delete-all-2',
            'type' => TestNotification::class,
            'notifiable_type' => User::class,
            'notifiable_id' => $this->regularUser->id,
            'data' => ['title' => 'Test 2', 'message' => 'Test message 2'],
        ]);

        $this->assertEquals(2, $this->regularUser->notifications()->count());

        $deletedCount = $this->notificationService->deleteAllNotifications($this->regularUser);

        $this->assertEquals(2, $deletedCount);
        $this->assertEquals(0, $this->regularUser->notifications()->count());
    }
}
