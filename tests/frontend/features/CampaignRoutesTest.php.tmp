<?php

declare(strict_types=1);

namespace Tests\Feature;

use App\Models\Campaign;
use App\Models\CampaignClick;
use App\Models\CampaignConversion;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * Campaign Routes Test
 *
 * Tests all campaign-related routes including frontend and API routes.
 */
class CampaignRoutesTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    protected User $user;

    protected Campaign $campaign;

    protected function setUp(): void
    {
        parent::setUp();

        $this->user = User::factory()->create();
        $this->campaign = Campaign::factory()->create();
    }

    /**
     * Test frontend campaign routes
     */
    public function test_frontend_campaign_routes(): void
    {
        // Test campaign index
        $response = $this->get('/campaigns');
        $response->assertStatus(200);

        // Test featured campaigns
        $response = $this->get('/campaigns/featured');
        $response->assertStatus(200);

        // Test campaign search
        $response = $this->get('/campaigns/search');
        $response->assertStatus(200);

        // Test campaign by type
        $response = $this->get('/campaigns/type/banner');
        $response->assertStatus(200);

        // Test campaign show
        $response = $this->get("/campaigns/{$this->campaign->id}");
        $response->assertStatus(200);

        // Test campaign click tracking
        $response = $this->post("/campaigns/{$this->campaign->id}/click");
        $response->assertStatus(200);

        // Test campaign conversion tracking
        $response = $this->post("/campaigns/{$this->campaign->id}/conversion");
        $response->assertStatus(200);
    }

    /**
     * Test campaign API routes
     */
    public function test_campaign_api_routes(): void
    {
        // Test campaign statistics
        $response = $this->get('/campaigns/api/statistics');
        $response->assertStatus(200);

        // Test campaign types
        $response = $this->get('/campaigns/api/types');
        $response->assertStatus(200);

        // Test campaign performance
        $response = $this->get('/campaigns/api/performance');
        $response->assertStatus(200);

        // Test campaign analytics
        $response = $this->get('/campaigns/api/analytics');
        $response->assertStatus(200);

        // Test campaign comparison
        $response = $this->get('/campaigns/api/compare');
        $response->assertStatus(200);

        // Test campaign recommendations
        $response = $this->get("/campaigns/{$this->campaign->id}/recommendations");
        $response->assertStatus(200);
    }

    /**
     * Test campaign conversion routes
     */
    public function test_campaign_conversion_routes(): void
    {
        $conversion = CampaignConversion::factory()->create();

        // Test conversion index
        $response = $this->get('/campaign-conversions');
        $response->assertStatus(200);

        // Test conversion create
        $response = $this->get('/campaign-conversions/create');
        $response->assertStatus(200);

        // Test conversion store
        $response = $this->post('/campaign-conversions', [
            'campaign_id' => $this->campaign->id,
            'user_id' => $this->user->id,
            'conversion_type' => 'purchase',
            'value' => 100.00,
        ]);
        $response->assertStatus(200);

        // Test conversion show
        $response = $this->get("/campaign-conversions/{$conversion->id}");
        $response->assertStatus(200);

        // Test conversion edit
        $response = $this->get("/campaign-conversions/{$conversion->id}/edit");
        $response->assertStatus(200);

        // Test conversion update
        $response = $this->put("/campaign-conversions/{$conversion->id}", [
            'conversion_type' => 'signup',
            'value' => 50.00,
        ]);
        $response->assertStatus(200);

        // Test conversion destroy
        $response = $this->delete("/campaign-conversions/{$conversion->id}");
        $response->assertStatus(200);

        // Test conversion analytics
        $response = $this->get('/campaign-conversions/analytics/data');
        $response->assertStatus(200);

        // Test conversion export
        $response = $this->get('/campaign-conversions/export/csv');
        $response->assertStatus(200);
    }

    /**
     * Test campaign click routes
     */
    public function test_campaign_click_routes(): void
    {
        $click = CampaignClick::factory()->create();

        // Test click index
        $response = $this->get('/campaign-clicks');
        $response->assertStatus(200);

        // Test click show
        $response = $this->get("/campaign-clicks/{$click->id}");
        $response->assertStatus(200);
    }

    /**
     * Test campaign routes with authentication
     */
    public function test_campaign_routes_with_authentication(): void
    {
        $this->actingAs($this->user);

        // Test campaign click tracking with user
        $response = $this->post("/campaigns/{$this->campaign->id}/click");
        $response->assertStatus(200);

        // Test campaign conversion tracking with user
        $response = $this->post("/campaigns/{$this->campaign->id}/conversion");
        $response->assertStatus(200);
    }

    /**
     * Test campaign routes with invalid data
     */
    public function test_campaign_routes_with_invalid_data(): void
    {
        // Test campaign show with invalid ID
        $response = $this->get('/campaigns/999999');
        $response->assertStatus(404);

        // Test campaign click with invalid ID
        $response = $this->post('/campaigns/999999/click');
        $response->assertStatus(404);

        // Test campaign conversion with invalid ID
        $response = $this->post('/campaigns/999999/conversion');
        $response->assertStatus(404);
    }

    /**
     * Test campaign routes with different HTTP methods
     */
    public function test_campaign_routes_http_methods(): void
    {
        // Test GET on POST-only routes
        $response = $this->get("/campaigns/{$this->campaign->id}/click");
        $response->assertStatus(405);

        $response = $this->get("/campaigns/{$this->campaign->id}/conversion");
        $response->assertStatus(405);

        // Test PUT on GET-only routes
        $response = $this->put('/campaigns');
        $response->assertStatus(405);

        $response = $this->put('/campaigns/featured');
        $response->assertStatus(405);

        // Test DELETE on GET-only routes
        $response = $this->delete('/campaigns');
        $response->assertStatus(405);

        $response = $this->delete('/campaigns/featured');
        $response->assertStatus(405);
    }

    /**
     * Test campaign routes with query parameters
     */
    public function test_campaign_routes_with_query_parameters(): void
    {
        // Test campaign search with query
        $response = $this->get('/campaigns/search?q=test');
        $response->assertStatus(200);

        // Test campaign by type with query
        $response = $this->get('/campaigns/type/banner?limit=10');
        $response->assertStatus(200);

        // Test campaign index with pagination
        $response = $this->get('/campaigns?page=1&per_page=10');
        $response->assertStatus(200);

        // Test featured campaigns with query
        $response = $this->get('/campaigns/featured?limit=5');
        $response->assertStatus(200);
    }

    /**
     * Test campaign API routes with query parameters
     */
    public function test_campaign_api_routes_with_query_parameters(): void
    {
        // Test campaign statistics with date range
        $response = $this->get('/campaigns/api/statistics?start_date=2024-01-01&end_date=2024-12-31');
        $response->assertStatus(200);

        // Test campaign performance with filters
        $response = $this->get('/campaigns/api/performance?type=banner&status=active');
        $response->assertStatus(200);

        // Test campaign analytics with metrics
        $response = $this->get('/campaigns/api/analytics?metrics=clicks,conversions,ctr');
        $response->assertStatus(200);

        // Test campaign comparison with campaigns
        $response = $this->get('/campaigns/api/compare?campaigns=1,2,3');
        $response->assertStatus(200);
    }

    /**
     * Test campaign conversion routes with query parameters
     */
    public function test_campaign_conversion_routes_with_query_parameters(): void
    {
        // Test conversion analytics with date range
        $response = $this->get('/campaign-conversions/analytics/data?start_date=2024-01-01&end_date=2024-12-31');
        $response->assertStatus(200);

        // Test conversion export with format
        $response = $this->get('/campaign-conversions/export/csv?format=csv&include_headers=true');
        $response->assertStatus(200);
    }

    /**
     * Test campaign routes with middleware
     */
    public function test_campaign_routes_with_middleware(): void
    {
        // Test campaign routes without authentication (should work)
        $response = $this->get('/campaigns');
        $response->assertStatus(200);

        // Test campaign click tracking without authentication (should work)
        $response = $this->post("/campaigns/{$this->campaign->id}/click");
        $response->assertStatus(200);

        // Test campaign conversion tracking without authentication (should work)
        $response = $this->post("/campaigns/{$this->campaign->id}/conversion");
        $response->assertStatus(200);
    }

    /**
     * Test campaign routes with different locales
     */
    public function test_campaign_routes_with_locales(): void
    {
        // Test campaign routes with Lithuanian locale
        $response = $this->get('/lt/campaigns');
        $response->assertStatus(200);

        // Test campaign routes with English locale
        $response = $this->get('/en/campaigns');
        $response->assertStatus(200);

        // Test campaign show with locale
        $response = $this->get("/lt/campaigns/{$this->campaign->id}");
        $response->assertStatus(200);

        $response = $this->get("/en/campaigns/{$this->campaign->id}");
        $response->assertStatus(200);
    }

    /**
     * Test campaign routes with rate limiting
     */
    public function test_campaign_routes_rate_limiting(): void
    {
        // Test multiple campaign clicks (should be rate limited)
        for ($i = 0; $i < 10; $i++) {
            $response = $this->post("/campaigns/{$this->campaign->id}/click");
            $response->assertStatus(200);
        }

        // Test multiple campaign conversions (should be rate limited)
        for ($i = 0; $i < 10; $i++) {
            $response = $this->post("/campaigns/{$this->campaign->id}/conversion");
            $response->assertStatus(200);
        }
    }

    /**
     * Test campaign routes with CSRF protection
     */
    public function test_campaign_routes_csrf_protection(): void
    {
        // Test campaign click without CSRF token
        $response = $this->post("/campaigns/{$this->campaign->id}/click", [], [
            'X-CSRF-TOKEN' => 'invalid-token',
        ]);
        $response->assertStatus(419);

        // Test campaign conversion without CSRF token
        $response = $this->post("/campaigns/{$this->campaign->id}/conversion", [], [
            'X-CSRF-TOKEN' => 'invalid-token',
        ]);
        $response->assertStatus(419);
    }
}
