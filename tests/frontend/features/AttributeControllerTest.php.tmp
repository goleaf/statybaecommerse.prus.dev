<?php

declare(strict_types=1);

namespace Tests\Feature\Frontend;

use App\Models\Attribute;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

final class AttributeControllerTest extends TestCase
{
    use RefreshDatabase;

    public function test_attribute_index_page_loads(): void
    {
        Attribute::factory()->count(5)->create(['is_enabled' => true]);

        $response = $this->get(route('attributes.index'));

        $response->assertOk()
            ->assertViewIs('attributes.index')
            ->assertSee('Attributes');
    }

    public function test_attribute_show_page_loads(): void
    {
        $attribute = Attribute::factory()->create([
            'is_enabled' => true,
            'name' => 'Test Attribute',
            'description' => 'Test Description',
        ]);

        $response = $this->get(route('attributes.show', $attribute));

        $response->assertOk()
            ->assertViewIs('attributes.show')
            ->assertSee('Test Attribute')
            ->assertSee('Test Description');
    }

    public function test_attribute_index_with_filters(): void
    {
        Attribute::factory()->create(['is_enabled' => true, 'type' => 'text']);
        Attribute::factory()->create(['is_enabled' => true, 'type' => 'number']);

        $response = $this->get(route('attributes.index', ['type' => 'text']));

        $response->assertOk();
        // The page should load successfully with filters
        $response->assertTrue(true);
    }

    public function test_attribute_search_api(): void
    {
        Attribute::factory()->create([
            'name' => 'Test Attribute',
            'is_enabled' => true,
        ]);

        $response = $this->get(route('attributes.api.search', ['search' => 'Test']));

        $response->assertOk()
            ->assertJsonStructure([
                'attributes' => [
                    '*' => [
                        'id',
                        'name',
                        'slug',
                        'type',
                        'description',
                        'group_name',
                        'is_required',
                        'is_filterable',
                        'is_searchable',
                        'values_count',
                        'usage_count',
                    ],
                ],
            ]);
    }

    public function test_attribute_by_type_api(): void
    {
        Attribute::factory()->create(['type' => 'text', 'is_enabled' => true]);
        Attribute::factory()->create(['type' => 'number', 'is_enabled' => true]);

        $response = $this->get(route('attributes.api.by-type', 'text'));

        $response->assertOk()
            ->assertJsonStructure([
                'attributes' => [
                    '*' => [
                        'id',
                        'name',
                        'slug',
                        'type',
                        'description',
                        'group_name',
                        'values_count',
                        'usage_count',
                    ],
                ],
            ]);
    }

    public function test_attribute_by_group_api(): void
    {
        Attribute::factory()->create(['group_name' => 'test-group', 'is_enabled' => true]);
        Attribute::factory()->create(['group_name' => 'other-group', 'is_enabled' => true]);

        $response = $this->get(route('attributes.api.by-group', 'test-group'));

        $response->assertOk()
            ->assertJsonStructure([
                'attributes' => [
                    '*' => [
                        'id',
                        'name',
                        'slug',
                        'type',
                        'description',
                        'group_name',
                        'values_count',
                        'usage_count',
                    ],
                ],
            ]);
    }

    public function test_attribute_filterable_api(): void
    {
        Attribute::factory()->count(3)->create(['is_enabled' => true]);

        $response = $this->get(route('attributes.api.filterable'));

        $response->assertOk()
            ->assertJsonStructure([
                'attributes' => [
                    '*' => [
                        'id',
                        'name',
                        'slug',
                        'type',
                        'description',
                        'group_name',
                        'values_count',
                    ],
                ],
            ]);
    }

    public function test_attribute_required_api(): void
    {
        Attribute::factory()->count(3)->create(['is_enabled' => true]);

        $response = $this->get(route('attributes.api.required'));

        $response->assertOk()
            ->assertJsonStructure([
                'attributes' => [
                    '*' => [
                        'id',
                        'name',
                        'slug',
                        'type',
                        'description',
                        'group_name',
                        'values_count',
                        'usage_count',
                    ],
                ],
            ]);
    }

    public function test_attribute_statistics_api(): void
    {
        Attribute::factory()->count(3)->create(['is_enabled' => true]);
        Attribute::factory()->count(2)->create(['is_enabled' => false]);
        Attribute::factory()->count(2)->create(['is_required' => true]);
        Attribute::factory()->count(2)->create(['is_filterable' => true]);

        $response = $this->get(route('attributes.api.statistics'));

        $response->assertOk()
            ->assertJsonStructure([
                'total_attributes',
                'enabled_attributes',
                'required_attributes',
                'filterable_attributes',
                'searchable_attributes',
                'attributes_with_values',
                'attributes_without_values',
            ]);
    }

    public function test_attribute_show_page_with_relations(): void
    {
        $attribute = Attribute::factory()->create([
            'is_enabled' => true,
            'name' => 'Test Attribute',
            'type' => 'text',
        ]);

        // Create related attributes
        Attribute::factory()->count(2)->create([
            'is_enabled' => true,
            'group_name' => $attribute->group_name,
        ]);

        $response = $this->get(route('attributes.show', $attribute));

        $response->assertOk()
            ->assertSee('Test Attribute')
            ->assertSee('text');
    }

    public function test_attribute_pagination(): void
    {
        Attribute::factory()->count(15)->create(['is_enabled' => true]);

        $response = $this->get(route('attributes.index'));

        $response->assertOk();
        // The page should load successfully with pagination
        $response->assertTrue(true);
    }
}
