<?php

declare(strict_types=1);

namespace Tests\Feature;

use App\Models\Country;
use App\Models\Region;
use App\Models\Translations\RegionTranslation;
use App\Models\Zone;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

final class RegionTest extends TestCase
{
    use RefreshDatabase;

    public function test_can_create_region(): void
    {
        $country = Country::factory()->create();
        $zone = Zone::factory()->create();

        $regionData = [
            'name' => 'Vilnius County',
            'slug' => 'vilnius-county',
            'code' => 'LT-VIL',
            'description' => 'Vilnius County in Lithuania',
            'is_enabled' => true,
            'is_default' => false,
            'country_id' => $country->id,
            'zone_id' => $zone->id,
            'level' => 2,
            'sort_order' => 1,
        ];

        $region = Region::create($regionData);

        $this->assertDatabaseHas('regions', [
            'name' => 'Vilnius County',
            'slug' => 'vilnius-county',
            'code' => 'LT-VIL',
            'country_id' => $country->id,
            'zone_id' => $zone->id,
            'level' => 2,
        ]);

        $this->assertEquals('Vilnius County', $region->name);
        $this->assertEquals('LT-VIL', $region->code);
        $this->assertTrue($region->is_enabled);
        $this->assertFalse($region->is_default);
    }

    public function test_region_has_country_relationship(): void
    {
        $country = Country::factory()->create();
        $region = Region::factory()->create(['country_id' => $country->id]);

        $this->assertInstanceOf(Country::class, $region->country);
        $this->assertEquals($country->id, $region->country->id);
    }

    public function test_region_has_zone_relationship(): void
    {
        $zone = Zone::factory()->create();
        $region = Region::factory()->create(['zone_id' => $zone->id]);

        $this->assertInstanceOf(Zone::class, $region->zone);
        $this->assertEquals($zone->id, $region->zone->id);
    }

    public function test_region_has_parent_child_relationships(): void
    {
        $parentRegion = Region::factory()->create(['level' => 1]);
        $childRegion = Region::factory()->create([
            'parent_id' => $parentRegion->id,
            'level' => 2,
        ]);

        $this->assertInstanceOf(Region::class, $childRegion->parent);
        $this->assertEquals($parentRegion->id, $childRegion->parent->id);

        $this->assertTrue($parentRegion->children->contains($childRegion));
    }

    public function test_region_can_have_translations(): void
    {
        $region = Region::factory()->create();

        $translation = RegionTranslation::create([
            'region_id' => $region->id,
            'locale' => 'en',
            'name' => 'Vilnius County',
            'description' => 'Vilnius County in Lithuania',
        ]);

        $this->assertDatabaseHas('region_translations', [
            'region_id' => $region->id,
            'locale' => 'en',
            'name' => 'Vilnius County',
        ]);

        $this->assertTrue($region->translations->contains($translation));
    }

    public function test_region_translated_name_accessor(): void
    {
        $region = Region::factory()->create(['name' => 'Vilnius County']);

        // Test with translation
        RegionTranslation::create([
            'region_id' => $region->id,
            'locale' => 'en',
            'name' => 'Vilnius County EN',
        ]);

        app()->setLocale('en');
        $this->assertEquals('Vilnius County EN', $region->translated_name);

        // Test fallback to original name
        app()->setLocale('lt');
        $this->assertEquals('Vilnius County', $region->translated_name);
    }

    public function test_region_full_path_accessor(): void
    {
        $rootRegion = Region::factory()->create(['name' => 'Lithuania', 'level' => 0]);
        $stateRegion = Region::factory()->create([
            'name' => 'Vilnius County',
            'parent_id' => $rootRegion->id,
            'level' => 1,
        ]);
        $districtRegion = Region::factory()->create([
            'name' => 'Vilnius District',
            'parent_id' => $stateRegion->id,
            'level' => 2,
        ]);

        $this->assertEquals('Lithuania > Vilnius County > Vilnius District', $districtRegion->full_path);
    }

    public function test_region_ancestors_accessor(): void
    {
        $rootRegion = Region::factory()->create(['name' => 'Lithuania', 'level' => 0]);
        $stateRegion = Region::factory()->create([
            'name' => 'Vilnius County',
            'parent_id' => $rootRegion->id,
            'level' => 1,
        ]);
        $districtRegion = Region::factory()->create([
            'name' => 'Vilnius District',
            'parent_id' => $stateRegion->id,
            'level' => 2,
        ]);

        $ancestors = $districtRegion->ancestors;
        $this->assertCount(2, $ancestors);
        $this->assertEquals($rootRegion->id, $ancestors->first()->id);
        $this->assertEquals($stateRegion->id, $ancestors->last()->id);
    }

    public function test_region_descendants_accessor(): void
    {
        $rootRegion = Region::factory()->create(['name' => 'Lithuania', 'level' => 0]);
        $stateRegion1 = Region::factory()->create([
            'name' => 'Vilnius County',
            'parent_id' => $rootRegion->id,
            'level' => 1,
        ]);
        $stateRegion2 = Region::factory()->create([
            'name' => 'Kaunas County',
            'parent_id' => $rootRegion->id,
            'level' => 1,
        ]);
        $districtRegion = Region::factory()->create([
            'name' => 'Vilnius District',
            'parent_id' => $stateRegion1->id,
            'level' => 2,
        ]);

        $descendants = $rootRegion->descendants;
        $this->assertCount(3, $descendants);
        $this->assertTrue($descendants->contains($stateRegion1));
        $this->assertTrue($descendants->contains($stateRegion2));
        $this->assertTrue($descendants->contains($districtRegion));
    }

    public function test_region_scopes(): void
    {
        Region::factory()->create(['is_enabled' => true, 'is_default' => false]);
        Region::factory()->create(['is_enabled' => false, 'is_default' => true]);
        Region::factory()->create(['is_enabled' => true, 'is_default' => true]);

        $this->assertEquals(2, Region::enabled()->count());
        $this->assertEquals(2, Region::default()->count());
        $this->assertEquals(1, Region::enabled()->default()->count());
    }

    public function test_region_by_level_scope(): void
    {
        Region::factory()->create(['level' => 0]);
        Region::factory()->create(['level' => 1]);
        Region::factory()->create(['level' => 2]);

        $this->assertEquals(1, Region::byLevel(0)->count());
        $this->assertEquals(1, Region::byLevel(1)->count());
        $this->assertEquals(1, Region::byLevel(2)->count());
    }

    public function test_region_by_country_scope(): void
    {
        $country1 = Country::factory()->create();
        $country2 = Country::factory()->create();

        Region::factory()->create(['country_id' => $country1->id]);
        Region::factory()->create(['country_id' => $country2->id]);

        $this->assertEquals(1, Region::byCountry($country1->id)->count());
        $this->assertEquals(1, Region::byCountry($country2->id)->count());
    }

    public function test_region_by_zone_scope(): void
    {
        $zone1 = Zone::factory()->create();
        $zone2 = Zone::factory()->create();

        Region::factory()->create(['zone_id' => $zone1->id]);
        Region::factory()->create(['zone_id' => $zone2->id]);

        $this->assertEquals(1, Region::byZone($zone1->id)->count());
        $this->assertEquals(1, Region::byZone($zone2->id)->count());
    }

    public function test_region_root_scope(): void
    {
        $rootRegion = Region::factory()->create(['parent_id' => null]);
        $childRegion = Region::factory()->create(['parent_id' => $rootRegion->id]);

        $this->assertEquals(1, Region::root()->count());
        $this->assertTrue(Region::root()->first()->is($rootRegion));
    }

    public function test_region_search_scope(): void
    {
        Region::factory()->create(['name' => 'Vilnius County', 'code' => 'LT-VIL']);
        Region::factory()->create(['name' => 'Kaunas County', 'code' => 'LT-KAU']);
        Region::factory()->create(['name' => 'Klaipeda County', 'code' => 'LT-KLA']);

        $this->assertEquals(1, Region::search('Vilnius')->count());
        $this->assertEquals(1, Region::search('LT-VIL')->count());
        $this->assertEquals(2, Region::search('County')->count());
    }

    public function test_region_ordered_scope(): void
    {
        Region::factory()->create(['name' => 'C Region', 'sort_order' => 3]);
        Region::factory()->create(['name' => 'A Region', 'sort_order' => 1]);
        Region::factory()->create(['name' => 'B Region', 'sort_order' => 2]);

        $orderedRegions = Region::ordered()->get();
        $this->assertEquals('A Region', $orderedRegions->first()->name);
        $this->assertEquals('C Region', $orderedRegions->last()->name);
    }

    public function test_region_is_root_accessor(): void
    {
        $rootRegion = Region::factory()->create(['parent_id' => null]);
        $childRegion = Region::factory()->create(['parent_id' => $rootRegion->id]);

        $this->assertTrue($rootRegion->is_root);
        $this->assertFalse($childRegion->is_root);
    }

    public function test_region_is_leaf_accessor(): void
    {
        $parentRegion = Region::factory()->create();
        $childRegion = Region::factory()->create(['parent_id' => $parentRegion->id]);

        $this->assertFalse($parentRegion->is_leaf);
        $this->assertTrue($childRegion->is_leaf);
    }

    public function test_region_depth_accessor(): void
    {
        $rootRegion = Region::factory()->create(['parent_id' => null, 'level' => 0]);
        $stateRegion = Region::factory()->create(['parent_id' => $rootRegion->id, 'level' => 1]);
        $districtRegion = Region::factory()->create(['parent_id' => $stateRegion->id, 'level' => 2]);

        $this->assertEquals(0, $rootRegion->depth);
        $this->assertEquals(1, $stateRegion->depth);
        $this->assertEquals(2, $districtRegion->depth);
    }

    public function test_region_breadcrumb_accessor(): void
    {
        $rootRegion = Region::factory()->create(['name' => 'Lithuania', 'level' => 0]);
        $stateRegion = Region::factory()->create([
            'name' => 'Vilnius County',
            'parent_id' => $rootRegion->id,
            'level' => 1,
        ]);
        $districtRegion = Region::factory()->create([
            'name' => 'Vilnius District',
            'parent_id' => $stateRegion->id,
            'level' => 2,
        ]);

        $breadcrumb = $districtRegion->breadcrumb;
        $this->assertCount(3, $breadcrumb);
        $this->assertEquals($rootRegion->id, $breadcrumb[0]->id);
        $this->assertEquals($stateRegion->id, $breadcrumb[1]->id);
        $this->assertEquals($districtRegion->id, $breadcrumb[2]->id);
    }

    public function test_region_breadcrumb_string_accessor(): void
    {
        $rootRegion = Region::factory()->create(['name' => 'Lithuania', 'level' => 0]);
        $stateRegion = Region::factory()->create([
            'name' => 'Vilnius County',
            'parent_id' => $rootRegion->id,
            'level' => 1,
        ]);
        $districtRegion = Region::factory()->create([
            'name' => 'Vilnius District',
            'parent_id' => $stateRegion->id,
            'level' => 2,
        ]);

        $this->assertEquals('Lithuania > Vilnius County > Vilnius District', $districtRegion->breadcrumb_string);
    }
}
