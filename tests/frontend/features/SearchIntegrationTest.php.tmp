<?php

declare(strict_types=1);

namespace Tests\Feature;

use App\Models\Brand;
use App\Models\Category;
use App\Models\Product;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

final class SearchIntegrationTest extends TestCase
{
    use RefreshDatabase;

    public function test_search_page_returns_products(): void
    {
        $product = Product::factory()->create([
            'name' => 'Test Product',
            'is_visible' => true,
            'published_at' => now()->subDay(),
        ]);

        $response = $this->get('/lt/search?q=Test');

        $response->assertStatus(200);
        $response->assertSee('Test Product');
    }

    public function test_search_page_handles_empty_query(): void
    {
        $response = $this->get('/lt/search');

        $response->assertStatus(200);
        $response->assertSee(__('frontend.search.results'));
    }

    public function test_search_page_handles_no_results(): void
    {
        $response = $this->get('/lt/search?q=nonexistent');

        $response->assertStatus(200);
        $response->assertSee(__('frontend.search.no_results'));
    }

    public function test_navigation_contains_live_search(): void
    {
        $response = $this->get('/lt');

        $response->assertStatus(200);
        $response->assertSee('search-module');
    }

    public function test_live_search_api_endpoint_works(): void
    {
        $product = Product::factory()->create([
            'name' => 'API Test Product',
            'is_visible' => true,
            'published_at' => now()->subDay(),
        ]);

        // Test the search service directly through the API
        $searchService = app(\App\Services\SearchService::class);
        $results = $searchService->search('API Test', 10);

        $this->assertNotEmpty($results);
        $this->assertCount(1, $results);
        $this->assertEquals('API Test Product', $results[0]['title']);
    }

    public function test_search_works_with_multiple_content_types(): void
    {
        // Create a product
        $product = Product::factory()->create([
            'name' => 'Multi Test Product',
            'is_visible' => true,
            'published_at' => now()->subDay(),
        ]);

        // Create a category
        $category = Category::factory()->create([
            'name' => 'Multi Test Category',
            'is_visible' => true,
        ]);
        $category->products()->attach($product);

        // Create a brand
        $brand = Brand::factory()->create([
            'name' => 'Multi Test Brand',
            'is_enabled' => true,
        ]);
        Product::factory()->create([
            'name' => 'Brand Product',
            'brand_id' => $brand->id,
            'is_visible' => true,
            'published_at' => now()->subDay(),
        ]);

        $searchService = app(\App\Services\SearchService::class);
        $results = $searchService->search('Multi Test', 10);

        $this->assertNotEmpty($results);
        $this->assertGreaterThanOrEqual(3, count($results));

        $types = collect($results)->pluck('type')->unique()->toArray();
        $this->assertContains('product', $types);
        $this->assertContains('category', $types);
        $this->assertContains('brand', $types);
    }

    public function test_search_respects_visibility_settings(): void
    {
        // Create visible product
        $visibleProduct = Product::factory()->create([
            'name' => 'Visible Test Product',
            'is_visible' => true,
            'published_at' => now()->subDay(),
        ]);

        // Create invisible product
        Product::factory()->create([
            'name' => 'Invisible Test Product',
            'is_visible' => false,
            'published_at' => now()->subDay(),
        ]);

        $searchService = app(\App\Services\SearchService::class);
        $results = $searchService->search('Test Product', 10);

        $this->assertNotEmpty($results);
        $this->assertCount(1, $results);
        $this->assertEquals('Visible Test Product', $results[0]['title']);
    }

    public function test_search_respects_publication_dates(): void
    {
        // Create published product
        $publishedProduct = Product::factory()->create([
            'name' => 'Published Test Product',
            'is_visible' => true,
            'published_at' => now()->subDay(),
        ]);

        // Create future product
        Product::factory()->create([
            'name' => 'Future Test Product',
            'is_visible' => true,
            'published_at' => now()->addDay(),
        ]);

        $searchService = app(\App\Services\SearchService::class);
        $results = $searchService->search('Test Product', 10);

        $this->assertNotEmpty($results);
        $this->assertCount(1, $results);
        $this->assertEquals('Published Test Product', $results[0]['title']);
    }

    public function test_search_handles_special_characters(): void
    {
        $product = Product::factory()->create([
            'name' => 'Product with % & _ special chars',
            'is_visible' => true,
            'published_at' => now()->subDay(),
        ]);

        $searchService = app(\App\Services\SearchService::class);
        $results = $searchService->search('special', 10);

        $this->assertNotEmpty($results);
        $this->assertCount(1, $results);
        $this->assertEquals('Product with % & _ special chars', $results[0]['title']);
    }

    public function test_search_caching_improves_performance(): void
    {
        $product = Product::factory()->create([
            'name' => 'Performance Test Product',
            'is_visible' => true,
            'published_at' => now()->subDay(),
        ]);

        $searchService = app(\App\Services\SearchService::class);

        // First search (should cache)
        $start1 = microtime(true);
        $results1 = $searchService->search('Performance', 10);
        $time1 = microtime(true) - $start1;

        // Second search (should use cache)
        $start2 = microtime(true);
        $results2 = $searchService->search('Performance', 10);
        $time2 = microtime(true) - $start2;

        $this->assertEquals($results1, $results2);
        $this->assertNotEmpty($results1);

        // Cache should make second search faster (though this might be flaky in tests)
        // We'll just verify both searches return the same results
    }

    public function test_search_works_with_translations(): void
    {
        $product = Product::factory()->create([
            'name' => 'English Test Product',
            'is_visible' => true,
            'published_at' => now()->subDay(),
        ]);

        // Set locale to Lithuanian
        app()->setLocale('lt');

        $searchService = app(\App\Services\SearchService::class);
        $results = $searchService->search('English', 10);

        $this->assertNotEmpty($results);
        $this->assertCount(1, $results);
        $this->assertEquals('English Test Product', $results[0]['title']);
    }

    public function test_search_returns_proper_urls(): void
    {
        $product = Product::factory()->create([
            'name' => 'URL Test Product',
            'slug' => 'url-test-product',
            'is_visible' => true,
            'published_at' => now()->subDay(),
        ]);

        $searchService = app(\App\Services\SearchService::class);
        $results = $searchService->search('URL', 10);

        $this->assertNotEmpty($results);
        $productResult = collect($results)->firstWhere('type', 'product');
        $this->assertNotNull($productResult);
        $this->assertStringContainsString('url-test-product', $productResult['url']);
    }

    public function test_search_handles_large_result_sets(): void
    {
        // Create many products
        for ($i = 1; $i <= 50; $i++) {
            Product::factory()->create([
                'name' => "Large Test Product {$i}",
                'is_visible' => true,
                'published_at' => now()->subDay(),
            ]);
        }

        $searchService = app(\App\Services\SearchService::class);
        $results = $searchService->search('Large Test', 10);

        $this->assertNotEmpty($results);
        $this->assertLessThanOrEqual(10, count($results));
    }

    public function test_search_works_with_brand_relationships(): void
    {
        $brand = Brand::factory()->create([
            'name' => 'Relationship Test Brand',
            'is_enabled' => true,
        ]);

        $product = Product::factory()->create([
            'name' => 'Branded Test Product',
            'brand_id' => $brand->id,
            'is_visible' => true,
            'published_at' => now()->subDay(),
        ]);

        $searchService = app(\App\Services\SearchService::class);
        $results = $searchService->search('Branded', 10);

        $this->assertNotEmpty($results);
        $productResult = collect($results)->firstWhere('type', 'product');
        $this->assertNotNull($productResult);
        $this->assertEquals('Relationship Test Brand', $productResult['subtitle']);
    }

    public function test_search_works_with_category_relationships(): void
    {
        $category = Category::factory()->create([
            'name' => 'Relationship Test Category',
            'is_visible' => true,
        ]);

        $product = Product::factory()->create([
            'name' => 'Categorized Test Product',
            'is_visible' => true,
            'published_at' => now()->subDay(),
        ]);
        $category->products()->attach($product);

        $searchService = app(\App\Services\SearchService::class);
        $results = $searchService->search('Categorized', 10);

        $this->assertNotEmpty($results);
        $productResult = collect($results)->firstWhere('type', 'product');
        $this->assertNotNull($productResult);
    }
}
