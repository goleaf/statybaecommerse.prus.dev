<?php

declare(strict_types=1);

namespace Tests\Feature;

use App\Models\RecommendationAnalytics;
use App\Models\RecommendationBlock;
use App\Models\ReferralCampaign;
use App\Models\ReferralCode;
use App\Models\Scopes\ActiveScope;
use App\Models\Scopes\DateRangeScope;
use App\Models\Scopes\UserOwnedScope;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

final class ReferralRecommendationGlobalScopesTest extends TestCase
{
    use RefreshDatabase;

    public function test_referral_campaign_model_has_multiple_scopes(): void
    {
        // Create test referral campaigns
        $activeCampaign = ReferralCampaign::factory()->create([
            'is_active' => true,
            'start_date' => now()->subDay(),
            'end_date' => now()->addDay(),
        ]);

        $inactiveCampaign = ReferralCampaign::factory()->create([
            'is_active' => false,
            'start_date' => now()->subDay(),
            'end_date' => now()->addDay(),
        ]);

        $expiredCampaign = ReferralCampaign::factory()->create([
            'is_active' => true,
            'start_date' => now()->subDays(2),
            'end_date' => now()->subDay(),
        ]);

        // Test that only active campaigns within date range are returned
        $campaigns = ReferralCampaign::all();

        $this->assertCount(1, $campaigns);
        $this->assertEquals($activeCampaign->id, $campaigns->first()->id);

        // Test bypassing scopes
        $allCampaigns = ReferralCampaign::withoutGlobalScopes()->get();
        $this->assertCount(3, $allCampaigns);
    }

    public function test_referral_code_model_has_multiple_scopes(): void
    {
        $user = User::factory()->create();
        $this->actingAs($user);

        // Create test referral codes
        $userActiveCode = ReferralCode::factory()->create([
            'user_id' => $user->id,
            'is_active' => true,
            'expires_at' => now()->addDay(),
        ]);

        $userInactiveCode = ReferralCode::factory()->create([
            'user_id' => $user->id,
            'is_active' => false,
            'expires_at' => now()->addDay(),
        ]);

        $otherUserCode = ReferralCode::factory()->create([
            'user_id' => User::factory()->create()->id,
            'is_active' => true,
            'expires_at' => now()->addDay(),
        ]);

        $expiredCode = ReferralCode::factory()->create([
            'user_id' => $user->id,
            'is_active' => true,
            'expires_at' => now()->subDay(),
        ]);

        // Test that only current user's active codes within date range are returned
        $codes = ReferralCode::all();

        $this->assertCount(1, $codes);
        $this->assertEquals($userActiveCode->id, $codes->first()->id);

        // Test bypassing scopes
        $allCodes = ReferralCode::withoutGlobalScopes()->get();
        $this->assertCount(4, $allCodes);
    }

    public function test_recommendation_analytics_model_has_user_owned_scope(): void
    {
        $user = User::factory()->create();
        $this->actingAs($user);

        // Create test recommendation analytics
        $userAnalytics = RecommendationAnalytics::factory()->create([
            'user_id' => $user->id,
        ]);

        $otherUserAnalytics = RecommendationAnalytics::factory()->create([
            'user_id' => User::factory()->create()->id,
        ]);

        // Test that only current user's analytics are returned
        $analytics = RecommendationAnalytics::all();

        $this->assertCount(1, $analytics);
        $this->assertEquals($userAnalytics->id, $analytics->first()->id);

        // Test bypassing scopes
        $allAnalytics = RecommendationAnalytics::withoutGlobalScopes()->get();
        $this->assertCount(2, $allAnalytics);
    }

    public function test_recommendation_block_model_has_active_scope(): void
    {
        // Create test recommendation blocks
        $activeBlock = RecommendationBlock::factory()->create(['is_active' => true]);
        $inactiveBlock = RecommendationBlock::factory()->create(['is_active' => false]);

        // Test that only active blocks are returned
        $blocks = RecommendationBlock::all();

        $this->assertCount(1, $blocks);
        $this->assertEquals($activeBlock->id, $blocks->first()->id);

        // Test bypassing scopes
        $allBlocks = RecommendationBlock::withoutGlobalScopes()->get();
        $this->assertCount(2, $allBlocks);
    }

    public function test_global_scopes_can_be_combined_with_local_scopes(): void
    {
        // Create test data
        $activeBlock = RecommendationBlock::factory()->create(['is_active' => true]);
        $inactiveBlock = RecommendationBlock::factory()->create(['is_active' => false]);

        // Test that global scopes work with local scopes
        $blocks = RecommendationBlock::where('name', 'like', '%test%')->get();
        $this->assertCount(0, $blocks); // No blocks with 'test' in name

        // Test bypassing global scopes with local scopes
        $allBlocks = RecommendationBlock::withoutGlobalScopes()->where('is_active', true)->get();
        $this->assertCount(1, $allBlocks);
        $this->assertEquals($activeBlock->id, $allBlocks->first()->id);
    }

    public function test_global_scopes_are_applied_to_relationships(): void
    {
        // Create test data with relationships
        $activeCampaign = ReferralCampaign::factory()->create([
            'is_active' => true,
            'start_date' => now()->subDay(),
            'end_date' => now()->addDay(),
        ]);

        $inactiveCampaign = ReferralCampaign::factory()->create([
            'is_active' => false,
            'start_date' => now()->subDay(),
            'end_date' => now()->addDay(),
        ]);

        // Test that relationships also apply global scopes
        $campaigns = ReferralCampaign::all();
        $this->assertCount(1, $campaigns);
        $this->assertEquals($activeCampaign->id, $campaigns->first()->id);
    }

    public function test_referral_campaign_scope_combinations(): void
    {
        // Test different combinations of referral campaign scopes
        $campaign1 = ReferralCampaign::factory()->create([
            'is_active' => true,
            'start_date' => now()->subDay(),
            'end_date' => now()->addDay(),
        ]);

        $campaign2 = ReferralCampaign::factory()->create([
            'is_active' => false,
            'start_date' => now()->subDay(),
            'end_date' => now()->addDay(),
        ]);

        $campaign3 = ReferralCampaign::factory()->create([
            'is_active' => true,
            'start_date' => now()->subDays(2),
            'end_date' => now()->subDay(),
        ]);

        // Test bypassing specific scopes
        $activeCampaigns = ReferralCampaign::withoutGlobalScope(DateRangeScope::class)->get();
        $this->assertCount(2, $activeCampaigns); // Only active campaigns

        $dateRangeCampaigns = ReferralCampaign::withoutGlobalScope(ActiveScope::class)->get();
        $this->assertCount(2, $dateRangeCampaigns); // Only campaigns within date range
    }

    public function test_referral_code_scope_combinations(): void
    {
        $user = User::factory()->create();
        $this->actingAs($user);

        // Test different combinations of referral code scopes
        $code1 = ReferralCode::factory()->create([
            'user_id' => $user->id,
            'is_active' => true,
            'expires_at' => now()->addDay(),
        ]);

        $code2 = ReferralCode::factory()->create([
            'user_id' => $user->id,
            'is_active' => false,
            'expires_at' => now()->addDay(),
        ]);

        $code3 = ReferralCode::factory()->create([
            'user_id' => User::factory()->create()->id,
            'is_active' => true,
            'expires_at' => now()->addDay(),
        ]);

        $code4 = ReferralCode::factory()->create([
            'user_id' => $user->id,
            'is_active' => true,
            'expires_at' => now()->subDay(),
        ]);

        // Test bypassing specific scopes
        $userCodes = ReferralCode::withoutGlobalScope(ActiveScope::class)->withoutGlobalScope(DateRangeScope::class)->get();
        $this->assertCount(2, $userCodes); // Only user's codes

        $activeCodes = ReferralCode::withoutGlobalScope(UserOwnedScope::class)->withoutGlobalScope(DateRangeScope::class)->get();
        $this->assertCount(2, $activeCodes); // Only active codes

        $dateRangeCodes = ReferralCode::withoutGlobalScope(UserOwnedScope::class)->withoutGlobalScope(ActiveScope::class)->get();
        $this->assertCount(2, $dateRangeCodes); // Only codes within date range
    }

    public function test_recommendation_analytics_scope_combinations(): void
    {
        $user = User::factory()->create();
        $this->actingAs($user);

        // Test different combinations of recommendation analytics scopes
        $analytics1 = RecommendationAnalytics::factory()->create([
            'user_id' => $user->id,
        ]);

        $analytics2 = RecommendationAnalytics::factory()->create([
            'user_id' => User::factory()->create()->id,
        ]);

        // Test bypassing specific scopes
        $allAnalytics = RecommendationAnalytics::withoutGlobalScope(UserOwnedScope::class)->get();
        $this->assertCount(2, $allAnalytics); // All analytics regardless of user
    }

    public function test_recommendation_block_scope_combinations(): void
    {
        // Test different combinations of recommendation block scopes
        $block1 = RecommendationBlock::factory()->create(['is_active' => true]);
        $block2 = RecommendationBlock::factory()->create(['is_active' => false]);

        // Test bypassing specific scopes
        $allBlocks = RecommendationBlock::withoutGlobalScope(ActiveScope::class)->get();
        $this->assertCount(2, $allBlocks); // All blocks regardless of active status
    }

    public function test_multiple_scope_filtering_with_referral_models(): void
    {
        $user = User::factory()->create();
        $this->actingAs($user);

        // Test multiple scope filtering with referral campaigns
        $campaign1 = ReferralCampaign::factory()->create([
            'is_active' => true,
            'start_date' => now()->subDay(),
            'end_date' => now()->addDay(),
        ]);

        $campaign2 = ReferralCampaign::factory()->create([
            'is_active' => false,
            'start_date' => now()->subDay(),
            'end_date' => now()->addDay(),
        ]);

        $campaign3 = ReferralCampaign::factory()->create([
            'is_active' => true,
            'start_date' => now()->subDays(2),
            'end_date' => now()->subDay(),
        ]);

        // Test that only active campaigns within date range are returned
        $campaigns = ReferralCampaign::all();
        $this->assertCount(1, $campaigns);
        $this->assertEquals($campaign1->id, $campaigns->first()->id);

        // Test bypassing all scopes
        $allCampaigns = ReferralCampaign::withoutGlobalScopes()->get();
        $this->assertCount(3, $allCampaigns);

        // Test bypassing only active scope
        $activeCampaigns = ReferralCampaign::withoutGlobalScope(ActiveScope::class)->get();
        $this->assertCount(2, $activeCampaigns); // Only campaigns within date range

        // Test bypassing only date range scope
        $dateRangeCampaigns = ReferralCampaign::withoutGlobalScope(DateRangeScope::class)->get();
        $this->assertCount(2, $dateRangeCampaigns); // Only active campaigns
    }

    public function test_user_owned_scope_with_referral_models(): void
    {
        $user1 = User::factory()->create();
        $user2 = User::factory()->create();

        // Create referral codes for different users
        $user1Code = ReferralCode::factory()->create([
            'user_id' => $user1->id,
            'is_active' => true,
            'expires_at' => now()->addDay(),
        ]);

        $user2Code = ReferralCode::factory()->create([
            'user_id' => $user2->id,
            'is_active' => true,
            'expires_at' => now()->addDay(),
        ]);

        // Test as user1
        $this->actingAs($user1);
        $user1Codes = ReferralCode::all();
        $this->assertCount(1, $user1Codes);
        $this->assertEquals($user1Code->id, $user1Codes->first()->id);

        // Test as user2
        $this->actingAs($user2);
        $user2Codes = ReferralCode::all();
        $this->assertCount(1, $user2Codes);
        $this->assertEquals($user2Code->id, $user2Codes->first()->id);

        // Test bypassing user scope
        $allCodes = ReferralCode::withoutGlobalScope(UserOwnedScope::class)->get();
        $this->assertCount(2, $allCodes);
    }

    public function test_date_range_scope_with_referral_models(): void
    {
        // Test date range scope with different date scenarios
        $campaign1 = ReferralCampaign::factory()->create([
            'is_active' => true,
            'start_date' => now()->subDay(),
            'end_date' => now()->addDay(),
        ]);

        $campaign2 = ReferralCampaign::factory()->create([
            'is_active' => true,
            'start_date' => now()->addDay(),
            'end_date' => now()->addDays(2),
        ]);

        $campaign3 = ReferralCampaign::factory()->create([
            'is_active' => true,
            'start_date' => now()->subDays(2),
            'end_date' => now()->subDay(),
        ]);

        // Test that only campaigns within date range are returned
        $campaigns = ReferralCampaign::all();
        $this->assertCount(1, $campaigns);
        $this->assertEquals($campaign1->id, $campaigns->first()->id);

        // Test bypassing date range scope
        $allCampaigns = ReferralCampaign::withoutGlobalScope(DateRangeScope::class)->get();
        $this->assertCount(3, $allCampaigns); // All active campaigns
    }
}
