<?php

declare(strict_types=1);

namespace Tests\Feature;

use App\Http\Controllers\Api\ProductController;
use App\Http\Controllers\CollectionController;
use App\Services\TimeoutService;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Http\Request;
use Illuminate\Support\LazyCollection;
use Tests\TestCase;

final class ComprehensiveTimeoutTest extends TestCase
{
    use RefreshDatabase;

    public function test_timeout_service_basic_functionality(): void
    {
        $collection = LazyCollection::make(range(1, 100));
        $timeoutCollection = TimeoutService::withTimeout($collection, 1); // 1 second timeout

        $processedCount = 0;
        foreach ($timeoutCollection as $item) {
            $processedCount++;
            usleep(10000); // 10ms delay to simulate work
        }

        $this->assertLessThan(100, $processedCount); // Should not process all items
        $this->assertGreaterThan(0, $processedCount); // Should process some items
    }

    public function test_timeout_service_for_search(): void
    {
        $collection = LazyCollection::make(range(1, 50));
        $timeoutCollection = TimeoutService::forSearch($collection, 1); // 1 second timeout

        $processedCount = 0;
        foreach ($timeoutCollection as $item) {
            $processedCount++;
            usleep(20000); // 20ms delay
        }

        $this->assertLessThan(50, $processedCount);
        $this->assertGreaterThan(0, $processedCount);
    }

    public function test_timeout_service_for_import(): void
    {
        $collection = LazyCollection::make(range(1, 1000));
        $timeoutCollection = TimeoutService::forImport($collection, 1); // 1 minute timeout

        $processedCount = 0;
        foreach ($timeoutCollection as $item) {
            $processedCount++;
            usleep(1000); // 1ms delay
        }

        $this->assertEquals(1000, $processedCount); // Should process all items within 1 minute
    }

    public function test_timeout_service_for_recommendations(): void
    {
        $collection = LazyCollection::make(range(1, 100));
        $timeoutCollection = TimeoutService::forRecommendations($collection, 1); // 1 second timeout

        $processedCount = 0;
        foreach ($timeoutCollection as $item) {
            $processedCount++;
            usleep(15000); // 15ms delay
        }

        $this->assertLessThan(100, $processedCount);
        $this->assertGreaterThan(0, $processedCount);
    }

    public function test_timeout_service_for_background_job(): void
    {
        $collection = LazyCollection::make(range(1, 500));
        $timeoutCollection = TimeoutService::forBackgroundJob($collection, 1); // 1 minute timeout

        $processedCount = 0;
        foreach ($timeoutCollection as $item) {
            $processedCount++;
            usleep(2000); // 2ms delay
        }

        $this->assertEquals(500, $processedCount); // Should process all items within 1 minute
    }

    public function test_timeout_service_remaining_time(): void
    {
        $timeout = now()->addSeconds(5);
        $remainingTime = TimeoutService::getRemainingTime($timeout);

        $this->assertGreaterThan(0, $remainingTime);
        $this->assertLessThanOrEqual(5, $remainingTime);
    }

    public function test_timeout_service_is_timeout_reached(): void
    {
        $futureTimeout = now()->addSeconds(10);
        $pastTimeout = now()->subSeconds(10);

        $this->assertFalse(TimeoutService::isTimeoutReached($futureTimeout));
        $this->assertTrue(TimeoutService::isTimeoutReached($pastTimeout));
    }

    public function test_lazy_collection_timeout_with_short_timeout(): void
    {
        $collection = LazyCollection::make(range(1, 1000));
        $timeout = now()->addMilliseconds(50); // Very short timeout

        $processedCount = 0;
        foreach ($collection->takeUntilTimeout($timeout) as $item) {
            $processedCount++;
            usleep(1000); // 1ms delay
        }

        $this->assertLessThan(1000, $processedCount);
        // Note: With very short timeout, it's possible no items are processed
        $this->assertGreaterThanOrEqual(0, $processedCount);
    }

    public function test_lazy_collection_timeout_with_long_timeout(): void
    {
        $collection = LazyCollection::make(range(1, 100));
        $timeout = now()->addSeconds(10); // Long timeout

        $processedCount = 0;
        foreach ($collection->takeUntilTimeout($timeout) as $item) {
            $processedCount++;
            usleep(1000); // 1ms delay
        }

        $this->assertEquals(100, $processedCount); // Should process all items
    }

    public function test_collection_controller_new_arrivals_timeout(): void
    {
        // Test that the newArrivals method uses timeout protection
        $controller = new CollectionController;
        $request = new Request(['days' => 30, 'columns' => 4]);

        // This should not throw an exception due to timeout protection
        $response = $controller->newArrivals($request);

        $this->assertInstanceOf(\Illuminate\Http\JsonResponse::class, $response);
    }

    public function test_product_controller_search_timeout(): void
    {
        // Test that the search method uses timeout protection
        $controller = new ProductController;
        $request = new Request(['q' => 'test', 'limit' => 10]);

        // This should not throw an exception due to timeout protection
        $response = $controller->search($request);

        $this->assertInstanceOf(\Illuminate\Http\JsonResponse::class, $response);
    }
}
