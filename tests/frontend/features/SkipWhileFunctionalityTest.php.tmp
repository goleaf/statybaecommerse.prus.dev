<?php

declare(strict_types=1);

namespace Tests\Feature;

use App\Models\Collection;
use App\Models\Product;
use App\Services\AutocompleteService;
use App\Services\DataFilteringService;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

final class SkipWhileFunctionalityTest extends TestCase
{
    use RefreshDatabase;

    private DataFilteringService $dataFilteringService;

    private AutocompleteService $autocompleteService;

    protected function setUp(): void
    {
        parent::setUp();
        $this->dataFilteringService = new DataFilteringService;
        $this->autocompleteService = new AutocompleteService;
    }

    public function test_skip_while_filters_low_quality_products(): void
    {
        // Create test products with different quality levels
        $products = collect([
            (object) ['id' => 1, 'name' => '', 'is_visible' => true, 'price' => 100, 'slug' => 'product-1', 'stock_quantity' => 5, 'is_published' => true],
            (object) ['id' => 2, 'name' => 'Valid Product', 'is_visible' => false, 'price' => 200, 'slug' => 'product-2', 'stock_quantity' => 10, 'is_published' => true],
            (object) ['id' => 3, 'name' => 'Another Valid', 'is_visible' => true, 'price' => 0, 'slug' => 'product-3', 'stock_quantity' => 15, 'is_published' => true],
            (object) ['id' => 4, 'name' => 'Good Product', 'is_visible' => true, 'price' => 300, 'slug' => 'product-4', 'stock_quantity' => 20, 'is_published' => true],
        ]);

        $filteredProducts = $this->dataFilteringService->filterQualityProducts($products);

        // Should skip first 3 products and only return the last one
        $this->assertCount(1, $filteredProducts);
        $this->assertEquals(4, $filteredProducts->first()->id);
    }

    public function test_skip_while_filters_empty_collections(): void
    {
        $collections = collect([
            (object) ['id' => 1, 'name' => '', 'is_visible' => true, 'slug' => 'collection-1', 'products_count' => 5],
            (object) ['id' => 2, 'name' => 'Valid Collection', 'is_visible' => false, 'slug' => 'collection-2', 'products_count' => 10],
            (object) ['id' => 3, 'name' => 'Another Valid', 'is_visible' => true, 'slug' => '', 'products_count' => 15],
            (object) ['id' => 4, 'name' => 'Good Collection', 'is_visible' => true, 'slug' => 'collection-4', 'products_count' => 0],
            (object) ['id' => 5, 'name' => 'Perfect Collection', 'is_visible' => true, 'slug' => 'collection-5', 'products_count' => 20],
        ]);

        $filteredCollections = $this->dataFilteringService->filterValidCollections($collections);

        // Should skip first 4 collections and only return the last one
        $this->assertCount(1, $filteredCollections);
        $this->assertEquals(5, $filteredCollections->first()->id);
    }

    public function test_skip_while_filters_low_relevance_results(): void
    {
        $results = collect([
            ['id' => 1, 'title' => 'Result 1', 'relevance_score' => 0.2],
            ['id' => 2, 'title' => 'Result 2', 'relevance_score' => 0.4],
            ['id' => 3, 'title' => 'Result 3', 'relevance_score' => 0.6],
            ['id' => 4, 'title' => 'Result 4', 'relevance_score' => 0.8],
        ]);

        $filteredResults = $this->dataFilteringService->filterRelevantResults($results, 0.5);

        // Should skip first 2 results and return last 2
        $this->assertCount(2, $filteredResults);
        $this->assertEquals(3, $filteredResults->first()['id']);
        $this->assertEquals(4, $filteredResults->last()['id']);
    }

    public function test_skip_while_filters_user_interactions(): void
    {
        $recommendations = collect([
            (object) ['id' => 1, 'name' => 'Product 1'],
            (object) ['id' => 2, 'name' => 'Product 2'],
            (object) ['id' => 3, 'name' => 'Product 3'],
            (object) ['id' => 4, 'name' => 'Product 4'],
        ]);

        $userInteractions = [1, 2]; // User has already interacted with products 1 and 2

        $filteredRecommendations = $this->dataFilteringService->filterNewRecommendations($recommendations, $userInteractions);

        // Should skip first 2 recommendations and return last 2
        $this->assertCount(2, $filteredRecommendations);
        $this->assertEquals(3, $filteredRecommendations->first()->id);
        $this->assertEquals(4, $filteredRecommendations->last()->id);
    }

    public function test_skip_while_filters_by_price_range(): void
    {
        $products = collect([
            (object) ['id' => 1, 'name' => 'Cheap Product', 'price' => 5],
            (object) ['id' => 2, 'name' => 'Mid Product', 'price' => 50],
            (object) ['id' => 3, 'name' => 'Expensive Product', 'price' => 150],
            (object) ['id' => 4, 'name' => 'Very Expensive', 'price' => 500],
        ]);

        $filteredProducts = $this->dataFilteringService->filterProductsByPriceRange($products, 10, 200);

        // Should skip first and last products, return middle 2
        $this->assertCount(2, $filteredProducts);
        $this->assertEquals(2, $filteredProducts->first()->id);
        $this->assertEquals(3, $filteredProducts->last()->id);
    }

    public function test_skip_while_filters_out_of_stock_products(): void
    {
        $products = collect([
            (object) ['id' => 1, 'name' => 'Out of Stock', 'stock_quantity' => 0],
            (object) ['id' => 2, 'name' => 'Low Stock', 'stock_quantity' => 1],
            (object) ['id' => 3, 'name' => 'Good Stock', 'stock_quantity' => 10],
            (object) ['id' => 4, 'name' => 'High Stock', 'stock_quantity' => 50],
        ]);

        $filteredProducts = $this->dataFilteringService->filterInStockProducts($products);

        // Should skip first product, return last 3
        $this->assertCount(3, $filteredProducts);
        $this->assertEquals(2, $filteredProducts->first()->id);
    }

    public function test_skip_while_filters_unpublished_products(): void
    {
        $products = collect([
            (object) ['id' => 1, 'name' => 'Unpublished', 'is_published' => false, 'published_at' => null],
            (object) ['id' => 2, 'name' => 'Published', 'is_published' => true, 'published_at' => now()],
            (object) ['id' => 3, 'name' => 'Another Published', 'is_published' => true, 'published_at' => now()->subDay()],
        ]);

        $filteredProducts = $this->dataFilteringService->filterPublishedProducts($products);

        // Should skip first product, return last 2
        $this->assertCount(2, $filteredProducts);
        $this->assertEquals(2, $filteredProducts->first()->id);
    }

    public function test_skip_while_with_multiple_criteria(): void
    {
        $items = collect([
            (object) ['id' => 1, 'price' => 5, 'category' => 'electronics', 'in_stock' => true],
            (object) ['id' => 2, 'price' => 50, 'category' => 'electronics', 'in_stock' => false],
            (object) ['id' => 3, 'price' => 100, 'category' => 'clothing', 'in_stock' => true],
            (object) ['id' => 4, 'price' => 120, 'category' => 'electronics', 'in_stock' => true],
        ]);

        $criteria = [
            'price' => ['min' => 10, 'max' => 150],
            'category' => 'electronics',
            'in_stock' => true,
        ];

        $filteredItems = $this->dataFilteringService->filterWithMultipleCriteria($items, $criteria);

        // Should skip first 3 items and return only the last one
        $this->assertCount(1, $filteredItems);
        $this->assertEquals(4, $filteredItems->first()->id);
    }

    public function test_skip_while_basic_laravel_collection_example(): void
    {
        // Basic Laravel collection skipWhile example
        $collection = collect([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);

        $subset = $collection->skipWhile(function (int $item) {
            return $item <= 5;
        });

        $this->assertEquals([6, 7, 8, 9, 10], $subset->values()->all());
    }

    public function test_skip_while_with_string_values(): void
    {
        $collection = collect(['apple', 'banana', 'cherry', 'date', 'elderberry']);

        $subset = $collection->skipWhile(function (string $item) {
            return strlen($item) <= 5;
        });

        $this->assertEquals(['banana', 'cherry', 'date', 'elderberry'], $subset->values()->all());
    }

    public function test_skip_while_with_associative_arrays(): void
    {
        $collection = collect([
            ['name' => 'John', 'age' => 25],
            ['name' => 'Jane', 'age' => 30],
            ['name' => 'Bob', 'age' => 35],
            ['name' => 'Alice', 'age' => 40],
        ]);

        $subset = $collection->skipWhile(function (array $item) {
            return $item['age'] < 35;
        });

        $this->assertCount(2, $subset);
        $this->assertEquals('Bob', $subset->first()['name']);
        $this->assertEquals('Alice', $subset->last()['name']);
    }
}
