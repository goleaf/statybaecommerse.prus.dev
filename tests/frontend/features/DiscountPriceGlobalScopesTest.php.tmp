<?php

declare(strict_types=1);

namespace Tests\Feature;

use App\Models\DiscountCode;
use App\Models\DiscountCondition;
use App\Models\DiscountRedemption;
use App\Models\Price;
use App\Models\PriceList;
use App\Models\PriceListItem;
use App\Models\Scopes\ActiveScope;
use App\Models\Scopes\DateRangeScope;
use App\Models\Scopes\EnabledScope;
use App\Models\Scopes\StatusScope;
use App\Models\Scopes\UserOwnedScope;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

final class DiscountPriceGlobalScopesTest extends TestCase
{
    use RefreshDatabase;

    public function test_discount_code_model_has_multiple_scopes(): void
    {
        // Create test discount codes
        $activeCode = DiscountCode::factory()->create([
            'is_active' => true,
            'status' => 'active',
            'starts_at' => now()->subDay(),
            'expires_at' => now()->addDay(),
        ]);

        $inactiveCode = DiscountCode::factory()->create([
            'is_active' => false,
            'status' => 'active',
            'starts_at' => now()->subDay(),
            'expires_at' => now()->addDay(),
        ]);

        $expiredCode = DiscountCode::factory()->create([
            'is_active' => true,
            'status' => 'active',
            'starts_at' => now()->subDays(2),
            'expires_at' => now()->subDay(),
        ]);

        $inactiveStatusCode = DiscountCode::factory()->create([
            'is_active' => true,
            'status' => 'inactive',
            'starts_at' => now()->subDay(),
            'expires_at' => now()->addDay(),
        ]);

        // Test that only active, valid date range, and active status codes are returned
        $codes = DiscountCode::all();

        $this->assertCount(1, $codes);
        $this->assertEquals($activeCode->id, $codes->first()->id);

        // Test bypassing scopes
        $allCodes = DiscountCode::withoutGlobalScopes()->get();
        $this->assertCount(4, $allCodes);
    }

    public function test_discount_condition_model_has_active_scope(): void
    {
        // Create test discount conditions
        $activeCondition = DiscountCondition::factory()->create(['is_active' => true]);
        $inactiveCondition = DiscountCondition::factory()->create(['is_active' => false]);

        // Test that only active conditions are returned
        $conditions = DiscountCondition::all();

        $this->assertCount(1, $conditions);
        $this->assertEquals($activeCondition->id, $conditions->first()->id);

        // Test bypassing scopes
        $allConditions = DiscountCondition::withoutGlobalScopes()->get();
        $this->assertCount(2, $allConditions);
    }

    public function test_discount_redemption_model_has_multiple_scopes(): void
    {
        $user = User::factory()->create();
        $this->actingAs($user);

        // Create test discount redemptions
        $userRedemption = DiscountRedemption::factory()->create([
            'user_id' => $user->id,
            'status' => 'completed',
        ]);

        $otherUserRedemption = DiscountRedemption::factory()->create([
            'user_id' => User::factory()->create()->id,
            'status' => 'completed',
        ]);

        $pendingRedemption = DiscountRedemption::factory()->create([
            'user_id' => $user->id,
            'status' => 'pending',
        ]);

        // Test that only current user's redemptions with allowed status are returned
        $redemptions = DiscountRedemption::all();

        $this->assertCount(1, $redemptions);
        $this->assertEquals($userRedemption->id, $redemptions->first()->id);

        // Test bypassing scopes
        $allRedemptions = DiscountRedemption::withoutGlobalScopes()->get();
        $this->assertCount(3, $allRedemptions);
    }

    public function test_price_model_has_multiple_scopes(): void
    {
        // Create test prices
        $enabledPrice = Price::factory()->create([
            'is_enabled' => true,
            'starts_at' => now()->subDay(),
            'ends_at' => now()->addDay(),
        ]);

        $disabledPrice = Price::factory()->create([
            'is_enabled' => false,
            'starts_at' => now()->subDay(),
            'ends_at' => now()->addDay(),
        ]);

        $expiredPrice = Price::factory()->create([
            'is_enabled' => true,
            'starts_at' => now()->subDays(2),
            'ends_at' => now()->subDay(),
        ]);

        // Test that only enabled prices within date range are returned
        $prices = Price::all();

        $this->assertCount(1, $prices);
        $this->assertEquals($enabledPrice->id, $prices->first()->id);

        // Test bypassing scopes
        $allPrices = Price::withoutGlobalScopes()->get();
        $this->assertCount(3, $allPrices);
    }

    public function test_price_list_model_has_multiple_scopes(): void
    {
        // Create test price lists
        $enabledList = PriceList::factory()->create([
            'is_enabled' => true,
            'starts_at' => now()->subDay(),
            'ends_at' => now()->addDay(),
        ]);

        $disabledList = PriceList::factory()->create([
            'is_enabled' => false,
            'starts_at' => now()->subDay(),
            'ends_at' => now()->addDay(),
        ]);

        $expiredList = PriceList::factory()->create([
            'is_enabled' => true,
            'starts_at' => now()->subDays(2),
            'ends_at' => now()->subDay(),
        ]);

        // Test that only enabled price lists within date range are returned
        $lists = PriceList::all();

        $this->assertCount(1, $lists);
        $this->assertEquals($enabledList->id, $lists->first()->id);

        // Test bypassing scopes
        $allLists = PriceList::withoutGlobalScopes()->get();
        $this->assertCount(3, $allLists);
    }

    public function test_price_list_item_model_has_multiple_scopes(): void
    {
        // Create test price list items
        $activeItem = PriceListItem::factory()->create([
            'is_active' => true,
            'valid_from' => now()->subDay(),
            'valid_until' => now()->addDay(),
        ]);

        $inactiveItem = PriceListItem::factory()->create([
            'is_active' => false,
            'valid_from' => now()->subDay(),
            'valid_until' => now()->addDay(),
        ]);

        $expiredItem = PriceListItem::factory()->create([
            'is_active' => true,
            'valid_from' => now()->subDays(2),
            'valid_until' => now()->subDay(),
        ]);

        // Test that only active items within date range are returned
        $items = PriceListItem::all();

        $this->assertCount(1, $items);
        $this->assertEquals($activeItem->id, $items->first()->id);

        // Test bypassing scopes
        $allItems = PriceListItem::withoutGlobalScopes()->get();
        $this->assertCount(3, $allItems);
    }

    public function test_global_scopes_can_be_combined_with_local_scopes(): void
    {
        // Create test data
        $activeCondition = DiscountCondition::factory()->create(['is_active' => true]);
        $inactiveCondition = DiscountCondition::factory()->create(['is_active' => false]);

        // Test that global scopes work with local scopes
        $conditions = DiscountCondition::where('type', 'like', '%test%')->get();
        $this->assertCount(0, $conditions); // No conditions with 'test' in type

        // Test bypassing global scopes with local scopes
        $allConditions = DiscountCondition::withoutGlobalScopes()->where('is_active', true)->get();
        $this->assertCount(1, $allConditions);
        $this->assertEquals($activeCondition->id, $allConditions->first()->id);
    }

    public function test_global_scopes_are_applied_to_relationships(): void
    {
        // Create test data with relationships
        $enabledPrice = Price::factory()->create([
            'is_enabled' => true,
            'starts_at' => now()->subDay(),
            'ends_at' => now()->addDay(),
        ]);

        $disabledPrice = Price::factory()->create([
            'is_enabled' => false,
            'starts_at' => now()->subDay(),
            'ends_at' => now()->addDay(),
        ]);

        // Test that relationships also apply global scopes
        $prices = Price::all();
        $this->assertCount(1, $prices);
        $this->assertEquals($enabledPrice->id, $prices->first()->id);
    }

    public function test_discount_scope_combinations(): void
    {
        // Test different combinations of discount scopes
        $code1 = DiscountCode::factory()->create([
            'is_active' => true,
            'status' => 'active',
            'starts_at' => now()->subDay(),
            'expires_at' => now()->addDay(),
        ]);

        $code2 = DiscountCode::factory()->create([
            'is_active' => false,
            'status' => 'active',
            'starts_at' => now()->subDay(),
            'expires_at' => now()->addDay(),
        ]);

        $code3 = DiscountCode::factory()->create([
            'is_active' => true,
            'status' => 'inactive',
            'starts_at' => now()->subDay(),
            'expires_at' => now()->addDay(),
        ]);

        // Test bypassing specific scopes
        $activeCodes = DiscountCode::withoutGlobalScope(StatusScope::class)->get();
        $this->assertCount(1, $activeCodes); // Only active codes

        $statusCodes = DiscountCode::withoutGlobalScope(ActiveScope::class)->get();
        $this->assertCount(1, $statusCodes); // Only active status codes
    }

    public function test_price_scope_combinations(): void
    {
        // Test different combinations of price scopes
        $price1 = Price::factory()->create([
            'is_enabled' => true,
            'starts_at' => now()->subDay(),
            'ends_at' => now()->addDay(),
        ]);

        $price2 = Price::factory()->create([
            'is_enabled' => false,
            'starts_at' => now()->subDay(),
            'ends_at' => now()->addDay(),
        ]);

        $price3 = Price::factory()->create([
            'is_enabled' => true,
            'starts_at' => now()->subDays(2),
            'ends_at' => now()->subDay(),
        ]);

        // Test bypassing specific scopes
        $enabledPrices = Price::withoutGlobalScope(DateRangeScope::class)->get();
        $this->assertCount(2, $enabledPrices); // Only enabled prices

        $dateRangePrices = Price::withoutGlobalScope(EnabledScope::class)->get();
        $this->assertCount(2, $dateRangePrices); // Only prices within date range
    }

    public function test_user_owned_scope_with_discount_redemption(): void
    {
        $user1 = User::factory()->create();
        $user2 = User::factory()->create();

        // Create redemptions for different users
        $user1Redemption = DiscountRedemption::factory()->create([
            'user_id' => $user1->id,
            'status' => 'completed',
        ]);

        $user2Redemption = DiscountRedemption::factory()->create([
            'user_id' => $user2->id,
            'status' => 'completed',
        ]);

        // Test as user1
        $this->actingAs($user1);
        $user1Redemptions = DiscountRedemption::all();
        $this->assertCount(1, $user1Redemptions);
        $this->assertEquals($user1Redemption->id, $user1Redemptions->first()->id);

        // Test as user2
        $this->actingAs($user2);
        $user2Redemptions = DiscountRedemption::all();
        $this->assertCount(1, $user2Redemptions);
        $this->assertEquals($user2Redemption->id, $user2Redemptions->first()->id);

        // Test bypassing user scope
        $allRedemptions = DiscountRedemption::withoutGlobalScope(UserOwnedScope::class)->get();
        $this->assertCount(2, $allRedemptions);
    }

    public function test_date_range_scope_with_price_models(): void
    {
        // Test date range scope with different date field combinations
        $price1 = Price::factory()->create([
            'is_enabled' => true,
            'starts_at' => now()->subDay(),
            'ends_at' => now()->addDay(),
        ]);

        $price2 = Price::factory()->create([
            'is_enabled' => true,
            'starts_at' => now()->subDays(2),
            'ends_at' => now()->subDay(),
        ]);

        $price3 = Price::factory()->create([
            'is_enabled' => true,
            'starts_at' => now()->addDay(),
            'ends_at' => now()->addDays(2),
        ]);

        // Test that only prices within current date range are returned
        $prices = Price::all();
        $this->assertCount(1, $prices);
        $this->assertEquals($price1->id, $prices->first()->id);

        // Test bypassing date range scope
        $allPrices = Price::withoutGlobalScope(DateRangeScope::class)->get();
        $this->assertCount(3, $allPrices);
    }
}
