<?php

declare(strict_types=1);

namespace Tests\Feature;

use App\Models\Category;
use App\Models\Collection;
use App\Models\Product;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class CollectionControllerTest extends TestCase
{
    use RefreshDatabase;

    public function test_can_view_collections_index(): void
    {
        $collections = Collection::factory()->count(3)->create([
            'is_visible' => true,
            'is_active' => true,
        ]);

        $response = $this->get('/collections');

        $response->assertOk()
            ->assertSee($collections->first()->name)
            ->assertViewIs('collections.index');
    }

    public function test_can_view_single_collection(): void
    {
        $collection = Collection::factory()->create([
            'is_visible' => true,
            'is_active' => true,
        ]);

        $response = $this->get("/collections/{$collection->slug}");

        $response->assertOk()
            ->assertSee($collection->name)
            ->assertViewIs('collections.show');
    }

    public function test_can_search_collections(): void
    {
        $collection1 = Collection::factory()->create([
            'name' => 'Summer Collection',
            'is_visible' => true,
            'is_active' => true,
        ]);
        $collection2 = Collection::factory()->create([
            'name' => 'Winter Collection',
            'is_visible' => true,
            'is_active' => true,
        ]);

        $response = $this->get('/collections?search=Summer');

        $response->assertOk()
            ->assertSee($collection1->name)
            ->assertDontSee($collection2->name);
    }

    public function test_can_filter_collections_by_type(): void
    {
        $manualCollection = Collection::factory()->create([
            'is_automatic' => false,
            'is_visible' => true,
            'is_active' => true,
        ]);
        $automaticCollection = Collection::factory()->create([
            'is_automatic' => true,
            'is_visible' => true,
            'is_active' => true,
        ]);

        $response = $this->get('/collections?type=manual');

        $response->assertOk()
            ->assertSee($manualCollection->name)
            ->assertDontSee($automaticCollection->name);
    }

    public function test_can_view_collection_with_products(): void
    {
        $collection = Collection::factory()->create([
            'is_visible' => true,
            'is_active' => true,
        ]);
        $products = Product::factory()->count(3)->create(['status' => 'published', 'published_at' => now()]);
        $collection->products()->attach($products->pluck('id'));

        $response = $this->get("/collections/{$collection->slug}");

        $response->assertOk()
            ->assertSee($collection->name)
            ->assertSee($products->first()->name);
    }

    public function test_can_filter_collection_products(): void
    {
        $collection = Collection::factory()->create([
            'is_visible' => true,
            'is_active' => true,
        ]);
        $category = Category::factory()->create();
        $products = Product::factory()->count(3)->create([
            'status' => 'published',
            'published_at' => now(),
        ]);
        $products->first()->categories()->attach($category->id);
        $collection->products()->attach($products->pluck('id'));

        $response = $this->get("/collections/{$collection->slug}/products?category={$category->slug}");

        $response->assertOk()
            ->assertJsonStructure(['products', 'collection']);
    }

    public function test_can_sort_collection_products(): void
    {
        $collection = Collection::factory()->create([
            'is_visible' => true,
            'is_active' => true,
        ]);
        $products = collect([
            Product::factory()->create(['status' => 'published', 'published_at' => now(), 'price' => 100]),
            Product::factory()->create(['status' => 'published', 'published_at' => now(), 'price' => 200]),
            Product::factory()->create(['status' => 'published', 'published_at' => now(), 'price' => 300]),
        ]);
        $collection->products()->attach($products->pluck('id'));

        $response = $this->get("/collections/{$collection->slug}/products?sort=price_asc");

        $response->assertOk()
            ->assertJsonStructure(['products', 'collection']);
    }

    public function test_can_filter_collection_products_by_price(): void
    {
        $collection = Collection::factory()->create([
            'is_visible' => true,
            'is_active' => true,
        ]);
        $products = collect([
            Product::factory()->create(['status' => 'published', 'published_at' => now(), 'price' => 50]),
            Product::factory()->create(['status' => 'published', 'published_at' => now(), 'price' => 150]),
            Product::factory()->create(['status' => 'published', 'published_at' => now(), 'price' => 250]),
        ]);
        $collection->products()->attach($products->pluck('id'));

        $response = $this->get("/collections/{$collection->slug}/products?price_min=100&price_max=200");

        $response->assertOk()
            ->assertJsonStructure(['products', 'collection']);
    }

    public function test_can_search_collections_via_api(): void
    {
        $collection1 = Collection::factory()->create([
            'name' => 'Summer Collection',
            'is_visible' => true,
            'is_active' => true,
        ]);
        $collection2 = Collection::factory()->create([
            'name' => 'Winter Collection',
            'is_visible' => true,
            'is_active' => true,
        ]);

        $response = $this->get('/collections/api/search?q=Summer');

        $response->assertOk()
            ->assertJsonCount(1)
            ->assertJsonFragment(['name' => 'Summer Collection']);
    }

    public function test_hidden_collections_not_visible(): void
    {
        $visibleCollection = Collection::factory()->create([
            'is_visible' => true,
            'is_active' => true,
        ]);
        $hiddenCollection = Collection::factory()->create([
            'is_visible' => false,
            'is_active' => true,
        ]);

        $response = $this->get('/collections');

        $response->assertOk()
            ->assertSee($visibleCollection->name)
            ->assertDontSee($hiddenCollection->name);
    }

    public function test_inactive_collections_not_visible(): void
    {
        $activeCollection = Collection::factory()->create([
            'is_visible' => true,
            'is_active' => true,
        ]);
        $inactiveCollection = Collection::factory()->create([
            'is_visible' => true,
            'is_active' => false,
        ]);

        $response = $this->get('/collections');

        $response->assertOk()
            ->assertSee($activeCollection->name)
            ->assertDontSee($inactiveCollection->name);
    }

    public function test_collection_show_returns_404_for_hidden_collection(): void
    {
        $hiddenCollection = Collection::factory()->create([
            'is_visible' => false,
            'is_active' => true,
        ]);

        $response = $this->get("/collections/{$hiddenCollection->slug}");

        $response->assertNotFound();
    }

    public function test_collection_show_returns_404_for_inactive_collection(): void
    {
        $inactiveCollection = Collection::factory()->create([
            'is_visible' => true,
            'is_active' => false,
        ]);

        $response = $this->get("/collections/{$inactiveCollection->slug}");

        $response->assertNotFound();
    }

    public function test_collection_show_displays_related_collections(): void
    {
        $collection = Collection::factory()->create([
            'is_visible' => true,
            'is_active' => true,
        ]);
        $relatedCollection = Collection::factory()->create([
            'is_visible' => true,
            'is_active' => true,
        ]);
        $products = Product::factory()->count(2)->create(['status' => 'published', 'published_at' => now()]);
        $collection->products()->attach($products->pluck('id'));
        $relatedCollection->products()->attach($products->pluck('id'));

        $response = $this->get("/collections/{$collection->slug}");

        $response->assertOk()
            ->assertSee($relatedCollection->name);
    }

    public function test_collection_pagination(): void
    {
        Collection::factory()->count(15)->create([
            'is_visible' => true,
            'is_active' => true,
        ]);

        $response = $this->get('/collections');

        $response->assertOk()
            ->assertViewHas('collections');
    }

    public function test_collection_products_pagination(): void
    {
        $collection = Collection::factory()->create([
            'is_visible' => true,
            'is_active' => true,
            'products_per_page' => 5,
        ]);
        $products = Product::factory()->count(10)->create(['status' => 'published', 'published_at' => now()]);
        $collection->products()->attach($products->pluck('id'));

        $response = $this->get("/collections/{$collection->slug}");

        $response->assertOk()
            ->assertViewHas('products');
    }

    public function test_collection_meta_tags(): void
    {
        $collection = Collection::factory()->create([
            'is_visible' => true,
            'is_active' => true,
            'meta_title' => 'Custom Meta Title',
            'meta_description' => 'Custom Meta Description',
            'meta_keywords' => ['keyword1', 'keyword2'],
        ]);

        $response = $this->get("/collections/{$collection->slug}");

        $response->assertOk()
            ->assertSee('Custom Meta Title')
            ->assertSee('Custom Meta Description');
    }

    public function test_collection_banner_display(): void
    {
        $collection = Collection::factory()->create([
            'is_visible' => true,
            'is_active' => true,
        ]);

        $response = $this->get("/collections/{$collection->slug}");

        $response->assertOk();
        // Banner would be tested with actual media files
    }

    public function test_collection_automatic_badge(): void
    {
        $automaticCollection = Collection::factory()->create([
            'is_automatic' => true,
            'is_visible' => true,
            'is_active' => true,
        ]);

        $response = $this->get("/collections/{$automaticCollection->slug}");

        $response->assertOk()
            ->assertSee('automatic');
    }

    public function test_collection_products_count_display(): void
    {
        $collection = Collection::factory()->create([
            'is_visible' => true,
            'is_active' => true,
        ]);
        $products = Product::factory()->count(5)->create(['status' => 'published', 'published_at' => now()]);
        $collection->products()->attach($products->pluck('id'));

        $response = $this->get("/collections/{$collection->slug}");

        $response->assertOk()
            ->assertSee('5');
    }

    public function test_collection_empty_state(): void
    {
        $response = $this->get('/collections');

        $response->assertOk()
            ->assertSee('no_collections_found');
    }

    public function test_collection_products_empty_state(): void
    {
        $collection = Collection::factory()->create([
            'is_visible' => true,
            'is_active' => true,
        ]);

        $response = $this->get("/collections/{$collection->slug}");

        $response->assertOk()
            ->assertSee('no_products_found');
    }
}
