<?php

declare(strict_types=1);

namespace Tests\Feature;

use App\Models\CustomerGroup;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

final class CustomerSegmentationTest extends TestCase
{
    use RefreshDatabase;

    public function test_customer_segmentation_page_displays_correctly(): void
    {
        // Create some customer groups
        CustomerGroup::factory()->create([
            'name' => 'VIP Customers',
            'slug' => 'vip-customers',
            'description' => 'High-value customers',
            'discount_percentage' => 15.0,
            'is_enabled' => true,
        ]);

        CustomerGroup::factory()->create([
            'name' => 'Regular Customers',
            'slug' => 'regular-customers',
            'description' => 'Standard customers',
            'discount_percentage' => 5.0,
            'is_enabled' => true,
        ]);

        // Create a user and assign to a group
        $user = User::factory()->create();
        $vipGroup = CustomerGroup::where('slug', 'vip-customers')->first();
        $user->customerGroups()->attach($vipGroup->id);

        // Test the page loads
        $response = $this->get('/admin/customer-segmentation');
        $response->assertStatus(200);
    }

    public function test_customer_groups_are_displayed_in_table(): void
    {
        // Create customer groups
        $vipGroup = CustomerGroup::factory()->create([
            'name' => 'VIP Customers',
            'discount_percentage' => 15.0,
            'is_enabled' => true,
        ]);

        $regularGroup = CustomerGroup::factory()->create([
            'name' => 'Regular Customers',
            'discount_percentage' => 5.0,
            'is_enabled' => false,
        ]);

        // Test that groups are displayed
        $this->assertDatabaseHas('customer_groups', [
            'name' => 'VIP Customers',
            'discount_percentage' => 15.0,
            'is_enabled' => true,
        ]);

        $this->assertDatabaseHas('customer_groups', [
            'name' => 'Regular Customers',
            'discount_percentage' => 5.0,
            'is_enabled' => false,
        ]);
    }

    public function test_customer_group_creation(): void
    {
        $groupData = [
            'name' => 'Test Group',
            'slug' => 'test-group',
            'description' => 'Test description',
            'discount_percentage' => 10.0,
            'is_enabled' => true,
        ];

        $group = CustomerGroup::create($groupData);

        $this->assertDatabaseHas('customer_groups', [
            'name' => 'Test Group',
            'slug' => 'test-group',
            'discount_percentage' => 10.0,
            'is_enabled' => true,
        ]);

        $this->assertEquals('Test Group', $group->name);
        $this->assertEquals(10.0, $group->discount_percentage);
        $this->assertTrue($group->is_enabled);
    }

    public function test_user_can_be_assigned_to_customer_group(): void
    {
        $user = User::factory()->create();
        $group = CustomerGroup::factory()->create();

        $user->customerGroups()->attach($group->id);

        $this->assertTrue($user->customerGroups->contains($group));
        $this->assertTrue($group->users->contains($user));
    }

    public function test_customer_group_statistics(): void
    {
        // Create groups with different statuses
        CustomerGroup::factory()->create(['is_enabled' => true, 'discount_percentage' => 15.0]);
        CustomerGroup::factory()->create(['is_enabled' => true, 'discount_percentage' => 5.0]);
        CustomerGroup::factory()->create(['is_enabled' => false, 'discount_percentage' => 0.0]);

        // Test statistics
        $totalGroups = CustomerGroup::count();
        $activeGroups = CustomerGroup::where('is_enabled', true)->count();
        $averageDiscount = CustomerGroup::where('is_enabled', true)->avg('discount_percentage');

        $this->assertEquals(3, $totalGroups);
        $this->assertEquals(2, $activeGroups);
        $this->assertEquals(10.0, $averageDiscount);
    }
}
