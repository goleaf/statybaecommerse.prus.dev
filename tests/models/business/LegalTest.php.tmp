<?php

declare(strict_types=1);

namespace Tests\Unit;

use App\Models\Legal;
use App\Models\Translations\LegalTranslation;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class LegalTest extends TestCase
{
    use RefreshDatabase;

    public function test_legal_can_be_created(): void
    {
        $legal = Legal::factory()->create([
            'key' => 'privacy-policy',
            'type' => 'privacy_policy',
            'is_enabled' => true,
            'is_required' => true,
        ]);

        $this->assertDatabaseHas('legals', [
            'key' => 'privacy-policy',
            'type' => 'privacy_policy',
            'is_enabled' => true,
            'is_required' => true,
        ]);
    }

    public function test_legal_casts_work_correctly(): void
    {
        $legal = Legal::factory()->create([
            'is_enabled' => true,
            'is_required' => false,
            'sort_order' => 10,
            'meta_data' => ['version' => '1.0'],
            'published_at' => now(),
        ]);

        $this->assertIsBool($legal->is_enabled);
        $this->assertIsBool($legal->is_required);
        $this->assertIsInt($legal->sort_order);
        $this->assertIsArray($legal->meta_data);
        $this->assertInstanceOf(\Carbon\Carbon::class, $legal->published_at);
    }

    public function test_legal_fillable_attributes(): void
    {
        $legal = new Legal;
        $fillable = $legal->getFillable();

        $expectedFillable = [
            'key',
            'type',
            'is_enabled',
            'is_required',
            'sort_order',
            'meta_data',
            'published_at',
        ];

        foreach ($expectedFillable as $field) {
            $this->assertContains($field, $fillable);
        }
    }

    public function test_legal_scope_enabled(): void
    {
        $enabledLegal = Legal::factory()->enabled()->create();
        $disabledLegal = Legal::factory()->disabled()->create();

        $enabledLegals = Legal::enabled()->get();

        $this->assertTrue($enabledLegals->contains($enabledLegal));
        $this->assertFalse($enabledLegals->contains($disabledLegal));
    }

    public function test_legal_scope_required(): void
    {
        $requiredLegal = Legal::factory()->required()->create();
        $optionalLegal = Legal::factory()->create(['is_required' => false]);

        $requiredLegals = Legal::required()->get();

        $this->assertTrue($requiredLegals->contains($requiredLegal));
        $this->assertFalse($requiredLegals->contains($optionalLegal));
    }

    public function test_legal_scope_by_type(): void
    {
        $privacyPolicy = Legal::factory()->privacyPolicy()->create();
        $termsOfUse = Legal::factory()->termsOfUse()->create();

        $privacyPolicies = Legal::byType('privacy_policy')->get();

        $this->assertTrue($privacyPolicies->contains($privacyPolicy));
        $this->assertFalse($privacyPolicies->contains($termsOfUse));
    }

    public function test_legal_scope_published(): void
    {
        $publishedLegal = Legal::factory()->published()->create();
        $draftLegal = Legal::factory()->draft()->create();

        $publishedLegals = Legal::published()->get();

        $this->assertTrue($publishedLegals->contains($publishedLegal));
        $this->assertFalse($publishedLegals->contains($draftLegal));
    }

    public function test_legal_scope_ordered(): void
    {
        $legal1 = Legal::factory()->create(['sort_order' => 2]);
        $legal2 = Legal::factory()->create(['sort_order' => 1]);
        $legal3 = Legal::factory()->create(['sort_order' => 3]);

        $orderedLegals = Legal::ordered()->get();

        $this->assertEquals($legal2->id, $orderedLegals->first()->id);
        $this->assertEquals($legal3->id, $orderedLegals->last()->id);
    }

    public function test_legal_scope_by_key(): void
    {
        $legal = Legal::factory()->create(['key' => 'test-key']);

        $foundLegal = Legal::byKey('test-key')->first();

        $this->assertEquals($legal->id, $foundLegal->id);
    }

    public function test_legal_is_published_accessor(): void
    {
        $publishedLegal = Legal::factory()->published()->create();
        $draftLegal = Legal::factory()->draft()->create();

        $this->assertTrue($publishedLegal->is_published);
        $this->assertFalse($draftLegal->is_published);
    }

    public function test_legal_status_accessor(): void
    {
        $publishedLegal = Legal::factory()->enabled()->published()->create();
        $draftLegal = Legal::factory()->enabled()->draft()->create();
        $disabledLegal = Legal::factory()->disabled()->create();

        $this->assertEquals('published', $publishedLegal->status);
        $this->assertEquals('draft', $draftLegal->status);
        $this->assertEquals('disabled', $disabledLegal->status);
    }

    public function test_legal_get_types(): void
    {
        $types = Legal::getTypes();

        $this->assertIsArray($types);
        $this->assertArrayHasKey('privacy_policy', $types);
        $this->assertArrayHasKey('terms_of_use', $types);
        $this->assertArrayHasKey('refund_policy', $types);
    }

    public function test_legal_get_required_types(): void
    {
        $requiredTypes = Legal::getRequiredTypes();

        $this->assertIsArray($requiredTypes);
        $this->assertContains('privacy_policy', $requiredTypes);
        $this->assertContains('terms_of_use', $requiredTypes);
    }

    public function test_legal_get_by_key(): void
    {
        $legal = Legal::factory()->enabled()->published()->create(['key' => 'test-key']);

        $foundLegal = Legal::getByKey('test-key');

        $this->assertEquals($legal->id, $foundLegal->id);
    }

    public function test_legal_get_required_documents(): void
    {
        $requiredLegal = Legal::factory()->required()->enabled()->published()->create();
        $optionalLegal = Legal::factory()->enabled()->published()->create(['is_required' => false]);

        $requiredDocuments = Legal::getRequiredDocuments();

        $this->assertTrue($requiredDocuments->contains($requiredLegal));
        $this->assertFalse($requiredDocuments->contains($optionalLegal));
    }

    public function test_legal_get_by_type(): void
    {
        $privacyPolicy = Legal::factory()->privacyPolicy()->enabled()->published()->create();
        $termsOfUse = Legal::factory()->termsOfUse()->enabled()->published()->create();

        $privacyPolicies = Legal::getByType('privacy_policy');

        $this->assertTrue($privacyPolicies->contains($privacyPolicy));
        $this->assertFalse($privacyPolicies->contains($termsOfUse));
    }

    public function test_legal_publish(): void
    {
        $legal = Legal::factory()->draft()->create();

        $result = $legal->publish();

        $this->assertTrue($result);
        $this->assertNotNull($legal->fresh()->published_at);
    }

    public function test_legal_unpublish(): void
    {
        $legal = Legal::factory()->published()->create();

        $result = $legal->unpublish();

        $this->assertTrue($result);
        $this->assertNull($legal->fresh()->published_at);
    }

    public function test_legal_enable(): void
    {
        $legal = Legal::factory()->disabled()->create();

        $result = $legal->enable();

        $this->assertTrue($result);
        $this->assertTrue($legal->fresh()->is_enabled);
    }

    public function test_legal_disable(): void
    {
        $legal = Legal::factory()->enabled()->create();

        $result = $legal->disable();

        $this->assertTrue($result);
        $this->assertFalse($legal->fresh()->is_enabled);
    }

    public function test_legal_make_required(): void
    {
        $legal = Legal::factory()->create(['is_required' => false]);

        $result = $legal->makeRequired();

        $this->assertTrue($result);
        $this->assertTrue($legal->fresh()->is_required);
    }

    public function test_legal_make_optional(): void
    {
        $legal = Legal::factory()->required()->create();

        $result = $legal->makeOptional();

        $this->assertTrue($result);
        $this->assertFalse($legal->fresh()->is_required);
    }

    public function test_legal_has_translations_relationship(): void
    {
        $legal = Legal::factory()->create();

        $translation = LegalTranslation::factory()->create([
            'legal_id' => $legal->id,
            'locale' => 'lt',
            'title' => 'Test Title',
            'content' => 'Test Content',
        ]);

        $this->assertTrue($legal->translations->contains($translation));
    }

    public function test_legal_get_available_locales(): void
    {
        $legal = Legal::factory()->create();

        LegalTranslation::factory()->create([
            'legal_id' => $legal->id,
            'locale' => 'lt',
        ]);

        LegalTranslation::factory()->create([
            'legal_id' => $legal->id,
            'locale' => 'en',
        ]);

        $locales = $legal->getAvailableLocales();

        $this->assertContains('lt', $locales);
        $this->assertContains('en', $locales);
    }

    public function test_legal_has_translation_for(): void
    {
        $legal = Legal::factory()->create();

        LegalTranslation::factory()->create([
            'legal_id' => $legal->id,
            'locale' => 'lt',
        ]);

        $this->assertTrue($legal->hasTranslationFor('lt'));
        $this->assertFalse($legal->hasTranslationFor('en'));
    }

    public function test_legal_get_or_create_translation(): void
    {
        $legal = Legal::factory()->create(['key' => 'test-key']);

        $translation = $legal->getOrCreateTranslation('lt');

        $this->assertInstanceOf(LegalTranslation::class, $translation);
        $this->assertEquals('lt', $translation->locale);
        $this->assertEquals('test-key', $translation->title);
    }

    public function test_legal_update_translation(): void
    {
        $legal = Legal::factory()->create();

        $translation = LegalTranslation::factory()->create([
            'legal_id' => $legal->id,
            'locale' => 'lt',
        ]);

        $result = $legal->updateTranslation('lt', [
            'title' => 'Updated Title',
            'content' => 'Updated Content',
        ]);

        $this->assertTrue($result);
        $this->assertEquals('Updated Title', $translation->fresh()->title);
        $this->assertEquals('Updated Content', $translation->fresh()->content);
    }
}
