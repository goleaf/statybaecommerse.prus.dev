<?php

declare(strict_types=1);

namespace Tests\Unit;

use App\Models\Collection;
use App\Models\Translations\CollectionTranslation;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

final class CollectionTest extends TestCase
{
    use RefreshDatabase;

    public function test_collection_can_be_created(): void
    {
        $collection = Collection::factory()->create([
            'name' => 'Test Collection',
            'slug' => 'test-collection',
            'description' => 'Test description',
            'is_visible' => true,
            'is_automatic' => false,
            'sort_order' => 1,
            'display_type' => 'grid',
            'products_per_page' => 12,
            'show_filters' => true,
        ]);

        $this->assertInstanceOf(Collection::class, $collection);
        $this->assertEquals('Test Collection', $collection->name);
        $this->assertEquals('test-collection', $collection->slug);
        $this->assertEquals('Test description', $collection->description);
        $this->assertTrue($collection->is_visible);
        $this->assertFalse($collection->is_automatic);
        $this->assertEquals(1, $collection->sort_order);
        $this->assertEquals('grid', $collection->display_type);
        $this->assertEquals(12, $collection->products_per_page);
        $this->assertTrue($collection->show_filters);
    }

    public function test_collection_translation_methods(): void
    {
        $collection = Collection::factory()->create([
            'name' => 'Test Collection',
            'slug' => 'test-collection',
            'description' => 'Test description',
        ]);

        // Create translations
        $ltTranslation = CollectionTranslation::factory()->create([
            'collection_id' => $collection->id,
            'locale' => 'lt',
            'name' => 'Testo Kolekcija',
            'description' => 'Testo aprašymas',
        ]);

        $enTranslation = CollectionTranslation::factory()->create([
            'collection_id' => $collection->id,
            'locale' => 'en',
            'name' => 'Test Collection EN',
            'description' => 'Test description EN',
        ]);

        // Test translation methods
        $this->assertEquals('Testo Kolekcija', $collection->getTranslatedName('lt'));
        $this->assertEquals('Test Collection EN', $collection->getTranslatedName('en'));
        $this->assertEquals('Testo Kolekcija', $collection->getTranslatedName()); // Current locale (lt)

        $this->assertEquals('Testo aprašymas', $collection->getTranslatedDescription('lt'));
        $this->assertEquals('Test description EN', $collection->getTranslatedDescription('en'));

        // Test trans method
        $this->assertEquals('Testo Kolekcija', $collection->trans('name', 'lt'));
        $this->assertEquals('Test Collection EN', $collection->trans('name', 'en'));

        // Test available locales
        $this->assertContains('lt', $collection->getAvailableLocales());
        $this->assertTrue($collection->hasTranslationFor('lt'));
        $this->assertFalse($collection->hasTranslationFor('de'));

        // Test get or create translation
        $newTranslation = $collection->getOrCreateTranslation('en');
        $this->assertInstanceOf(CollectionTranslation::class, $newTranslation);
        $this->assertEquals('en', $newTranslation->locale);
    }

    public function test_collection_scopes(): void
    {
        // Clear any existing collections first
        Collection::query()->delete();

        // Create test collections with specific attributes
        $visibleCollection = Collection::factory()->create(['is_visible' => true, 'is_automatic' => false]);
        $hiddenCollection = Collection::factory()->create(['is_visible' => false, 'is_automatic' => false]);
        $automaticCollection = Collection::factory()->create(['is_automatic' => true, 'is_visible' => true]);
        $manualCollection = Collection::factory()->create(['is_automatic' => false, 'is_visible' => true]);
        $orderedCollection1 = Collection::factory()->create(['sort_order' => 2, 'is_visible' => true, 'is_automatic' => false]);
        $orderedCollection2 = Collection::factory()->create(['sort_order' => 1, 'is_visible' => true, 'is_automatic' => false]);

        // Test visible scope
        $visibleCollections = Collection::visible()->get();
        $this->assertCount(5, $visibleCollections);
        $this->assertTrue($visibleCollections->contains($visibleCollection));
        $this->assertTrue($visibleCollections->contains($automaticCollection));
        $this->assertTrue($visibleCollections->contains($manualCollection));
        $this->assertTrue($visibleCollections->contains($orderedCollection1));
        $this->assertTrue($visibleCollections->contains($orderedCollection2));

        // Test automatic scope
        $automaticCollections = Collection::automatic()->get();
        $this->assertCount(1, $automaticCollections);
        $this->assertEquals($automaticCollection->id, $automaticCollections->first()->id);

        // Test manual scope
        $manualCollections = Collection::manual()->get();
        $this->assertCount(4, $manualCollections);
        $this->assertTrue($manualCollections->contains($manualCollection));

        // Test ordered scope
        $orderedCollections = Collection::ordered()->get();
        $this->assertGreaterThanOrEqual(5, $orderedCollections->count());
        $this->assertTrue($orderedCollections->contains($orderedCollection2)); // sort_order = 1 should be in the results
    }

    public function test_collection_helper_methods(): void
    {
        $collection = Collection::factory()->create([
            'is_automatic' => false,
            'name' => 'Test Collection',
        ]);

        // Test type methods
        $this->assertTrue($collection->isManual());
        $this->assertFalse($collection->isAutomatic());

        // Test full display name
        $displayName = $collection->getFullDisplayName();
        $this->assertStringContainsString('Test Collection', $displayName);
        $this->assertStringContainsString('Manual', $displayName);

        // Test info methods
        $collectionInfo = $collection->getCollectionInfo();
        $this->assertArrayHasKey('id', $collectionInfo);
        $this->assertArrayHasKey('name', $collectionInfo);
        $this->assertArrayHasKey('type', $collectionInfo);

        $seoInfo = $collection->getSeoInfo();
        $this->assertArrayHasKey('seo_title', $seoInfo);
        $this->assertArrayHasKey('meta_description', $seoInfo);

        $businessInfo = $collection->getBusinessInfo();
        $this->assertArrayHasKey('products_count', $businessInfo);
        $this->assertArrayHasKey('display_type', $businessInfo);

        $completeInfo = $collection->getCompleteInfo();
        $this->assertArrayHasKey('translations', $completeInfo);
        $this->assertArrayHasKey('has_translations', $completeInfo);
    }

    public function test_collection_translation_management(): void
    {
        $collection = Collection::factory()->create();

        // Test available locales (should be empty initially)
        $this->assertEmpty($collection->getAvailableLocales());

        // Test has translation for
        $this->assertFalse($collection->hasTranslationFor('en'));

        // Test get or create translation
        $translation = $collection->getOrCreateTranslation('en');
        $this->assertInstanceOf(CollectionTranslation::class, $translation);
        $this->assertEquals('en', $translation->locale);

        // Test update translation
        $this->assertTrue($collection->updateTranslation('en', [
            'name' => 'English Name',
            'description' => 'English Description',
        ]));

        // Test available locales now includes 'en'
        $this->assertContains('en', $collection->getAvailableLocales());
        $this->assertTrue($collection->hasTranslationFor('en'));

        // Test update multiple translations
        $this->assertTrue($collection->updateTranslations([
            'lt' => [
                'name' => 'Lithuanian Name',
                'description' => 'Lithuanian Description',
            ],
        ]));

        $this->assertContains('lt', $collection->getAvailableLocales());
    }

    public function test_collection_relations(): void
    {
        $collection = Collection::factory()->create();

        // Test products relation
        $this->assertInstanceOf(\Illuminate\Database\Eloquent\Relations\BelongsToMany::class, $collection->products());

        // Test rules relation
        $this->assertInstanceOf(\Illuminate\Database\Eloquent\Relations\HasMany::class, $collection->rules());
    }

    public function test_collection_with_translations_scope(): void
    {
        $collection = Collection::factory()->create();
        $collection->updateTranslation('en', ['name' => 'English Name']);

        $collectionsWithTranslations = Collection::withTranslations('en')->get();
        $this->assertCount(1, $collectionsWithTranslations);

        $loadedCollection = $collectionsWithTranslations->first();
        $this->assertTrue($loadedCollection->relationLoaded('translations'));
    }

    public function test_collection_products_count_attribute(): void
    {
        $collection = Collection::factory()->create();

        // Initially should have 0 products
        $this->assertEquals(0, $collection->getProductsCountAttribute());

        // Note: In a real test, you would create products and attach them to the collection
        // For now, we just test that the method exists and returns a number
        $this->assertIsInt($collection->getProductsCountAttribute());
    }

    public function test_collection_image_methods(): void
    {
        $collection = Collection::factory()->create();

        // Test image attribute (should be null initially)
        $this->assertNull($collection->getImageAttribute());

        // Test image URL methods
        $this->assertNull($collection->getImageUrl());
        $this->assertEquals('', $collection->getImageUrl('sm'));

        // Test banner URL methods
        $this->assertNull($collection->getBannerUrl());
        $this->assertEquals('', $collection->getBannerUrl('md'));
    }
}
