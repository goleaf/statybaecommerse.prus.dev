<?php

declare(strict_types=1);

namespace Tests\Unit;

use App\Enums\AddressType;
use App\Models\Address;
use App\Models\City;
use App\Models\Country;
use App\Models\Region;
use App\Models\User;
use App\Models\Zone;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class AddressTest extends TestCase
{
    use RefreshDatabase;

    public function test_address_can_be_created(): void
    {
        $user = User::factory()->create();

        $address = Address::factory()->create([
            'user_id' => $user->id,
            'type' => AddressType::SHIPPING,
            'first_name' => 'John',
            'last_name' => 'Doe',
            'address_line_1' => 'Test Street 123',
            'city' => 'Vilnius',
            'postal_code' => 'LT-01234',
            'is_default' => true,
        ]);

        $this->assertDatabaseHas('addresses', [
            'user_id' => $user->id,
            'type' => AddressType::SHIPPING->value,
            'first_name' => 'John',
            'last_name' => 'Doe',
            'address_line_1' => 'Test Street 123',
            'city' => 'Vilnius',
            'postal_code' => 'LT-01234',
            'is_default' => true,
        ]);
    }

    public function test_address_belongs_to_user(): void
    {
        $user = User::factory()->create();
        $address = Address::factory()->create(['user_id' => $user->id]);

        $this->assertInstanceOf(User::class, $address->user);
        $this->assertEquals($user->id, $address->user->id);
    }

    public function test_address_belongs_to_country(): void
    {
        $country = Country::factory()->create(['is_active' => true]);
        $address = Address::factory()->create(['country_id' => $country->id]);

        $this->assertInstanceOf(Country::class, $address->countryById);
        $this->assertEquals($country->id, $address->countryById->id);
    }

    public function test_address_belongs_to_country_by_code(): void
    {
        $country = Country::factory()->create(['is_active' => true]);
        $address = Address::factory()->create(['country_code' => $country->cca2]);

        $this->assertInstanceOf(Country::class, $address->country);
        $this->assertEquals($country->id, $address->country->id);
    }

    // Region functionality removed - test disabled
    // public function test_address_belongs_to_region(): void
    // {
    //     $region = Region::factory()->enabled()->create();
    //     $address = Address::factory()->create(['region_id' => $region->id]);
    //
    //     $this->assertInstanceOf(Region::class, $address->region);
    //     $this->assertEquals($region->id, $address->region->id);
    // }

    public function test_address_belongs_to_city(): void
    {
        $city = City::factory()->enabled()->create();
        $address = Address::factory()->create(['city_id' => $city->id]);

        $this->assertInstanceOf(City::class, $address->cityById);
        $this->assertEquals($city->id, $address->cityById->id);
    }

    public function test_address_belongs_to_zone(): void
    {
        $zone = Zone::factory()->active()->enabled()->create();
        $address = Address::factory()->create(['zone_id' => $zone->id]);

        $this->assertInstanceOf(Zone::class, $address->zone);
        $this->assertEquals($zone->id, $address->zone->id);
    }

    public function test_address_casts_work_correctly(): void
    {
        $address = Address::factory()->create([
            'is_default' => true,
            'is_billing' => true,
            'is_shipping' => false,
            'is_active' => true,
            'type' => AddressType::SHIPPING,
        ]);

        $this->assertIsBool($address->is_default);
        $this->assertIsBool($address->is_billing);
        $this->assertIsBool($address->is_shipping);
        $this->assertIsBool($address->is_active);
        $this->assertInstanceOf(AddressType::class, $address->type);
        $this->assertEquals(AddressType::SHIPPING, $address->type);
    }

    public function test_address_fillable_attributes(): void
    {
        $address = new Address;
        $fillable = $address->getFillable();

        $this->assertContains('user_id', $fillable);
        $this->assertContains('type', $fillable);
        $this->assertContains('first_name', $fillable);
        $this->assertContains('last_name', $fillable);
        $this->assertContains('address_line_1', $fillable);
        $this->assertContains('city', $fillable);
        $this->assertContains('postal_code', $fillable);
        $this->assertContains('is_default', $fillable);
        $this->assertContains('is_billing', $fillable);
        $this->assertContains('is_shipping', $fillable);
        $this->assertContains('is_active', $fillable);
    }

    public function test_address_scope_shipping(): void
    {
        $shippingAddress = Address::factory()->create([
            'is_shipping' => true,
            'is_billing' => false,
        ]);
        $billingAddress = Address::factory()->create([
            'is_billing' => true,
            'is_shipping' => false,
        ]);

        $shippingAddresses = Address::shipping()->get();

        $this->assertTrue($shippingAddresses->contains($shippingAddress));
        $this->assertFalse($shippingAddresses->contains($billingAddress));
    }

    public function test_address_scope_billing(): void
    {
        $shippingAddress = Address::factory()->create([
            'is_shipping' => true,
            'is_billing' => false,
        ]);
        $billingAddress = Address::factory()->create([
            'is_billing' => true,
            'is_shipping' => false,
        ]);

        $billingAddresses = Address::billing()->get();

        $this->assertFalse($billingAddresses->contains($shippingAddress));
        $this->assertTrue($billingAddresses->contains($billingAddress));
    }

    public function test_address_scope_default(): void
    {
        $defaultAddress = Address::factory()->create(['is_default' => true]);
        $nonDefaultAddress = Address::factory()->create(['is_default' => false]);

        $defaultAddresses = Address::default()->get();

        $this->assertTrue($defaultAddresses->contains($defaultAddress));
        $this->assertFalse($defaultAddresses->contains($nonDefaultAddress));
    }

    public function test_address_scope_active(): void
    {
        $activeAddress = Address::factory()->create(['is_active' => true]);
        $inactiveAddress = Address::factory()->create(['is_active' => false]);

        $activeAddresses = Address::active()->get();

        $this->assertTrue($activeAddresses->contains($activeAddress));
        $this->assertFalse($activeAddresses->contains($inactiveAddress));
    }

    public function test_address_scope_for_user(): void
    {
        $user1 = User::factory()->create();
        $user2 = User::factory()->create();

        $address1 = Address::factory()->create(['user_id' => $user1->id]);
        $address2 = Address::factory()->create(['user_id' => $user2->id]);

        $user1Addresses = Address::forUser($user1->id)->get();

        $this->assertTrue($user1Addresses->contains($address1));
        $this->assertFalse($user1Addresses->contains($address2));
    }

    public function test_address_scope_by_type(): void
    {
        $shippingAddress = Address::factory()->create(['type' => AddressType::SHIPPING]);
        $billingAddress = Address::factory()->create(['type' => AddressType::BILLING]);

        $shippingAddresses = Address::byType(AddressType::SHIPPING->value)->get();

        $this->assertTrue($shippingAddresses->contains($shippingAddress));
        $this->assertFalse($shippingAddresses->contains($billingAddress));
    }

    public function test_address_scope_by_country(): void
    {
        $ltAddress = Address::factory()->create(['country_code' => 'LT']);
        $lvAddress = Address::factory()->create(['country_code' => 'LV']);

        $ltAddresses = Address::byCountry('LT')->get();

        $this->assertTrue($ltAddresses->contains($ltAddress));
        $this->assertFalse($ltAddresses->contains($lvAddress));
    }

    public function test_address_scope_by_city(): void
    {
        $vilniusAddress = Address::factory()->create(['city' => 'Vilnius']);
        $kaunasAddress = Address::factory()->create(['city' => 'Kaunas']);

        $vilniusAddresses = Address::byCity('Vilnius')->get();

        $this->assertTrue($vilniusAddresses->contains($vilniusAddress));
        $this->assertFalse($vilniusAddresses->contains($kaunasAddress));
    }

    public function test_address_can_have_company_information(): void
    {
        $address = Address::factory()->create([
            'company_name' => 'Test Company',
            'company_vat' => 'LT123456789',
        ]);

        $this->assertEquals('Test Company', $address->company_name);
        $this->assertEquals('LT123456789', $address->company_vat);
        $this->assertTrue($address->hasCompany());
    }

    public function test_address_can_have_contact_information(): void
    {
        $address = Address::factory()->create([
            'first_name' => 'John',
            'last_name' => 'Doe',
            'phone' => '+37012345678',
            'email' => 'john.doe@example.com',
        ]);

        $this->assertEquals('John', $address->first_name);
        $this->assertEquals('Doe', $address->last_name);
        $this->assertEquals('+37012345678', $address->phone);
        $this->assertEquals('john.doe@example.com', $address->email);
    }

    public function test_address_can_have_additional_information(): void
    {
        $address = Address::factory()->create([
            'apartment' => 'Apt 5B',
            'floor' => '3rd Floor',
            'building' => 'Building A',
            'landmark' => 'Near the shopping center',
            'instructions' => 'Ring the doorbell twice',
        ]);

        $this->assertEquals('Apt 5B', $address->apartment);
        $this->assertEquals('3rd Floor', $address->floor);
        $this->assertEquals('Building A', $address->building);
        $this->assertEquals('Near the shopping center', $address->landmark);
        $this->assertEquals('Ring the doorbell twice', $address->instructions);
        $this->assertTrue($address->hasAdditionalInfo());
    }

    public function test_address_can_get_full_address(): void
    {
        $address = Address::factory()->create([
            'address_line_1' => 'Test Street 123',
            'apartment' => 'Apt 5B',
            'city' => 'Vilnius',
            'postal_code' => 'LT-01234',
        ]);

        $fullAddress = $address->full_address;

        $this->assertStringContainsString('Test Street 123', $fullAddress);
        $this->assertStringContainsString('Apt 5B', $fullAddress);
        $this->assertStringContainsString('Vilnius', $fullAddress);
        $this->assertStringContainsString('LT-01234', $fullAddress);
    }

    public function test_address_can_get_full_name(): void
    {
        $address = Address::factory()->create([
            'first_name' => 'John',
            'last_name' => 'Doe',
        ]);

        $fullName = $address->full_name;

        $this->assertEquals('John Doe', $fullName);
    }

    public function test_address_can_get_display_name(): void
    {
        $address = Address::factory()->create([
            'first_name' => 'John',
            'last_name' => 'Doe',
            'company_name' => 'Test Company',
        ]);

        $displayName = $address->display_name;

        $this->assertEquals('John Doe (Test Company)', $displayName);
    }

    public function test_address_can_get_formatted_address(): void
    {
        $country = Country::factory()->create(['name' => 'Lithuania']);
        $address = Address::factory()->create([
            'first_name' => 'John',
            'last_name' => 'Doe',
            'company_name' => 'Test Company',
            'address_line_1' => 'Test Street 123',
            'address_line_2' => null, // Ensure no extra address line
            'apartment' => 'Apt 5B',
            'floor' => null, // Ensure no floor
            'building' => null, // Ensure no building
            'city' => 'Vilnius',
            'state' => null, // Ensure no state
            'postal_code' => 'LT-01234',
            'country_code' => $country->cca2,
        ]);

        $formattedAddress = $address->formatted_address;

        $this->assertStringContainsString('Test Company', $formattedAddress);
        $this->assertStringContainsString('John Doe', $formattedAddress);
        $this->assertStringContainsString('Test Street 123', $formattedAddress);
        $this->assertStringContainsString('Apt 5B', $formattedAddress);
        $this->assertStringContainsString('Vilnius, LT-01234', $formattedAddress);
        $this->assertStringContainsString('Lithuania', $formattedAddress);
    }

    public function test_address_type_attributes(): void
    {
        $address = Address::factory()->create(['type' => AddressType::SHIPPING]);

        $this->assertEquals(AddressType::SHIPPING->label(), $address->type_label);
        $this->assertEquals(AddressType::SHIPPING->icon(), $address->type_icon);
        $this->assertEquals(AddressType::SHIPPING->color(), $address->type_color);
    }

    public function test_address_type_checking_methods(): void
    {
        $shippingAddress = Address::factory()->create([
            'type' => AddressType::SHIPPING,
            'is_shipping' => true,
            'is_billing' => false,
        ]);
        $billingAddress = Address::factory()->create([
            'type' => AddressType::BILLING,
            'is_shipping' => false,
            'is_billing' => true,
        ]);
        $defaultAddress = Address::factory()->create(['is_default' => true]);
        $activeAddress = Address::factory()->create(['is_active' => true]);

        $this->assertTrue($shippingAddress->isShipping());
        $this->assertFalse($shippingAddress->isBilling());
        $this->assertTrue($billingAddress->isBilling());
        $this->assertFalse($billingAddress->isShipping());
        $this->assertTrue($defaultAddress->isDefault());
        $this->assertTrue($activeAddress->isActive());
    }

    public function test_address_validation_rules(): void
    {
        $address = new Address;
        $rules = $address->getValidationRules();

        $this->assertArrayHasKey('user_id', $rules);
        $this->assertArrayHasKey('type', $rules);
        $this->assertArrayHasKey('first_name', $rules);
        $this->assertArrayHasKey('last_name', $rules);
        $this->assertArrayHasKey('address_line_1', $rules);
        $this->assertArrayHasKey('city', $rules);
        $this->assertArrayHasKey('postal_code', $rules);
        $this->assertArrayHasKey('country_code', $rules);
    }

    public function test_address_static_methods(): void
    {
        $user = User::factory()->create();

        // Create test addresses manually to avoid factory issues
        $defaultAddress = new Address([
            'user_id' => $user->id,
            'first_name' => 'John',
            'last_name' => 'Doe',
            'address_line_1' => '123 Main St',
            'city' => 'Test City',
            'postal_code' => '12345',
            'country_code' => 'US',
            'is_default' => true,
            'is_billing' => false,
            'is_shipping' => false,
            'is_active' => true,
        ]);
        $defaultAddress->save();

        $billingAddress = new Address([
            'user_id' => $user->id,
            'first_name' => 'Jane',
            'last_name' => 'Doe',
            'address_line_1' => '456 Billing St',
            'city' => 'Billing City',
            'postal_code' => '54321',
            'country_code' => 'US',
            'is_default' => false,
            'is_billing' => true,
            'is_shipping' => false,
            'is_active' => true,
        ]);
        $billingAddress->save();

        $shippingAddress = new Address([
            'user_id' => $user->id,
            'first_name' => 'Bob',
            'last_name' => 'Smith',
            'address_line_1' => '789 Shipping St',
            'city' => 'Shipping City',
            'postal_code' => '98765',
            'country_code' => 'US',
            'is_default' => false,
            'is_billing' => false,
            'is_shipping' => true,
            'is_active' => true,
        ]);
        $shippingAddress->save();

        // Test static methods
        $this->assertEquals($defaultAddress->id, Address::getDefaultAddressForUser($user->id)->id);
        $this->assertEquals($billingAddress->id, Address::getBillingAddressForUser($user->id)->id);
        $this->assertEquals($shippingAddress->id, Address::getShippingAddressForUser($user->id)->id);

        $userAddresses = Address::getAddressesForUser($user->id);
        $this->assertCount(3, $userAddresses);
        $this->assertTrue($userAddresses->contains($defaultAddress));
        $this->assertTrue($userAddresses->contains($billingAddress));
        $this->assertTrue($userAddresses->contains($shippingAddress));
    }

    public function test_address_set_as_default(): void
    {
        $user = User::factory()->create();

        $address1 = Address::factory()->create([
            'user_id' => $user->id,
            'is_default' => true,
        ]);

        $address2 = Address::factory()->create([
            'user_id' => $user->id,
            'is_default' => false,
        ]);

        // Set address2 as default
        $result = $address2->setAsDefault();

        $this->assertTrue($result);
        $this->assertTrue($address2->fresh()->is_default);
        $this->assertFalse($address1->fresh()->is_default);
    }

    public function test_address_duplicate_for_user(): void
    {
        $user1 = User::factory()->create();
        $user2 = User::factory()->create();

        $originalAddress = Address::factory()->create([
            'user_id' => $user1->id,
            'is_default' => true,
        ]);

        $duplicatedAddress = $originalAddress->duplicateForUser($user2->id);

        $this->assertNotEquals($originalAddress->id, $duplicatedAddress->id);
        $this->assertEquals($user2->id, $duplicatedAddress->user_id);
        $this->assertFalse($duplicatedAddress->is_default);
        $this->assertEquals($originalAddress->first_name, $duplicatedAddress->first_name);
        $this->assertEquals($originalAddress->last_name, $duplicatedAddress->last_name);
        $this->assertEquals($originalAddress->address_line_1, $duplicatedAddress->address_line_1);
    }

    public function test_address_types_for_select(): void
    {
        $types = Address::getTypesForSelect();

        $this->assertIsArray($types);
        $this->assertArrayHasKey(AddressType::SHIPPING->value, $types);
        $this->assertArrayHasKey(AddressType::BILLING->value, $types);
        $this->assertArrayHasKey(AddressType::HOME->value, $types);
        $this->assertArrayHasKey(AddressType::WORK->value, $types);
        $this->assertArrayHasKey(AddressType::OTHER->value, $types);
    }

    public function test_address_types_with_descriptions(): void
    {
        $types = Address::getTypesWithDescriptions();

        $this->assertIsArray($types);
        $this->assertArrayHasKey(AddressType::SHIPPING->value, $types);
        $this->assertArrayHasKey('label', $types[AddressType::SHIPPING->value]);
        $this->assertArrayHasKey('description', $types[AddressType::SHIPPING->value]);
        $this->assertArrayHasKey('icon', $types[AddressType::SHIPPING->value]);
        $this->assertArrayHasKey('color', $types[AddressType::SHIPPING->value]);
    }
}
