<?php

declare(strict_types=1);

namespace Tests\Unit;

use App\Models\Collection;
use App\Models\Product;
use App\Models\Translations\CollectionTranslation;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Cache;
use Tests\TestCase;

final class CollectionModelTest extends TestCase
{
    use RefreshDatabase;

    public function test_collection_can_be_created_with_factory(): void
    {
        $collection = Collection::factory()->create();

        $this->assertInstanceOf(Collection::class, $collection);
        $this->assertDatabaseHas('collections', [
            'id' => $collection->id,
        ]);
    }

    public function test_collection_fillable_attributes(): void
    {
        $collection = Collection::factory()->create([
            'name' => 'Test Collection',
            'slug' => 'test-collection',
            'description' => 'Test description',
            'is_visible' => true,
            'is_automatic' => false,
            'sort_order' => 1,
            'seo_title' => 'SEO Title',
            'seo_description' => 'SEO Description',
            'is_active' => true,
            'meta_title' => 'Meta Title',
            'meta_description' => 'Meta Description',
            'meta_keywords' => ['keyword1', 'keyword2'],
            'display_type' => 'grid',
            'products_per_page' => 12,
            'show_filters' => true,
        ]);

        $this->assertEquals('Test Collection', $collection->name);
        $this->assertEquals('test-collection', $collection->slug);
        $this->assertEquals('Test description', $collection->description);
        $this->assertTrue($collection->is_visible);
        $this->assertFalse($collection->is_automatic);
        $this->assertEquals(1, $collection->sort_order);
        $this->assertEquals('SEO Title', $collection->seo_title);
        $this->assertEquals('SEO Description', $collection->seo_description);
        $this->assertTrue($collection->is_active);
        $this->assertEquals('Meta Title', $collection->meta_title);
        $this->assertEquals('Meta Description', $collection->meta_description);
        $this->assertEquals(['keyword1', 'keyword2'], $collection->meta_keywords);
        $this->assertEquals('grid', $collection->display_type);
        $this->assertEquals(12, $collection->products_per_page);
        $this->assertTrue($collection->show_filters);
    }

    public function test_collection_casts_are_applied_correctly(): void
    {
        $collection = Collection::factory()->create([
            'is_visible' => '1',
            'is_automatic' => '0',
            'sort_order' => '5',
            'is_active' => '1',
            'products_per_page' => '20',
            'show_filters' => '1',
            'meta_keywords' => ['keyword1', 'keyword2'],
        ]);

        $this->assertIsBool($collection->is_visible);
        $this->assertIsBool($collection->is_automatic);
        $this->assertIsInt($collection->sort_order);
        $this->assertIsBool($collection->is_active);
        $this->assertIsInt($collection->products_per_page);
        $this->assertIsBool($collection->show_filters);
        $this->assertIsArray($collection->meta_keywords);
    }

    public function test_collection_uses_slug_as_route_key(): void
    {
        $collection = Collection::factory()->create(['slug' => 'test-collection']);

        $this->assertEquals('slug', $collection->getRouteKeyName());
        $this->assertEquals('test-collection', $collection->getRouteKey());
    }

    public function test_collection_visible_scope(): void
    {
        $visibleCollection = Collection::factory()->create(['is_visible' => true]);
        $hiddenCollection = Collection::factory()->create(['is_visible' => false]);

        $visibleCollections = Collection::visible()->get();

        $this->assertTrue($visibleCollections->contains($visibleCollection));
        $this->assertFalse($visibleCollections->contains($hiddenCollection));
    }

    public function test_collection_manual_scope(): void
    {
        $manualCollection = Collection::factory()->create(['is_automatic' => false]);
        $automaticCollection = Collection::factory()->create(['is_automatic' => true]);

        $manualCollections = Collection::manual()->get();

        $this->assertTrue($manualCollections->contains($manualCollection));
        $this->assertFalse($manualCollections->contains($automaticCollection));
    }

    public function test_collection_automatic_scope(): void
    {
        $manualCollection = Collection::factory()->create(['is_automatic' => false]);
        $automaticCollection = Collection::factory()->create(['is_automatic' => true]);

        $automaticCollections = Collection::automatic()->get();

        $this->assertTrue($automaticCollections->contains($automaticCollection));
        $this->assertFalse($automaticCollections->contains($manualCollection));
    }

    public function test_collection_ordered_scope(): void
    {
        $collection1 = Collection::factory()->create(['sort_order' => 3]);
        $collection2 = Collection::factory()->create(['sort_order' => 1]);
        $collection3 = Collection::factory()->create(['sort_order' => 2]);

        $orderedCollections = Collection::ordered()->get();

        $this->assertEquals($collection2->id, $orderedCollections->first()->id);
        $this->assertEquals($collection3->id, $orderedCollections->skip(1)->first()->id);
        $this->assertEquals($collection1->id, $orderedCollections->last()->id);
    }

    public function test_collection_products_relationship(): void
    {
        $collection = Collection::factory()->create();
        $product1 = Product::factory()->create();
        $product2 = Product::factory()->create();

        $collection->products()->attach([$product1->id, $product2->id]);

        $this->assertCount(2, $collection->products);
        $this->assertTrue($collection->products->contains($product1));
        $this->assertTrue($collection->products->contains($product2));
    }

    public function test_collection_products_count_accessor(): void
    {
        $collection = Collection::factory()->create();
        $product1 = Product::factory()->create();
        $product2 = Product::factory()->create();

        $collection->products()->attach([$product1->id, $product2->id]);

        $this->assertEquals(2, $collection->products_count);
    }

    public function test_collection_translations_relationship(): void
    {
        $collection = Collection::factory()->create();
        $translation = CollectionTranslation::factory()->create([
            'collection_id' => $collection->id,
            'locale' => 'en',
            'name' => 'English Name',
            'description' => 'English Description',
        ]);

        $this->assertCount(1, $collection->translations);
        $this->assertTrue($collection->translations->contains($translation));
    }

    public function test_collection_trans_method(): void
    {
        $collection = Collection::factory()->create(['name' => 'Default Name']);

        CollectionTranslation::factory()->create([
            'collection_id' => $collection->id,
            'locale' => 'en',
            'name' => 'English Name',
            'description' => 'English Description',
        ]);

        CollectionTranslation::factory()->create([
            'collection_id' => $collection->id,
            'locale' => 'lt',
            'name' => 'Lithuanian Name',
            'description' => 'Lithuanian Description',
        ]);

        app()->setLocale('en');
        $this->assertEquals('English Name', $collection->trans('name'));
        $this->assertEquals('English Description', $collection->trans('description'));

        app()->setLocale('lt');
        $this->assertEquals('Lithuanian Name', $collection->trans('name'));
        $this->assertEquals('Lithuanian Description', $collection->trans('description'));
    }

    public function test_collection_trans_method_fallback_to_default(): void
    {
        $collection = Collection::factory()->create(['name' => 'Default Name']);

        CollectionTranslation::factory()->create([
            'collection_id' => $collection->id,
            'locale' => 'en',
            'name' => 'English Name',
        ]);

        app()->setLocale('lt');
        $this->assertEquals('Default Name', $collection->trans('name'));
    }

    public function test_collection_is_manual_helper(): void
    {
        $manualCollection = Collection::factory()->create(['is_automatic' => false]);
        $automaticCollection = Collection::factory()->create(['is_automatic' => true]);

        $this->assertTrue($manualCollection->isManual());
        $this->assertFalse($automaticCollection->isManual());
    }

    public function test_collection_is_automatic_helper(): void
    {
        $manualCollection = Collection::factory()->create(['is_automatic' => false]);
        $automaticCollection = Collection::factory()->create(['is_automatic' => true]);

        $this->assertFalse($manualCollection->isAutomatic());
        $this->assertTrue($automaticCollection->isAutomatic());
    }

    public function test_collection_cache_flush_on_save(): void
    {
        Cache::put('sitemap:urls:en', 'test-data');
        Cache::put('sitemap:urls:lt', 'test-data');

        $collection = Collection::factory()->create();

        $this->assertNull(Cache::get('sitemap:urls:en'));
        $this->assertNull(Cache::get('sitemap:urls:lt'));
    }

    public function test_collection_cache_flush_on_delete(): void
    {
        Cache::put('sitemap:urls:en', 'test-data');
        Cache::put('sitemap:urls:lt', 'test-data');

        $collection = Collection::factory()->create();
        $collection->delete();

        $this->assertNull(Cache::get('sitemap:urls:en'));
        $this->assertNull(Cache::get('sitemap:urls:lt'));
    }

    public function test_collection_soft_deletes(): void
    {
        $collection = Collection::factory()->create();
        $collectionId = $collection->id;

        $collection->delete();

        $this->assertSoftDeleted('collections', ['id' => $collectionId]);
        $this->assertNull(Collection::find($collectionId));
        $this->assertNotNull(Collection::withTrashed()->find($collectionId));
    }

    public function test_collection_media_relationship(): void
    {
        $collection = Collection::factory()->create();

        $this->assertInstanceOf(\Spatie\MediaLibrary\HasMedia::class, $collection);
    }

    public function test_collection_appends_attributes(): void
    {
        $collection = Collection::factory()->create();
        $product = Product::factory()->create();
        $collection->products()->attach($product->id);

        $collectionArray = $collection->toArray();

        $this->assertArrayHasKey('products_count', $collectionArray);
        $this->assertArrayHasKey('image', $collectionArray);
    }

    public function test_collection_with_translations_scope(): void
    {
        $collection = Collection::factory()->create();
        CollectionTranslation::factory()->create([
            'collection_id' => $collection->id,
            'locale' => 'en',
            'name' => 'English Name',
        ]);

        $collections = Collection::withTranslations()->get();

        $this->assertTrue($collections->first()->relationLoaded('translations'));
    }

    public function test_collection_active_scope(): void
    {
        $activeCollection = Collection::factory()->create(['is_active' => true]);
        $inactiveCollection = Collection::factory()->create(['is_active' => false]);

        $activeCollections = Collection::active()->get();

        $this->assertTrue($activeCollections->contains($activeCollection));
        $this->assertFalse($activeCollections->contains($inactiveCollection));
    }

    public function test_collection_has_products_scope(): void
    {
        $collectionWithProducts = Collection::factory()->create();
        $collectionWithoutProducts = Collection::factory()->create();

        $product = Product::factory()->create();
        $collectionWithProducts->products()->attach($product->id);

        $collectionsWithProducts = Collection::hasProducts()->get();

        $this->assertTrue($collectionsWithProducts->contains($collectionWithProducts));
        $this->assertFalse($collectionsWithProducts->contains($collectionWithoutProducts));
    }

    public function test_collection_search_scope(): void
    {
        $collection1 = Collection::factory()->create(['name' => 'Summer Collection']);
        $collection2 = Collection::factory()->create(['name' => 'Winter Collection']);
        $collection3 = Collection::factory()->create(['description' => 'Summer tools and equipment']);

        $searchResults = Collection::search('Summer')->get();

        $this->assertTrue($searchResults->contains($collection1));
        $this->assertFalse($searchResults->contains($collection2));
        $this->assertTrue($searchResults->contains($collection3));
    }

    public function test_collection_by_display_type_scope(): void
    {
        $gridCollection = Collection::factory()->create(['display_type' => 'grid']);
        $listCollection = Collection::factory()->create(['display_type' => 'list']);

        $gridCollections = Collection::byDisplayType('grid')->get();

        $this->assertTrue($gridCollections->contains($gridCollection));
        $this->assertFalse($gridCollections->contains($listCollection));
    }

    public function test_collection_with_products_count_scope(): void
    {
        $collection1 = Collection::factory()->create();
        $collection2 = Collection::factory()->create();

        $product1 = Product::factory()->create();
        $product2 = Product::factory()->create();
        $product3 = Product::factory()->create();

        $collection1->products()->attach([$product1->id, $product2->id]);
        $collection2->products()->attach($product3->id);

        $collections = Collection::withProductsCount()->get();

        $this->assertTrue($collections->first()->relationLoaded('products'));
    }

    public function test_collection_meta_keywords_can_be_array(): void
    {
        $keywords = ['keyword1', 'keyword2', 'keyword3'];
        $collection = Collection::factory()->create(['meta_keywords' => $keywords]);

        $this->assertEquals($keywords, $collection->meta_keywords);
        $this->assertIsArray($collection->meta_keywords);
    }

    public function test_collection_rules_can_be_array(): void
    {
        $rules = [
            'category' => 'tools',
            'brand' => 'bosch',
            'price_min' => 100,
        ];
        $collection = Collection::factory()->create(['rules' => $rules]);

        $this->assertEquals($rules, $collection->rules);
        $this->assertIsArray($collection->rules);
    }
}
