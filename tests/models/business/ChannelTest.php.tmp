<?php

declare(strict_types=1);

namespace Tests\Unit;

use App\Models\Channel;
use App\Models\Product;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class ChannelTest extends TestCase
{
    use RefreshDatabase;

    public function test_channel_can_be_created(): void
    {
        $channel = Channel::factory()->create([
            'name' => 'Online Store',
            'is_enabled' => true,
        ]);

        $this->assertDatabaseHas('channels', [
            'name' => 'Online Store',
            'is_enabled' => true,
        ]);
    }

    public function test_channel_casts_work_correctly(): void
    {
        $channel = Channel::factory()->create([
            'is_enabled' => true,
            'is_default' => false,
            'created_at' => now(),
        ]);

        $this->assertIsBool($channel->is_enabled);
        $this->assertIsBool($channel->is_default);
        $this->assertInstanceOf(\Carbon\Carbon::class, $channel->created_at);
    }

    public function test_channel_fillable_attributes(): void
    {
        $channel = new Channel;
        $fillable = $channel->getFillable();

        $this->assertContains('name', $fillable);
        $this->assertContains('slug', $fillable);
        $this->assertContains('url', $fillable);
        $this->assertContains('is_enabled', $fillable);
    }

    public function test_channel_scope_enabled(): void
    {
        $activeChannel = Channel::factory()->create(['is_enabled' => true]);
        $inactiveChannel = Channel::factory()->create(['is_enabled' => false]);

        $activeChannels = Channel::enabled()->get();

        $this->assertTrue($activeChannels->contains($activeChannel));
        $this->assertFalse($activeChannels->contains($inactiveChannel));
    }

    public function test_channel_scope_default(): void
    {
        $defaultChannel = Channel::factory()->create(['is_default' => true]);
        $nonDefaultChannel = Channel::factory()->create(['is_default' => false]);

        $defaultChannels = Channel::default()->get();

        $this->assertTrue($defaultChannels->contains($defaultChannel));
        $this->assertFalse($defaultChannels->contains($nonDefaultChannel));
    }

    public function test_channel_scope_by_type(): void
    {
        $webChannel = Channel::factory()->create(['type' => 'web']);
        $mobileChannel = Channel::factory()->create(['type' => 'mobile']);

        $webChannels = Channel::byType('web')->get();

        $this->assertTrue($webChannels->contains($webChannel));
        $this->assertFalse($webChannels->contains($mobileChannel));
    }

    public function test_channel_scope_ordered(): void
    {
        $channel1 = Channel::factory()->create(['sort_order' => 2]);
        $channel2 = Channel::factory()->create(['sort_order' => 1]);
        $channel3 = Channel::factory()->create(['sort_order' => 3]);

        $orderedChannels = Channel::ordered()->get();

        $this->assertEquals($channel2->id, $orderedChannels->first()->id);
        $this->assertEquals($channel3->id, $orderedChannels->last()->id);
    }

    public function test_channel_can_have_products(): void
    {
        $channel = Channel::factory()->create();
        $products = Product::factory()->count(3)->create();

        $channel->products()->attach($products->pluck('id'));

        $this->assertCount(3, $channel->products);
        $this->assertInstanceOf(Product::class, $channel->products->first());
    }

    public function test_channel_can_have_description(): void
    {
        $channel = Channel::factory()->create([
            'description' => 'Main online store channel',
        ]);

        $this->assertEquals('Main online store channel', $channel->description);
    }

    public function test_channel_can_have_configuration(): void
    {
        $channel = Channel::factory()->create([
            'configuration' => [
                'theme' => 'default',
                'currency' => 'EUR',
                'language' => 'lt',
                'timezone' => 'Europe/Vilnius',
            ],
        ]);

        $this->assertIsArray($channel->configuration);
        $this->assertEquals('default', $channel->configuration['theme']);
        $this->assertEquals('EUR', $channel->configuration['currency']);
        $this->assertEquals('lt', $channel->configuration['language']);
        $this->assertEquals('Europe/Vilnius', $channel->configuration['timezone']);
    }

    public function test_channel_can_have_domain(): void
    {
        $channel = Channel::factory()->create([
            'domain' => 'store.example.com',
        ]);

        $this->assertEquals('store.example.com', $channel->domain);
    }

    public function test_channel_can_have_ssl_enabled(): void
    {
        $channel = Channel::factory()->create([
            'ssl_enabled' => true,
        ]);

        $this->assertTrue($channel->ssl_enabled);
    }

    public function test_channel_can_have_meta_information(): void
    {
        $channel = Channel::factory()->create([
            'meta_title' => 'Online Store - Channel Title',
            'meta_description' => 'Channel description for SEO',
            'meta_keywords' => 'store, online, shopping',
        ]);

        $this->assertEquals('Online Store - Channel Title', $channel->meta_title);
        $this->assertEquals('Channel description for SEO', $channel->meta_description);
        $this->assertEquals('store, online, shopping', $channel->meta_keywords);
    }

    public function test_channel_can_have_analytics_settings(): void
    {
        $channel = Channel::factory()->create([
            'analytics_tracking_id' => 'GA-123456789',
            'analytics_enabled' => true,
        ]);

        $this->assertEquals('GA-123456789', $channel->analytics_tracking_id);
        $this->assertTrue($channel->analytics_enabled);
    }

    public function test_channel_can_have_payment_settings(): void
    {
        $channel = Channel::factory()->create([
            'payment_methods' => ['credit_card', 'paypal', 'bank_transfer'],
            'default_payment_method' => 'credit_card',
        ]);

        $this->assertIsArray($channel->payment_methods);
        $this->assertContains('credit_card', $channel->payment_methods);
        $this->assertContains('paypal', $channel->payment_methods);
        $this->assertContains('bank_transfer', $channel->payment_methods);
        $this->assertEquals('credit_card', $channel->default_payment_method);
    }

    public function test_channel_can_have_shipping_settings(): void
    {
        $channel = Channel::factory()->create([
            'shipping_methods' => ['standard', 'express', 'overnight'],
            'default_shipping_method' => 'standard',
            'free_shipping_threshold' => 100.00,
        ]);

        $this->assertIsArray($channel->shipping_methods);
        $this->assertContains('standard', $channel->shipping_methods);
        $this->assertContains('express', $channel->shipping_methods);
        $this->assertContains('overnight', $channel->shipping_methods);
        $this->assertEquals('standard', $channel->default_shipping_method);
        $this->assertEquals(100.00, $channel->free_shipping_threshold);
    }

    public function test_channel_can_have_currency_settings(): void
    {
        $channel = Channel::factory()->create([
            'currency_code' => 'EUR',
            'currency_symbol' => '€',
            'currency_position' => 'after',
        ]);

        $this->assertEquals('EUR', $channel->currency_code);
        $this->assertEquals('€', $channel->currency_symbol);
        $this->assertEquals('after', $channel->currency_position);
    }

    public function test_channel_can_have_language_settings(): void
    {
        $channel = Channel::factory()->create([
            'default_language' => 'lt',
            'supported_languages' => ['lt', 'en', 'ru'],
        ]);

        $this->assertEquals('lt', $channel->default_language);
        $this->assertIsArray($channel->supported_languages);
        $this->assertContains('lt', $channel->supported_languages);
        $this->assertContains('en', $channel->supported_languages);
        $this->assertContains('ru', $channel->supported_languages);
    }

    public function test_channel_can_have_contact_information(): void
    {
        $channel = Channel::factory()->create([
            'contact_email' => 'support@example.com',
            'contact_phone' => '+37012345678',
            'contact_address' => 'Vilnius, Lithuania',
        ]);

        $this->assertEquals('support@example.com', $channel->contact_email);
        $this->assertEquals('+37012345678', $channel->contact_phone);
        $this->assertEquals('Vilnius, Lithuania', $channel->contact_address);
    }

    public function test_channel_can_have_social_media_links(): void
    {
        $channel = Channel::factory()->create([
            'social_media' => [
                'facebook' => 'https://facebook.com/example',
                'instagram' => 'https://instagram.com/example',
                'twitter' => 'https://twitter.com/example',
            ],
        ]);

        $this->assertIsArray($channel->social_media);
        $this->assertEquals('https://facebook.com/example', $channel->social_media['facebook']);
        $this->assertEquals('https://instagram.com/example', $channel->social_media['instagram']);
        $this->assertEquals('https://twitter.com/example', $channel->social_media['twitter']);
    }

    public function test_channel_can_have_legal_documents(): void
    {
        $channel = Channel::factory()->create([
            'legal_documents' => [
                'privacy_policy' => 'privacy-policy',
                'terms_of_service' => 'terms-of-service',
                'cookie_policy' => 'cookie-policy',
            ],
        ]);

        $this->assertIsArray($channel->legal_documents);
        $this->assertEquals('privacy-policy', $channel->legal_documents['privacy_policy']);
        $this->assertEquals('terms-of-service', $channel->legal_documents['terms_of_service']);
        $this->assertEquals('cookie-policy', $channel->legal_documents['cookie_policy']);
    }
}
