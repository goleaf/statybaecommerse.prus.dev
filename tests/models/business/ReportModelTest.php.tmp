<?php

declare(strict_types=1);

namespace Tests\Unit;

use App\Models\Report;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

final class ReportModelTest extends TestCase
{
    use RefreshDatabase;

    public function test_can_create_report(): void
    {
        $report = Report::factory()->create();

        $this->assertInstanceOf(Report::class, $report);
        $this->assertDatabaseHas('reports', ['id' => $report->id]);
    }

    public function test_report_has_translatable_fields(): void
    {
        $report = Report::factory()->create([
            'name' => ['lt' => 'Testas', 'en' => 'Test'],
            'description' => ['lt' => 'Aprašymas', 'en' => 'Description'],
        ]);

        $this->assertEquals('Testas', $report->getTranslation('name', 'lt'));
        $this->assertEquals('Test', $report->getTranslation('name', 'en'));
        $this->assertEquals('Aprašymas', $report->getTranslation('description', 'lt'));
        $this->assertEquals('Description', $report->getTranslation('description', 'en'));
    }

    public function test_report_belongs_to_generator(): void
    {
        $user = User::factory()->create();
        $report = Report::factory()->create(['generated_by' => $user->id]);

        $this->assertInstanceOf(User::class, $report->generator);
        $this->assertEquals($user->id, $report->generator->id);
    }

    public function test_report_has_many_documents(): void
    {
        $report = Report::factory()->create();

        $this->assertInstanceOf(\Illuminate\Database\Eloquent\Relations\MorphMany::class, $report->documents());
    }

    public function test_report_has_many_analytics_events(): void
    {
        $report = Report::factory()->create();

        $this->assertInstanceOf(\Illuminate\Database\Eloquent\Relations\HasMany::class, $report->analyticsEvents());
    }

    public function test_scope_by_type(): void
    {
        Report::factory()->create(['type' => 'sales']);
        Report::factory()->create(['type' => 'products']);

        $salesReports = Report::byType('sales')->get();
        $this->assertCount(1, $salesReports);
        $this->assertEquals('sales', $salesReports->first()->type);
    }

    public function test_scope_by_category(): void
    {
        Report::factory()->create(['category' => 'sales']);
        Report::factory()->create(['category' => 'marketing']);

        $salesReports = Report::byCategory('sales')->get();
        $this->assertCount(1, $salesReports);
        $this->assertEquals('sales', $salesReports->first()->category);
    }

    public function test_scope_active(): void
    {
        Report::factory()->create(['is_active' => true]);
        Report::factory()->create(['is_active' => false]);

        $activeReports = Report::active()->get();
        $this->assertCount(1, $activeReports);
        $this->assertTrue($activeReports->first()->is_active);
    }

    public function test_scope_public(): void
    {
        Report::factory()->create(['is_public' => true]);
        Report::factory()->create(['is_public' => false]);

        $publicReports = Report::public()->get();
        $this->assertCount(1, $publicReports);
        $this->assertTrue($publicReports->first()->is_public);
    }

    public function test_scope_scheduled(): void
    {
        Report::factory()->create(['is_scheduled' => true]);
        Report::factory()->create(['is_scheduled' => false]);

        $scheduledReports = Report::scheduled()->get();
        $this->assertCount(1, $scheduledReports);
        $this->assertTrue($scheduledReports->first()->is_scheduled);
    }

    public function test_scope_popular(): void
    {
        Report::factory()->create(['view_count' => 100]);
        Report::factory()->create(['view_count' => 50]);

        $popularReports = Report::popular()->get();
        $this->assertEquals(100, $popularReports->first()->view_count);
    }

    public function test_scope_recent(): void
    {
        $oldReport = Report::factory()->create();
        $oldReport->created_at = now()->subDays(10);
        $oldReport->save();

        $newReport = Report::factory()->create();

        $recentReports = Report::recent()->get();
        $this->assertEquals($newReport->id, $recentReports->first()->id);
    }

    public function test_increment_view_count(): void
    {
        $report = Report::factory()->create(['view_count' => 5]);

        $report->incrementViewCount();

        $report->refresh();
        $this->assertEquals(6, $report->view_count);
    }

    public function test_increment_download_count(): void
    {
        $report = Report::factory()->create(['download_count' => 3]);

        $report->incrementDownloadCount();

        $report->refresh();
        $this->assertEquals(4, $report->download_count);
    }

    public function test_is_generated(): void
    {
        $generatedReport = Report::factory()->create(['last_generated_at' => now()]);
        $ungeneratedReport = Report::factory()->create(['last_generated_at' => null]);

        $this->assertTrue($generatedReport->isGenerated());
        $this->assertFalse($ungeneratedReport->isGenerated());
    }

    public function test_is_scheduled(): void
    {
        $scheduledReport = Report::factory()->create(['is_scheduled' => true]);
        $unscheduledReport = Report::factory()->create(['is_scheduled' => false]);

        $this->assertTrue($scheduledReport->isScheduled());
        $this->assertFalse($unscheduledReport->isScheduled());
    }

    public function test_is_public(): void
    {
        $publicReport = Report::factory()->create(['is_public' => true]);
        $privateReport = Report::factory()->create(['is_public' => false]);

        $this->assertTrue($publicReport->isPublic());
        $this->assertFalse($privateReport->isPublic());
    }

    public function test_get_route_key_name(): void
    {
        $report = new Report;
        $this->assertEquals('slug', $report->getRouteKeyName());
    }

    public function test_get_report_types(): void
    {
        $report = new Report;
        $types = $report->getReportTypes();

        $this->assertIsArray($types);
        $this->assertArrayHasKey('sales', $types);
        $this->assertArrayHasKey('products', $types);
        $this->assertArrayHasKey('customers', $types);
    }

    public function test_get_report_categories(): void
    {
        $report = new Report;
        $categories = $report->getReportCategories();

        $this->assertIsArray($categories);
        $this->assertArrayHasKey('sales', $categories);
        $this->assertArrayHasKey('marketing', $categories);
        $this->assertArrayHasKey('operations', $categories);
    }

    public function test_get_date_ranges(): void
    {
        $report = new Report;
        $dateRanges = $report->getDateRanges();

        $this->assertIsArray($dateRanges);
        $this->assertArrayHasKey('today', $dateRanges);
        $this->assertArrayHasKey('last_30_days', $dateRanges);
        $this->assertArrayHasKey('custom', $dateRanges);
    }

    public function test_get_schedule_frequencies(): void
    {
        $report = new Report;
        $frequencies = $report->getScheduleFrequencies();

        $this->assertIsArray($frequencies);
        $this->assertArrayHasKey('daily', $frequencies);
        $this->assertArrayHasKey('weekly', $frequencies);
        $this->assertArrayHasKey('monthly', $frequencies);
    }
}
