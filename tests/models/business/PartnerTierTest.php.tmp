<?php

declare(strict_types=1);

namespace Tests\Unit;

use App\Models\Partner;
use App\Models\PartnerTier;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class PartnerTierTest extends TestCase
{
    use RefreshDatabase;

    public function test_partner_tier_can_be_created(): void
    {
        $tier = PartnerTier::factory()->create([
            'name' => 'Gold Partner',
            'code' => 'GOLD',
            'description' => 'Gold tier partners with premium benefits',
            'is_active' => true,
        ]);

        $this->assertDatabaseHas('partner_tiers', [
            'name' => 'Gold Partner',
            'code' => 'GOLD',
            'description' => 'Gold tier partners with premium benefits',
            'is_active' => true,
        ]);
    }

    public function test_partner_tier_casts_work_correctly(): void
    {
        $tier = PartnerTier::factory()->create([
            'is_active' => true,
            'is_default' => false,
            'sort_order' => 5,
            'created_at' => now(),
        ]);

        $this->assertIsBool($tier->is_active);
        $this->assertIsBool($tier->is_default);
        $this->assertIsInt($tier->sort_order);
        $this->assertInstanceOf(\Carbon\Carbon::class, $tier->created_at);
    }

    public function test_partner_tier_fillable_attributes(): void
    {
        $tier = new PartnerTier;
        $fillable = $tier->getFillable();

        $this->assertContains('name', $fillable);
        $this->assertContains('code', $fillable);
        $this->assertContains('description', $fillable);
        $this->assertContains('is_active', $fillable);
    }

    public function test_partner_tier_scope_active(): void
    {
        $activeTier = PartnerTier::factory()->create(['is_active' => true]);
        $inactiveTier = PartnerTier::factory()->create(['is_active' => false]);

        $activeTiers = PartnerTier::active()->get();

        $this->assertTrue($activeTiers->contains($activeTier));
        $this->assertFalse($activeTiers->contains($inactiveTier));
    }

    public function test_partner_tier_scope_default(): void
    {
        $defaultTier = PartnerTier::factory()->create(['is_default' => true]);
        $nonDefaultTier = PartnerTier::factory()->create(['is_default' => false]);

        $defaultTiers = PartnerTier::default()->get();

        $this->assertTrue($defaultTiers->contains($defaultTier));
        $this->assertFalse($defaultTiers->contains($nonDefaultTier));
    }

    public function test_partner_tier_scope_ordered(): void
    {
        $tier1 = PartnerTier::factory()->create(['sort_order' => 2]);
        $tier2 = PartnerTier::factory()->create(['sort_order' => 1]);
        $tier3 = PartnerTier::factory()->create(['sort_order' => 3]);

        $orderedTiers = PartnerTier::ordered()->get();

        $this->assertEquals($tier2->id, $orderedTiers->first()->id);
        $this->assertEquals($tier3->id, $orderedTiers->last()->id);
    }

    public function test_partner_tier_has_many_partners(): void
    {
        $tier = PartnerTier::factory()->create();
        $partners = Partner::factory()->count(3)->create(['tier_id' => $tier->id]);

        $this->assertCount(3, $tier->partners);
        $this->assertInstanceOf(Partner::class, $tier->partners->first());
    }

    public function test_partner_tier_can_have_icon(): void
    {
        $tier = PartnerTier::factory()->create([
            'icon' => 'heroicon-o-star',
        ]);

        $this->assertEquals('heroicon-o-star', $tier->icon);
    }

    public function test_partner_tier_can_have_color(): void
    {
        $tier = PartnerTier::factory()->create([
            'color' => '#FFD700',
        ]);

        $this->assertEquals('#FFD700', $tier->color);
    }

    public function test_partner_tier_can_have_benefits(): void
    {
        $tier = PartnerTier::factory()->create([
            'benefits' => [
                'priority_support' => true,
                'dedicated_account_manager' => true,
                'early_access' => true,
                'exclusive_events' => true,
            ],
        ]);

        $this->assertIsArray($tier->benefits);
        $this->assertTrue($tier->benefits['priority_support']);
        $this->assertTrue($tier->benefits['dedicated_account_manager']);
        $this->assertTrue($tier->benefits['early_access']);
        $this->assertTrue($tier->benefits['exclusive_events']);
    }

    public function test_partner_tier_can_have_commission_settings(): void
    {
        $tier = PartnerTier::factory()->create([
            'commission_rate' => 7.5,
            'commission_type' => 'percentage',
            'minimum_commission' => 25.00,
            'maximum_commission' => 2000.00,
        ]);

        $this->assertEquals(7.5, $tier->commission_rate);
        $this->assertEquals('percentage', $tier->commission_type);
        $this->assertEquals(25.00, $tier->minimum_commission);
        $this->assertEquals(2000.00, $tier->maximum_commission);
    }

    public function test_partner_tier_can_have_requirements(): void
    {
        $tier = PartnerTier::factory()->create([
            'requirements' => [
                'minimum_orders' => 100,
                'minimum_revenue' => 50000.00,
                'customer_satisfaction' => 4.5,
                'response_time' => '24_hours',
            ],
        ]);

        $this->assertIsArray($tier->requirements);
        $this->assertEquals(100, $tier->requirements['minimum_orders']);
        $this->assertEquals(50000.00, $tier->requirements['minimum_revenue']);
        $this->assertEquals(4.5, $tier->requirements['customer_satisfaction']);
        $this->assertEquals('24_hours', $tier->requirements['response_time']);
    }

    public function test_partner_tier_can_have_metadata(): void
    {
        $tier = PartnerTier::factory()->create([
            'metadata' => [
                'created_by' => 'admin',
                'version' => '1.0',
                'tags' => ['premium', 'gold', 'tier'],
            ],
        ]);

        $this->assertIsArray($tier->metadata);
        $this->assertEquals('admin', $tier->metadata['created_by']);
        $this->assertEquals('1.0', $tier->metadata['version']);
        $this->assertIsArray($tier->metadata['tags']);
    }

    public function test_partner_tier_can_have_priority(): void
    {
        $tier = PartnerTier::factory()->create([
            'priority' => 'high',
        ]);

        $this->assertEquals('high', $tier->priority);
    }

    public function test_partner_tier_can_have_category(): void
    {
        $tier = PartnerTier::factory()->create([
            'category' => 'premium',
        ]);

        $this->assertEquals('premium', $tier->category);
    }

    public function test_partner_tier_can_have_scope_by_code(): void
    {
        $tier1 = PartnerTier::factory()->create(['code' => 'GOLD']);
        $tier2 = PartnerTier::factory()->create(['code' => 'SILVER']);

        $goldTiers = PartnerTier::byCode('GOLD')->get();

        $this->assertTrue($goldTiers->contains($tier1));
        $this->assertFalse($goldTiers->contains($tier2));
    }

    public function test_partner_tier_can_have_scope_by_category(): void
    {
        $tier1 = PartnerTier::factory()->create(['category' => 'premium']);
        $tier2 = PartnerTier::factory()->create(['category' => 'standard']);

        $premiumTiers = PartnerTier::byCategory('premium')->get();

        $this->assertTrue($premiumTiers->contains($tier1));
        $this->assertFalse($premiumTiers->contains($tier2));
    }

    public function test_partner_tier_can_have_scope_by_priority(): void
    {
        $tier1 = PartnerTier::factory()->create(['priority' => 'high']);
        $tier2 = PartnerTier::factory()->create(['priority' => 'medium']);

        $highPriorityTiers = PartnerTier::byPriority('high')->get();

        $this->assertTrue($highPriorityTiers->contains($tier1));
        $this->assertFalse($highPriorityTiers->contains($tier2));
    }

    public function test_partner_tier_can_have_scope_with_partners(): void
    {
        $tierWithPartners = PartnerTier::factory()->create();
        $tierWithoutPartners = PartnerTier::factory()->create();

        Partner::factory()->count(2)->create(['tier_id' => $tierWithPartners->id]);

        $tiersWithPartners = PartnerTier::withPartners()->get();

        $this->assertTrue($tiersWithPartners->contains($tierWithPartners));
        $this->assertFalse($tiersWithPartners->contains($tierWithoutPartners));
    }

    public function test_partner_tier_can_have_scope_without_partners(): void
    {
        $tierWithPartners = PartnerTier::factory()->create();
        $tierWithoutPartners = PartnerTier::factory()->create();

        Partner::factory()->count(2)->create(['tier_id' => $tierWithPartners->id]);

        $tiersWithoutPartners = PartnerTier::withoutPartners()->get();

        $this->assertFalse($tiersWithoutPartners->contains($tierWithPartners));
        $this->assertTrue($tiersWithoutPartners->contains($tierWithoutPartners));
    }

    public function test_partner_tier_can_have_scope_by_commission_rate(): void
    {
        $tier1 = PartnerTier::factory()->create(['commission_rate' => 10.0]);
        $tier2 = PartnerTier::factory()->create(['commission_rate' => 5.0]);

        $highCommissionTiers = PartnerTier::byCommissionRate(7.5)->get();

        $this->assertTrue($highCommissionTiers->contains($tier1));
        $this->assertFalse($highCommissionTiers->contains($tier2));
    }

    public function test_partner_tier_can_have_scope_by_commission_type(): void
    {
        $tier1 = PartnerTier::factory()->create(['commission_type' => 'percentage']);
        $tier2 = PartnerTier::factory()->create(['commission_type' => 'fixed']);

        $percentageTiers = PartnerTier::byCommissionType('percentage')->get();

        $this->assertTrue($percentageTiers->contains($tier1));
        $this->assertFalse($percentageTiers->contains($tier2));
    }

    public function test_partner_tier_can_have_scope_by_minimum_commission(): void
    {
        $tier1 = PartnerTier::factory()->create(['minimum_commission' => 50.0]);
        $tier2 = PartnerTier::factory()->create(['minimum_commission' => 25.0]);

        $highMinimumTiers = PartnerTier::byMinimumCommission(30.0)->get();

        $this->assertTrue($highMinimumTiers->contains($tier1));
        $this->assertFalse($highMinimumTiers->contains($tier2));
    }

    public function test_partner_tier_can_have_scope_by_maximum_commission(): void
    {
        $tier1 = PartnerTier::factory()->create(['maximum_commission' => 1000.0]);
        $tier2 = PartnerTier::factory()->create(['maximum_commission' => 500.0]);

        $highMaximumTiers = PartnerTier::byMaximumCommission(750.0)->get();

        $this->assertTrue($highMaximumTiers->contains($tier1));
        $this->assertFalse($highMaximumTiers->contains($tier2));
    }

    public function test_partner_tier_can_have_scope_by_benefit(): void
    {
        $tier1 = PartnerTier::factory()->create([
            'benefits' => ['priority_support' => true, 'early_access' => true],
        ]);
        $tier2 = PartnerTier::factory()->create([
            'benefits' => ['priority_support' => false, 'early_access' => true],
        ]);

        $prioritySupportTiers = PartnerTier::byBenefit('priority_support')->get();

        $this->assertTrue($prioritySupportTiers->contains($tier1));
        $this->assertFalse($prioritySupportTiers->contains($tier2));
    }

    public function test_partner_tier_can_have_scope_by_requirement(): void
    {
        $tier1 = PartnerTier::factory()->create([
            'requirements' => ['minimum_orders' => 100, 'minimum_revenue' => 50000.0],
        ]);
        $tier2 = PartnerTier::factory()->create([
            'requirements' => ['minimum_orders' => 50, 'minimum_revenue' => 25000.0],
        ]);

        $highOrderTiers = PartnerTier::byRequirement('minimum_orders', 75)->get();

        $this->assertTrue($highOrderTiers->contains($tier1));
        $this->assertFalse($highOrderTiers->contains($tier2));
    }
}
