<?php

declare(strict_types=1);

namespace Tests\Unit;

use App\Models\Category;
use App\Models\Product;
use App\Models\SeoData;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class SeoDataTest extends TestCase
{
    use RefreshDatabase;

    public function test_seo_data_can_be_created(): void
    {
        $seoData = SeoData::factory()->create([
            'title' => 'Test Page Title',
            'description' => 'Test page description for SEO',
            'keywords' => 'test, page, seo',
            'canonical_url' => 'https://example.com/test-page',
        ]);

        $this->assertDatabaseHas('seo_data', [
            'title' => 'Test Page Title',
            'description' => 'Test page description for SEO',
            'keywords' => 'test, page, seo',
            'canonical_url' => 'https://example.com/test-page',
        ]);
    }

    public function test_seo_data_casts_work_correctly(): void
    {
        $seoData = SeoData::factory()->create([
            'no_index' => false,
            'no_follow' => false,
            'meta_tags' => ['og:type' => 'website'],
            'structured_data' => ['@context' => 'https://schema.org'],
            'created_at' => now(),
        ]);

        $this->assertIsBool($seoData->no_index);
        $this->assertIsBool($seoData->no_follow);
        $this->assertIsArray($seoData->meta_tags);
        $this->assertIsArray($seoData->structured_data);
        $this->assertInstanceOf(\Carbon\Carbon::class, $seoData->created_at);
    }

    public function test_seo_data_fillable_attributes(): void
    {
        $seoData = new SeoData;
        $fillable = $seoData->getFillable();

        $this->assertContains('seoable_type', $fillable);
        $this->assertContains('seoable_id', $fillable);
        $this->assertContains('locale', $fillable);
        $this->assertContains('title', $fillable);
        $this->assertContains('description', $fillable);
        $this->assertContains('keywords', $fillable);
        $this->assertContains('canonical_url', $fillable);
        $this->assertContains('meta_tags', $fillable);
        $this->assertContains('structured_data', $fillable);
        $this->assertContains('no_index', $fillable);
        $this->assertContains('no_follow', $fillable);
    }

    public function test_seo_data_scope_for_locale(): void
    {
        $lithuanianSeoData = SeoData::factory()->create(['locale' => 'lt']);
        $englishSeoData = SeoData::factory()->create(['locale' => 'en']);

        $lithuanianSeoDataList = SeoData::forLocale('lt')->get();

        $this->assertTrue($lithuanianSeoDataList->contains($lithuanianSeoData));
        $this->assertFalse($lithuanianSeoDataList->contains($englishSeoData));
    }

    public function test_seo_data_scope_by_type(): void
    {
        $productSeoData = SeoData::factory()->create(['seoable_type' => Product::class]);
        $categorySeoData = SeoData::factory()->create(['seoable_type' => Category::class]);

        $productSeoDataList = SeoData::byType(Product::class)->get();

        $this->assertTrue($productSeoDataList->contains($productSeoData));
        $this->assertFalse($productSeoDataList->contains($categorySeoData));
    }

    public function test_seo_data_scope_indexable(): void
    {
        $indexableSeoData = SeoData::factory()->create(['no_index' => false]);
        $nonIndexableSeoData = SeoData::factory()->create(['no_index' => true]);

        $indexableSeoDataList = SeoData::indexable()->get();

        $this->assertTrue($indexableSeoDataList->contains($indexableSeoData));
        $this->assertFalse($indexableSeoDataList->contains($nonIndexableSeoData));
    }

    public function test_seo_data_scope_followable(): void
    {
        $followableSeoData = SeoData::factory()->create(['no_follow' => false]);
        $nonFollowableSeoData = SeoData::factory()->create(['no_follow' => true]);

        $followableSeoDataList = SeoData::followable()->get();

        $this->assertTrue($followableSeoDataList->contains($followableSeoData));
        $this->assertFalse($followableSeoDataList->contains($nonFollowableSeoData));
    }

    public function test_seo_data_can_have_meta_tags(): void
    {
        $metaTags = [
            'og:title' => 'Open Graph Title',
            'og:description' => 'Open Graph Description',
            'og:image' => 'https://example.com/og-image.jpg',
            'og:type' => 'website',
            'twitter:card' => 'summary_large_image',
        ];

        $seoData = SeoData::factory()->create([
            'meta_tags' => $metaTags,
        ]);

        $this->assertIsArray($seoData->meta_tags);
        $this->assertEquals('Open Graph Title', $seoData->meta_tags['og:title']);
        $this->assertEquals('Open Graph Description', $seoData->meta_tags['og:description']);
        $this->assertEquals('https://example.com/og-image.jpg', $seoData->meta_tags['og:image']);
        $this->assertEquals('website', $seoData->meta_tags['og:type']);
        $this->assertEquals('summary_large_image', $seoData->meta_tags['twitter:card']);
    }

    public function test_seo_data_robots_attribute(): void
    {
        $seoData = SeoData::factory()->create([
            'no_index' => false,
            'no_follow' => false,
        ]);

        $this->assertEquals('index, follow', $seoData->robots);

        $seoData->no_index = true;
        $this->assertEquals('noindex', $seoData->robots);

        $seoData->no_follow = true;
        $this->assertEquals('noindex, nofollow', $seoData->robots);
    }

    public function test_seo_data_title_length_attribute(): void
    {
        $seoData = SeoData::factory()->create([
            'title' => 'Test Title',
        ]);

        $this->assertEquals(10, $seoData->title_length);
    }

    public function test_seo_data_description_length_attribute(): void
    {
        $seoData = SeoData::factory()->create([
            'description' => 'Test Description',
        ]);

        $this->assertEquals(16, $seoData->description_length);
    }

    public function test_seo_data_keywords_count_attribute(): void
    {
        $seoData = SeoData::factory()->create([
            'keywords' => 'keyword1, keyword2, keyword3',
        ]);

        $this->assertEquals(3, $seoData->keywords_count);
    }

    public function test_seo_data_is_title_optimal(): void
    {
        $seoData = SeoData::factory()->create([
            'title' => 'This is a perfectly optimized title for SEO',
        ]);

        $this->assertTrue($seoData->isTitleOptimal());

        $seoData->title = 'Short';
        $this->assertFalse($seoData->isTitleOptimal());

        $seoData->title = 'This is a very long title that exceeds the optimal length for SEO purposes and should not be used';
        $this->assertFalse($seoData->isTitleOptimal());
    }

    public function test_seo_data_is_description_optimal(): void
    {
        $seoData = SeoData::factory()->create([
            'description' => 'This is a perfectly optimized description for SEO that is between 120 and 160 characters long and provides good information.',
        ]);

        $this->assertTrue($seoData->isDescriptionOptimal());

        $seoData->description = 'Short description';
        $this->assertFalse($seoData->isDescriptionOptimal());

        $seoData->description = 'This is a very long description that exceeds the optimal length for SEO purposes and should not be used because it is too long and will be truncated by search engines and will not provide good user experience.';
        $this->assertFalse($seoData->isDescriptionOptimal());
    }

    public function test_seo_data_seo_score_calculation(): void
    {
        $seoData = SeoData::factory()->create([
            'title' => 'This is a perfectly optimized title for SEO',
            'description' => 'This is a perfectly optimized description for SEO that is between 120 and 160 characters long and provides good information.',
            'keywords' => 'keyword1, keyword2, keyword3, keyword4, keyword5',
            'canonical_url' => 'https://example.com/page',
            'structured_data' => ['@context' => 'https://schema.org'],
        ]);

        $this->assertEquals(100, $seoData->seo_score);

        $seoData->title = null;
        $this->assertEquals(80, $seoData->seo_score);

        $seoData->description = null;
        $this->assertEquals(65, $seoData->seo_score);

        $seoData->keywords = null;
        $this->assertEquals(55, $seoData->seo_score);

        $seoData->canonical_url = null;
        $this->assertEquals(45, $seoData->seo_score);

        $seoData->structured_data = null;
        $this->assertEquals(40, $seoData->seo_score);
    }

    public function test_seo_data_seo_score_color(): void
    {
        $seoData = SeoData::factory()->create([
            'title' => 'This is a perfectly optimized title for SEO',
            'description' => 'This is a perfectly optimized description for SEO that is between 120 and 160 characters long and provides good information.',
            'keywords' => 'keyword1, keyword2, keyword3, keyword4, keyword5',
            'canonical_url' => 'https://example.com/page',
            'structured_data' => ['@context' => 'https://schema.org'],
        ]);

        $this->assertEquals('success', $seoData->seo_score_color);

        $seoData->title = 'Short title';
        $seoData->description = 'Short description';
        $this->assertEquals('warning', $seoData->seo_score_color);

        $seoData->title = null;
        $seoData->description = null;
        $seoData->keywords = null;
        $this->assertEquals('danger', $seoData->seo_score_color);
    }

    public function test_seo_data_can_have_structured_data(): void
    {
        $structuredData = [
            '@context' => 'https://schema.org',
            '@type' => 'Product',
            'name' => 'Test Product',
            'description' => 'Test product description',
            'sku' => 'TEST-001',
            'brand' => 'Test Brand',
        ];

        $seoData = SeoData::factory()->create([
            'structured_data' => $structuredData,
        ]);

        $this->assertIsArray($seoData->structured_data);
        $this->assertEquals('https://schema.org', $seoData->structured_data['@context']);
        $this->assertEquals('Product', $seoData->structured_data['@type']);
        $this->assertEquals('Test Product', $seoData->structured_data['name']);
        $this->assertEquals('Test product description', $seoData->structured_data['description']);
        $this->assertEquals('TEST-001', $seoData->structured_data['sku']);
        $this->assertEquals('Test Brand', $seoData->structured_data['brand']);
    }

    public function test_seo_data_meta_tags_html_attribute(): void
    {
        $seoData = SeoData::factory()->create([
            'title' => 'Test Page Title',
            'description' => 'Test page description',
            'keywords' => 'test, page, seo',
            'canonical_url' => 'https://example.com/test-page',
            'no_index' => true,
            'no_follow' => false,
            'meta_tags' => [
                'og:type' => 'website',
                'author' => 'Test Author',
            ],
        ]);

        $html = $seoData->meta_tags_html;

        $this->assertStringContainsString('<title>Test Page Title</title>', $html);
        $this->assertStringContainsString('<meta property="og:title" content="Test Page Title">', $html);
        $this->assertStringContainsString('<meta name="description" content="Test page description">', $html);
        $this->assertStringContainsString('<meta property="og:description" content="Test page description">', $html);
        $this->assertStringContainsString('<meta name="keywords" content="test, page, seo">', $html);
        $this->assertStringContainsString('<link rel="canonical" href="https://example.com/test-page">', $html);
        $this->assertStringContainsString('<meta name="robots" content="noindex">', $html);
        $this->assertStringContainsString('<meta name="og:type" content="website">', $html);
        $this->assertStringContainsString('<meta name="author" content="Test Author">', $html);
    }

    public function test_seo_data_structured_data_json_attribute(): void
    {
        $structuredData = [
            '@context' => 'https://schema.org',
            '@type' => 'Product',
            'name' => 'Test Product',
        ];

        $seoData = SeoData::factory()->create([
            'structured_data' => $structuredData,
        ]);

        $json = $seoData->structured_data_json;

        $this->assertIsString($json);
        $this->assertStringContainsString('"@context":"https://schema.org"', $json);
        $this->assertStringContainsString('"@type":"Product"', $json);
        $this->assertStringContainsString('"name":"Test Product"', $json);
    }

    public function test_seo_data_structured_data_json_attribute_returns_null_when_empty(): void
    {
        $seoData = SeoData::factory()->create([
            'structured_data' => null,
        ]);

        $this->assertNull($seoData->structured_data_json);
    }

    public function test_seo_data_seoable_relationship(): void
    {
        $product = Product::factory()->create();
        $seoData = SeoData::factory()->create([
            'seoable_type' => Product::class,
            'seoable_id' => $product->id,
        ]);

        $this->assertInstanceOf(Product::class, $seoData->seoable);
        $this->assertEquals($product->id, $seoData->seoable->id);
    }

    public function test_seo_data_seoable_name_attribute(): void
    {
        $product = Product::factory()->create(['name' => 'Test Product']);
        $seoData = SeoData::factory()->create([
            'seoable_type' => Product::class,
            'seoable_id' => $product->id,
        ]);

        $this->assertEquals('Test Product', $seoData->seoable_name);
    }

    public function test_seo_data_seoable_type_name_attribute(): void
    {
        $seoData = SeoData::factory()->create([
            'seoable_type' => Product::class,
        ]);

        $this->assertEquals('Product', $seoData->seoable_type_name);

        $seoData->seoable_type = Category::class;
        $this->assertEquals('Category', $seoData->seoable_type_name);

        $seoData->seoable_type = Brand::class;
        $this->assertEquals('Brand', $seoData->seoable_type_name);
    }

    public function test_seo_data_locale_name_attribute(): void
    {
        $seoData = SeoData::factory()->create(['locale' => 'lt']);
        $this->assertEquals('Lietuvių', $seoData->locale_name);

        $seoData->locale = 'en';
        $this->assertEquals('English', $seoData->locale_name);

        $seoData->locale = 'de';
        $this->assertEquals('DE', $seoData->locale_name);
    }
}
