<?php

declare(strict_types=1);

namespace Tests\Unit;

use App\Models\Order;
use App\Models\OrderItem;
use App\Models\Product;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class OrderTest extends TestCase
{
    use RefreshDatabase;

    public function test_order_can_be_created(): void
    {
        $user = User::factory()->create();
        $order = Order::factory()->create([
            'user_id' => $user->id,
            'status' => 'pending',
            'total' => 99.99,
        ]);

        $this->assertDatabaseHas('orders', [
            'user_id' => $user->id,
            'status' => 'pending',
            'total' => 99.99,
        ]);
    }

    public function test_order_belongs_to_user(): void
    {
        $user = User::factory()->create();
        $order = Order::factory()->create(['user_id' => $user->id]);

        $this->assertInstanceOf(User::class, $order->user);
        $this->assertEquals($user->id, $order->user->id);
    }

    public function test_order_has_many_order_items(): void
    {
        $order = Order::factory()->create();
        $product = Product::factory()->create();

        $orderItems = OrderItem::factory()->count(3)->create([
            'order_id' => $order->id,
            'product_id' => $product->id,
        ]);

        $this->assertCount(3, $order->orderItems);
        $this->assertInstanceOf(OrderItem::class, $order->orderItems->first());
    }

    public function test_order_casts_work_correctly(): void
    {
        $order = Order::factory()->create([
            'total' => 99.99,
            'subtotal' => 89.99,
            'tax_amount' => 10.00,
            'shipping_amount' => 5.00,
            'created_at' => now(),
        ]);

        $this->assertIsNumeric($order->total);
        $this->assertIsNumeric($order->subtotal);
        $this->assertIsNumeric($order->tax_amount);
        $this->assertIsNumeric($order->shipping_amount);
        $this->assertInstanceOf(\Carbon\Carbon::class, $order->created_at);
    }

    public function test_order_fillable_attributes(): void
    {
        $order = new Order;
        $fillable = $order->getFillable();

        $this->assertContains('user_id', $fillable);
        $this->assertContains('status', $fillable);
        $this->assertContains('total', $fillable);
        $this->assertContains('subtotal', $fillable);
    }

    public function test_order_status_enum(): void
    {
        $order = Order::factory()->create(['status' => 'pending']);

        $this->assertEquals('pending', $order->status);

        $order->status = 'completed';
        $order->save();

        $this->assertEquals('completed', $order->status);
    }

    public function test_order_can_calculate_totals(): void
    {
        $order = Order::factory()->create([
            'subtotal' => 100.00,
            'tax_amount' => 21.00,
            'shipping_amount' => 10.00,
        ]);

        $expectedTotal = 100.00 + 21.00 + 10.00;
        $this->assertEquals($expectedTotal, $order->total);
    }

    public function test_order_has_shipping_address(): void
    {
        $order = Order::factory()->create([
            'shipping_address' => [
                'street' => 'Test Street 123',
                'city' => 'Vilnius',
                'postal_code' => 'LT-01234',
                'country' => 'Lithuania',
            ],
        ]);

        $this->assertIsArray($order->shipping_address);
        $this->assertEquals('Test Street 123', $order->shipping_address['street']);
        $this->assertEquals('Vilnius', $order->shipping_address['city']);
    }

    public function test_order_has_billing_address(): void
    {
        $order = Order::factory()->create([
            'billing_address' => [
                'street' => 'Billing Street 456',
                'city' => 'Kaunas',
                'postal_code' => 'LT-56789',
                'country' => 'Lithuania',
            ],
        ]);

        $this->assertIsArray($order->billing_address);
        $this->assertEquals('Billing Street 456', $order->billing_address['street']);
        $this->assertEquals('Kaunas', $order->billing_address['city']);
    }
}
