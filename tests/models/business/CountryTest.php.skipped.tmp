<?php declare(strict_types=1);

namespace Tests\Unit;

use App\Models\Country;
use App\Models\City;
use App\Models\Region;
use App\Models\Zone;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class CountryTest extends TestCase
{
    use RefreshDatabase;

    public function test_country_can_be_created(): void
    {
        $zone = Zone::factory()->create();
        $country = Country::factory()->create([
            'name' => 'Lithuania',
            'code' => 'LT',
            'iso_code' => 'LTU',
            'zone_id' => $zone->id,
            'currency_code' => 'EUR',
            'currency_symbol' => '€',
            'language_code' => 'lt',
            'timezone' => 'Europe/Vilnius',
            'phone_code' => '+370',
            'capital' => 'Vilnius',
            'is_active' => true,
        ]);

        $this->assertDatabaseHas('countries', [
            'name' => 'Lithuania',
            'code' => 'LT',
            'iso_code' => 'LTU',
            'zone_id' => $zone->id,
            'currency_code' => 'EUR',
            'currency_symbol' => '€',
            'language_code' => 'lt',
            'timezone' => 'Europe/Vilnius',
            'phone_code' => '+370',
            'capital' => 'Vilnius',
            'is_active' => true,
        ]);
    }

    public function test_country_belongs_to_zone(): void
    {
        $zone = Zone::factory()->create();
        $country = Country::factory()->create(['zone_id' => $zone->id]);

        $this->assertInstanceOf(Zone::class, $country->zone);
        $this->assertEquals($zone->id, $country->zone->id);
    }

    public function test_country_has_many_cities(): void
    {
        $country = Country::factory()->create();
        $city1 = City::factory()->create(['country_id' => $country->id]);
        $city2 = City::factory()->create(['country_id' => $country->id]);

        $this->assertInstanceOf(\Illuminate\Database\Eloquent\Collection::class, $country->cities);
        $this->assertCount(2, $country->cities);
        $this->assertTrue($country->cities->contains($city1));
        $this->assertTrue($country->cities->contains($city2));
    }

    public function test_country_has_many_regions(): void
    {
        $country = Country::factory()->create();
        $region1 = Region::factory()->create(['country_id' => $country->id]);
        $region2 = Region::factory()->create(['country_id' => $country->id]);

        $this->assertInstanceOf(\Illuminate\Database\Eloquent\Collection::class, $country->regions);
        $this->assertCount(2, $country->regions);
        $this->assertTrue($country->regions->contains($region1));
        $this->assertTrue($country->regions->contains($region2));
    }

    public function test_country_casts_work_correctly(): void
    {
        $country = Country::factory()->create([
            'is_active' => true,
            'population' => 2800000,
            'area' => 65300.0,
            'density' => 42.9,
            'created_at' => now(),
        ]);

        $this->assertIsBool($country->is_active);
        $this->assertIsInt($country->population);
        $this->assertIsFloat($country->area);
        $this->assertIsFloat($country->density);
        $this->assertInstanceOf(\Carbon\Carbon::class, $country->created_at);
    }

    public function test_country_fillable_attributes(): void
    {
        $country = new Country();
        $fillable = $country->getFillable();

        $this->assertContains('name', $fillable);
        $this->assertContains('code', $fillable);
        $this->assertContains('iso_code', $fillable);
        $this->assertContains('zone_id', $fillable);
        $this->assertContains('is_active', $fillable);
    }

    public function test_country_scope_active(): void
    {
        $activeCountry = Country::factory()->create(['is_active' => true]);
        $inactiveCountry = Country::factory()->create(['is_active' => false]);

        $activeCountries = Country::active()->get();

        $this->assertTrue($activeCountries->contains($activeCountry));
        $this->assertFalse($activeCountries->contains($inactiveCountry));
    }

    public function test_country_can_have_description(): void
    {
        $country = Country::factory()->create([
            'description' => 'Republic of Lithuania',
        ]);

        $this->assertEquals('Republic of Lithuania', $country->description);
    }

    public function test_country_can_have_continent(): void
    {
        $country = Country::factory()->create([
            'continent' => 'Europe',
        ]);

        $this->assertEquals('Europe', $country->continent);
    }

    public function test_country_can_have_currency(): void
    {
        $country = Country::factory()->create([
            'currency_code' => 'EUR',
            'currency_symbol' => '€',
            'currency_name' => 'Euro',
        ]);

        $this->assertEquals('EUR', $country->currency_code);
        $this->assertEquals('€', $country->currency_symbol);
        $this->assertEquals('Euro', $country->currency_name);
    }

    public function test_country_can_have_language(): void
    {
        $country = Country::factory()->create([
            'language_code' => 'lt',
            'language_name' => 'Lithuanian',
        ]);

        $this->assertEquals('lt', $country->language_code);
        $this->assertEquals('Lithuanian', $country->language_name);
    }

    public function test_country_can_have_timezone(): void
    {
        $country = Country::factory()->create([
            'timezone' => 'Europe/Vilnius',
        ]);

        $this->assertEquals('Europe/Vilnius', $country->timezone);
    }

    public function test_country_can_have_phone_code(): void
    {
        $country = Country::factory()->create([
            'phone_code' => '+370',
        ]);

        $this->assertEquals('+370', $country->phone_code);
    }

    public function test_country_can_have_capital(): void
    {
        $country = Country::factory()->create([
            'capital' => 'Vilnius',
        ]);

        $this->assertEquals('Vilnius', $country->capital);
    }

    public function test_country_can_have_population(): void
    {
        $country = Country::factory()->create([
            'population' => 2800000,
        ]);

        $this->assertEquals(2800000, $country->population);
    }

    public function test_country_can_have_area(): void
    {
        $country = Country::factory()->create([
            'area' => 65300.0,
        ]);

        $this->assertEquals(65300.0, $country->area);
    }

    public function test_country_can_have_density(): void
    {
        $country = Country::factory()->create([
            'density' => 42.9,
        ]);

        $this->assertEquals(42.9, $country->density);
    }

    public function test_country_can_have_metadata(): void
    {
        $country = Country::factory()->create([
            'metadata' => [
                'created_by' => 'admin',
                'version' => '1.0',
                'tags' => ['lithuania', 'europe', 'country'],
            ],
        ]);

        $this->assertIsArray($country->metadata);
        $this->assertEquals('admin', $country->metadata['created_by']);
        $this->assertEquals('1.0', $country->metadata['version']);
        $this->assertIsArray($country->metadata['tags']);
    }

    public function test_country_can_have_scope_by_code(): void
    {
        $country1 = Country::factory()->create(['code' => 'LT']);
        $country2 = Country::factory()->create(['code' => 'LV']);

        $ltCountries = Country::byCode('LT')->get();

        $this->assertTrue($ltCountries->contains($country1));
        $this->assertFalse($ltCountries->contains($country2));
    }

    public function test_country_can_have_scope_by_iso_code(): void
    {
        $country1 = Country::factory()->create(['iso_code' => 'LTU']);
        $country2 = Country::factory()->create(['iso_code' => 'LVA']);

        $ltuCountries = Country::byIsoCode('LTU')->get();

        $this->assertTrue($ltuCountries->contains($country1));
        $this->assertFalse($ltuCountries->contains($country2));
    }

    public function test_country_can_have_scope_by_continent(): void
    {
        $country1 = Country::factory()->create(['continent' => 'Europe']);
        $country2 = Country::factory()->create(['continent' => 'Asia']);

        $europeanCountries = Country::byContinent('Europe')->get();

        $this->assertTrue($europeanCountries->contains($country1));
        $this->assertFalse($europeanCountries->contains($country2));
    }

    public function test_country_can_have_scope_by_currency(): void
    {
        $country1 = Country::factory()->create(['currency_code' => 'EUR']);
        $country2 = Country::factory()->create(['currency_code' => 'USD']);

        $eurCountries = Country::byCurrency('EUR')->get();

        $this->assertTrue($eurCountries->contains($country1));
        $this->assertFalse($eurCountries->contains($country2));
    }

    public function test_country_can_have_scope_by_language(): void
    {
        $country1 = Country::factory()->create(['language_code' => 'lt']);
        $country2 = Country::factory()->create(['language_code' => 'en']);

        $ltCountries = Country::byLanguage('lt')->get();

        $this->assertTrue($ltCountries->contains($country1));
        $this->assertFalse($ltCountries->contains($country2));
    }

    public function test_country_can_have_scope_by_timezone(): void
    {
        $country1 = Country::factory()->create(['timezone' => 'Europe/Vilnius']);
        $country2 = Country::factory()->create(['timezone' => 'Europe/London']);

        $vilniusCountries = Country::byTimezone('Europe/Vilnius')->get();

        $this->assertTrue($vilniusCountries->contains($country1));
        $this->assertFalse($vilniusCountries->contains($country2));
    }

    public function test_country_can_have_scope_by_phone_code(): void
    {
        $country1 = Country::factory()->create(['phone_code' => '+370']);
        $country2 = Country::factory()->create(['phone_code' => '+371']);

        $ltPhoneCountries = Country::byPhoneCode('+370')->get();

        $this->assertTrue($ltPhoneCountries->contains($country1));
        $this->assertFalse($ltPhoneCountries->contains($country2));
    }

    public function test_country_can_have_scope_by_capital(): void
    {
        $country1 = Country::factory()->create(['capital' => 'Vilnius']);
        $country2 = Country::factory()->create(['capital' => 'Riga']);

        $vilniusCountries = Country::byCapital('Vilnius')->get();

        $this->assertTrue($vilniusCountries->contains($country1));
        $this->assertFalse($vilniusCountries->contains($country2));
    }

    public function test_country_can_have_scope_by_population(): void
    {
        $country1 = Country::factory()->create(['population' => 1000000]);
        $country2 = Country::factory()->create(['population' => 500000]);

        $largeCountries = Country::byPopulation(750000)->get();

        $this->assertTrue($largeCountries->contains($country1));
        $this->assertFalse($largeCountries->contains($country2));
    }

    public function test_country_can_have_scope_by_area(): void
    {
        $country1 = Country::factory()->create(['area' => 100000.0]);
        $country2 = Country::factory()->create(['area' => 50000.0]);

        $largeCountries = Country::byArea(75000.0)->get();

        $this->assertTrue($largeCountries->contains($country1));
        $this->assertFalse($largeCountries->contains($country2));
    }

    public function test_country_can_have_scope_by_density(): void
    {
        $country1 = Country::factory()->create(['density' => 100.0]);
        $country2 = Country::factory()->create(['density' => 50.0]);

        $denseCountries = Country::byDensity(75.0)->get();

        $this->assertTrue($denseCountries->contains($country1));
        $this->assertFalse($denseCountries->contains($country2));
    }

    public function test_country_can_have_scope_by_zone(): void
    {
        $zone1 = Zone::factory()->create();
        $zone2 = Zone::factory()->create();
        
        $country1 = Country::factory()->create(['zone_id' => $zone1->id]);
        $country2 = Country::factory()->create(['zone_id' => $zone2->id]);

        $zone1Countries = Country::byZone($zone1->id)->get();

        $this->assertTrue($zone1Countries->contains($country1));
        $this->assertFalse($zone1Countries->contains($country2));
    }

    public function test_country_can_have_scope_by_zone_code(): void
    {
        $zone1 = Zone::factory()->create(['code' => 'EU']);
        $zone2 = Zone::factory()->create(['code' => 'US']);
        
        $country1 = Country::factory()->create(['zone_id' => $zone1->id]);
        $country2 = Country::factory()->create(['zone_id' => $zone2->id]);

        $euCountries = Country::byZoneCode('EU')->get();

        $this->assertTrue($euCountries->contains($country1));
        $this->assertFalse($euCountries->contains($country2));
    }

    public function test_country_can_have_scope_by_zone_type(): void
    {
        $zone1 = Zone::factory()->create(['type' => 'economic']);
        $zone2 = Zone::factory()->create(['type' => 'political']);
        
        $country1 = Country::factory()->create(['zone_id' => $zone1->id]);
        $country2 = Country::factory()->create(['zone_id' => $zone2->id]);

        $economicZoneCountries = Country::byZoneType('economic')->get();

        $this->assertTrue($economicZoneCountries->contains($country1));
        $this->assertFalse($economicZoneCountries->contains($country2));
    }

    public function test_country_can_have_scope_by_zone_currency(): void
    {
        $zone1 = Zone::factory()->create(['currency_code' => 'EUR']);
        $zone2 = Zone::factory()->create(['currency_code' => 'USD']);
        
        $country1 = Country::factory()->create(['zone_id' => $zone1->id]);
        $country2 = Country::factory()->create(['zone_id' => $zone2->id]);

        $eurZoneCountries = Country::byZoneCurrency('EUR')->get();

        $this->assertTrue($eurZoneCountries->contains($country1));
        $this->assertFalse($eurZoneCountries->contains($country2));
    }

    public function test_country_can_have_scope_by_zone_language(): void
    {
        $zone1 = Zone::factory()->create(['default_language' => 'lt']);
        $zone2 = Zone::factory()->create(['default_language' => 'en']);
        
        $country1 = Country::factory()->create(['zone_id' => $zone1->id]);
        $country2 = Country::factory()->create(['zone_id' => $zone2->id]);

        $ltZoneCountries = Country::byZoneLanguage('lt')->get();

        $this->assertTrue($ltZoneCountries->contains($country1));
        $this->assertFalse($ltZoneCountries->contains($country2));
    }

    public function test_country_can_have_scope_by_zone_timezone(): void
    {
        $zone1 = Zone::factory()->create(['timezone' => 'Europe/Vilnius']);
        $zone2 = Zone::factory()->create(['timezone' => 'Europe/London']);
        
        $country1 = Country::factory()->create(['zone_id' => $zone1->id]);
        $country2 = Country::factory()->create(['zone_id' => $zone2->id]);

        $vilniusZoneCountries = Country::byZoneTimezone('Europe/Vilnius')->get();

        $this->assertTrue($vilniusZoneCountries->contains($country1));
        $this->assertFalse($vilniusZoneCountries->contains($country2));
    }

    public function test_country_can_have_scope_by_zone_phone_code(): void
    {
        $zone1 = Zone::factory()->create(['phone_code' => '+370']);
        $zone2 = Zone::factory()->create(['phone_code' => '+371']);
        
        $country1 = Country::factory()->create(['zone_id' => $zone1->id]);
        $country2 = Country::factory()->create(['zone_id' => $zone2->id]);

        $ltPhoneZoneCountries = Country::byZonePhoneCode('+370')->get();

        $this->assertTrue($ltPhoneZoneCountries->contains($country1));
        $this->assertFalse($ltPhoneZoneCountries->contains($country2));
    }

    public function test_country_can_have_scope_by_zone_currency_and_language(): void
    {
        $zone1 = Zone::factory()->create(['currency_code' => 'EUR', 'default_language' => 'lt']);
        $zone2 = Zone::factory()->create(['currency_code' => 'USD', 'default_language' => 'lt']);
        
        $country1 = Country::factory()->create(['zone_id' => $zone1->id]);
        $country2 = Country::factory()->create(['zone_id' => $zone2->id]);

        $eurLtZoneCountries = Country::byZoneCurrencyAndLanguage('EUR', 'lt')->get();

        $this->assertTrue($eurLtZoneCountries->contains($country1));
        $this->assertFalse($eurLtZoneCountries->contains($country2));
    }

    public function test_country_can_have_scope_by_zone_currency_and_timezone(): void
    {
        $zone1 = Zone::factory()->create(['currency_code' => 'EUR', 'timezone' => 'Europe/Vilnius']);
        $zone2 = Zone::factory()->create(['currency_code' => 'USD', 'timezone' => 'Europe/Vilnius']);
        
        $country1 = Country::factory()->create(['zone_id' => $zone1->id]);
        $country2 = Country::factory()->create(['zone_id' => $zone2->id]);

        $eurVilniusZoneCountries = Country::byZoneCurrencyAndTimezone('EUR', 'Europe/Vilnius')->get();

        $this->assertTrue($eurVilniusZoneCountries->contains($country1));
        $this->assertFalse($eurVilniusZoneCountries->contains($country2));
    }

    public function test_country_can_have_scope_by_zone_language_and_timezone(): void
    {
        $zone1 = Zone::factory()->create(['default_language' => 'lt', 'timezone' => 'Europe/Vilnius']);
        $zone2 = Zone::factory()->create(['default_language' => 'en', 'timezone' => 'Europe/Vilnius']);
        
        $country1 = Country::factory()->create(['zone_id' => $zone1->id]);
        $country2 = Country::factory()->create(['zone_id' => $zone2->id]);

        $ltVilniusZoneCountries = Country::byZoneLanguageAndTimezone('lt', 'Europe/Vilnius')->get();

        $this->assertTrue($ltVilniusZoneCountries->contains($country1));
        $this->assertFalse($ltVilniusZoneCountries->contains($country2));
    }

    public function test_country_can_have_scope_by_zone_currency_language_and_timezone(): void
    {
        $zone1 = Zone::factory()->create([
            'currency_code' => 'EUR',
            'default_language' => 'lt',
            'timezone' => 'Europe/Vilnius'
        ]);
        $zone2 = Zone::factory()->create([
            'currency_code' => 'USD',
            'default_language' => 'lt',
            'timezone' => 'Europe/Vilnius'
        ]);
        
        $country1 = Country::factory()->create(['zone_id' => $zone1->id]);
        $country2 = Country::factory()->create(['zone_id' => $zone2->id]);

        $eurLtVilniusZoneCountries = Country::byZoneCurrencyLanguageAndTimezone('EUR', 'lt', 'Europe/Vilnius')->get();

        $this->assertTrue($eurLtVilniusZoneCountries->contains($country1));
        $this->assertFalse($eurLtVilniusZoneCountries->contains($country2));
    }
}
