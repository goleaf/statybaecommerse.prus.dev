<?php

declare(strict_types=1);

namespace Tests\Unit;

use App\Models\Product;
use App\Models\ProductFeature;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

final class ProductFeatureTest extends TestCase
{
    use RefreshDatabase;

    public function test_product_feature_can_be_created(): void
    {
        $product = Product::factory()->create();
        $feature = ProductFeature::factory()->create([
            'product_id' => $product->id,
            'feature_type' => 'category',
            'feature_key' => 'electronics',
            'feature_value' => 0.85,
            'weight' => 1.0,
        ]);

        $this->assertInstanceOf(ProductFeature::class, $feature);
        $this->assertEquals($product->id, $feature->product_id);
        $this->assertEquals('category', $feature->feature_type);
        $this->assertEquals('electronics', $feature->feature_key);
        $this->assertEquals(0.85, $feature->feature_value);
        $this->assertEquals(1.0, $feature->weight);
    }

    public function test_product_feature_fillable_attributes(): void
    {
        $feature = new ProductFeature;
        $fillable = $feature->getFillable();

        $expectedFillable = [
            'product_id',
            'feature_type',
            'feature_key',
            'feature_value',
            'weight',
        ];

        foreach ($expectedFillable as $field) {
            $this->assertContains($field, $fillable);
        }
    }

    public function test_product_feature_casts(): void
    {
        $feature = ProductFeature::factory()->create([
            'feature_value' => '0.123456',
            'weight' => '0.9876',
        ]);

        $this->assertIsFloat($feature->feature_value);
        $this->assertIsFloat($feature->weight);
        $this->assertEquals(0.123456, $feature->feature_value);
        $this->assertEquals(0.9876, $feature->weight);
    }

    public function test_product_feature_belongs_to_product(): void
    {
        $product = Product::factory()->create();
        $feature = ProductFeature::factory()->create(['product_id' => $product->id]);

        $this->assertInstanceOf(Product::class, $feature->product);
        $this->assertEquals($product->id, $feature->product->id);
    }

    public function test_product_feature_scope_by_type(): void
    {
        $product = Product::factory()->create();

        $categoryFeature = ProductFeature::factory()->create([
            'product_id' => $product->id,
            'feature_type' => 'category',
        ]);

        $brandFeature = ProductFeature::factory()->create([
            'product_id' => $product->id,
            'feature_type' => 'brand',
        ]);

        $categoryFeatures = ProductFeature::byType('category')->get();
        $this->assertTrue($categoryFeatures->contains($categoryFeature));
        $this->assertFalse($categoryFeatures->contains($brandFeature));
    }

    public function test_product_feature_scope_by_feature(): void
    {
        $product = Product::factory()->create();

        $electronicsFeature = ProductFeature::factory()->create([
            'product_id' => $product->id,
            'feature_key' => 'electronics',
        ]);

        $clothingFeature = ProductFeature::factory()->create([
            'product_id' => $product->id,
            'feature_key' => 'clothing',
        ]);

        $electronicsFeatures = ProductFeature::byFeature('electronics')->get();
        $this->assertTrue($electronicsFeatures->contains($electronicsFeature));
        $this->assertFalse($electronicsFeatures->contains($clothingFeature));
    }

    public function test_product_feature_scope_with_min_value(): void
    {
        $product = Product::factory()->create();

        $highValueFeature = ProductFeature::factory()->create([
            'product_id' => $product->id,
            'feature_value' => 0.9,
        ]);

        $lowValueFeature = ProductFeature::factory()->create([
            'product_id' => $product->id,
            'feature_value' => 0.3,
        ]);

        $highValueFeatures = ProductFeature::withMinValue(0.5)->get();
        $this->assertTrue($highValueFeatures->contains($highValueFeature));
        $this->assertFalse($highValueFeatures->contains($lowValueFeature));
    }

    public function test_product_feature_scope_with_max_value(): void
    {
        $product = Product::factory()->create();

        $highValueFeature = ProductFeature::factory()->create([
            'product_id' => $product->id,
            'feature_value' => 0.9,
        ]);

        $lowValueFeature = ProductFeature::factory()->create([
            'product_id' => $product->id,
            'feature_value' => 0.3,
        ]);

        $lowValueFeatures = ProductFeature::withMaxValue(0.5)->get();
        $this->assertFalse($lowValueFeatures->contains($highValueFeature));
        $this->assertTrue($lowValueFeatures->contains($lowValueFeature));
    }

    public function test_product_feature_scope_with_min_weight(): void
    {
        $product = Product::factory()->create();

        $highWeightFeature = ProductFeature::factory()->create([
            'product_id' => $product->id,
            'weight' => 0.9,
        ]);

        $lowWeightFeature = ProductFeature::factory()->create([
            'product_id' => $product->id,
            'weight' => 0.3,
        ]);

        $highWeightFeatures = ProductFeature::withMinWeight(0.5)->get();
        $this->assertTrue($highWeightFeatures->contains($highWeightFeature));
        $this->assertFalse($highWeightFeatures->contains($lowWeightFeature));
    }

    public function test_product_feature_scope_with_max_weight(): void
    {
        $product = Product::factory()->create();

        $highWeightFeature = ProductFeature::factory()->create([
            'product_id' => $product->id,
            'weight' => 0.9,
        ]);

        $lowWeightFeature = ProductFeature::factory()->create([
            'product_id' => $product->id,
            'weight' => 0.3,
        ]);

        $lowWeightFeatures = ProductFeature::withMaxWeight(0.5)->get();
        $this->assertFalse($lowWeightFeatures->contains($highWeightFeature));
        $this->assertTrue($lowWeightFeatures->contains($lowWeightFeature));
    }

    public function test_product_feature_scope_for_product(): void
    {
        $product1 = Product::factory()->create();
        $product2 = Product::factory()->create();

        $feature1 = ProductFeature::factory()->create(['product_id' => $product1->id]);
        $feature2 = ProductFeature::factory()->create(['product_id' => $product2->id]);

        $product1Features = ProductFeature::forProduct($product1->id)->get();
        $this->assertTrue($product1Features->contains($feature1));
        $this->assertFalse($product1Features->contains($feature2));
    }

    public function test_product_feature_scope_ordered_by_weight(): void
    {
        $product = Product::factory()->create();

        $lowWeightFeature = ProductFeature::factory()->create([
            'product_id' => $product->id,
            'weight' => 0.1,
        ]);

        $highWeightFeature = ProductFeature::factory()->create([
            'product_id' => $product->id,
            'weight' => 0.9,
        ]);

        $orderedFeatures = ProductFeature::orderedByWeight()->get();
        $this->assertEquals($highWeightFeature->id, $orderedFeatures->first()->id);
        $this->assertEquals($lowWeightFeature->id, $orderedFeatures->last()->id);
    }

    public function test_product_feature_scope_ordered_by_value(): void
    {
        $product = Product::factory()->create();

        $lowValueFeature = ProductFeature::factory()->create([
            'product_id' => $product->id,
            'feature_value' => 0.1,
        ]);

        $highValueFeature = ProductFeature::factory()->create([
            'product_id' => $product->id,
            'feature_value' => 0.9,
        ]);

        $orderedFeatures = ProductFeature::orderedByValue()->get();
        $this->assertEquals($highValueFeature->id, $orderedFeatures->first()->id);
        $this->assertEquals($lowValueFeature->id, $orderedFeatures->last()->id);
    }

    public function test_product_feature_table_name(): void
    {
        $feature = new ProductFeature;
        $this->assertEquals('product_features', $feature->getTable());
    }

    public function test_product_feature_factory(): void
    {
        $feature = ProductFeature::factory()->create();

        $this->assertInstanceOf(ProductFeature::class, $feature);
        $this->assertNotEmpty($feature->product_id);
        $this->assertNotEmpty($feature->feature_type);
        $this->assertNotEmpty($feature->feature_key);
        $this->assertNotNull($feature->feature_value);
        $this->assertNotNull($feature->weight);
    }
}
