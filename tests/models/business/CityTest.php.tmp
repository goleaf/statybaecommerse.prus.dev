<?php

declare(strict_types=1);

namespace Tests\Unit;

use App\Models\City;
use App\Models\Country;
use App\Models\Translations\CityTranslation;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

final class CityTest extends TestCase
{
    use RefreshDatabase;

    public function test_city_can_be_created(): void
    {
        $city = City::factory()->create([
            'name' => 'Vilnius',
            'code' => 'VIL',
            'slug' => 'vilnius',
            'is_enabled' => true,
            'is_capital' => true,
        ]);

        $this->assertDatabaseHas('cities', [
            'name' => 'Vilnius',
            'code' => 'VIL',
            'slug' => 'vilnius',
            'is_enabled' => true,
            'is_capital' => true,
        ]);
    }

    public function test_city_has_country_relation(): void
    {
        $country = Country::factory()->create();
        $city = City::factory()->create(['country_id' => $country->id]);

        $this->assertInstanceOf(Country::class, $city->country);
        $this->assertEquals($country->id, $city->country->id);
    }

    public function test_city_has_translations(): void
    {
        $city = City::factory()->create(['name' => 'Vilnius']);

        CityTranslation::create([
            'city_id' => $city->id,
            'locale' => 'lt',
            'name' => 'Vilnius',
            'description' => 'Lietuvos sostinÄ—',
        ]);

        $this->assertCount(1, $city->translations);
        $this->assertEquals('Vilnius', $city->getTranslatedName('lt'));
    }

    public function test_city_scopes(): void
    {
        City::factory()->create(['is_enabled' => true, 'is_capital' => true]);
        City::factory()->create(['is_enabled' => false, 'is_capital' => false]);

        $this->assertCount(1, City::enabled()->get());
        $this->assertCount(1, City::capital()->get());
    }

    public function test_city_soft_deletes(): void
    {
        $city = City::factory()->create();
        $cityId = $city->id;

        $city->delete();

        $this->assertSoftDeleted('cities', ['id' => $cityId]);
        $this->assertCount(0, City::all());

        // Use withoutGlobalScopes to check soft-deleted records
        $this->assertCount(1, City::withoutGlobalScopes()->onlyTrashed()->get());
    }
}
