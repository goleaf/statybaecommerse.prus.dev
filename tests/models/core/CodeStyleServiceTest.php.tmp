<?php

declare(strict_types=1);

namespace Tests\Unit\Services;

use App\Services\CodeStyleService;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\File;
use Tests\TestCase;

final class CodeStyleServiceTest extends TestCase
{
    use RefreshDatabase;

    private CodeStyleService $codeStyleService;

    private string $testFile;

    protected function setUp(): void
    {
        parent::setUp();
        $this->codeStyleService = new CodeStyleService;
        $this->testFile = storage_path('test-code-style.php');
    }

    protected function tearDown(): void
    {
        if (File::exists($this->testFile)) {
            File::delete($this->testFile);
        }
        parent::tearDown();
    }

    public function test_fixes_import_order(): void
    {
        $content = '<?php

use App\Models\User;
use Illuminate\Support\Facades\Hash;
use Filament\Forms\Form;
use Spatie\Permission\Models\Role;

class TestClass
{
}';

        File::put($this->testFile, $content);

        $fixes = $this->codeStyleService->fixFile($this->testFile);

        $this->assertNotEmpty($fixes);
        $this->assertContains('import_order', array_column($fixes, 'type'));

        $fixedContent = File::get($this->testFile);
        $this->assertStringContainsString('use Illuminate\\', $fixedContent);
        $this->assertStringContainsString('use Filament\\', $fixedContent);
        $this->assertStringContainsString('use Spatie\\', $fixedContent);
        $this->assertStringContainsString('use App\\', $fixedContent);
    }

    public function test_fixes_union_type_spacing(): void
    {
        $content = '<?php

final class TestClass
{
    protected int | string $property;
}';

        File::put($this->testFile, $content);

        $fixes = $this->codeStyleService->fixFile($this->testFile);

        $this->assertNotEmpty($fixes);
        $this->assertContains('union_type_spacing', array_column($fixes, 'type'));

        $fixedContent = File::get($this->testFile);
        $this->assertStringContainsString('protected int|string $property;', $fixedContent);
    }

    public function test_fixes_closure_spacing(): void
    {
        $content = '<?php

$callback = fn (string $value) => $value;
$another = fn (array $items) => count($items);';

        File::put($this->testFile, $content);

        $fixes = $this->codeStyleService->fixFile($this->testFile);

        $this->assertNotEmpty($fixes);
        $this->assertContains('closure_spacing', array_column($fixes, 'type'));

        $fixedContent = File::get($this->testFile);
        $this->assertStringContainsString('fn(string $value)', $fixedContent);
        $this->assertStringContainsString('fn(array $items)', $fixedContent);
    }

    public function test_fixes_trailing_whitespace(): void
    {
        $content = '<?php

class TestClass
{
    public function test()
    {
        return true;    
    }
}';

        File::put($this->testFile, $content);

        $fixes = $this->codeStyleService->fixFile($this->testFile);

        $this->assertNotEmpty($fixes);
        $this->assertContains('trailing_whitespace', array_column($fixes, 'type'));

        $fixedContent = File::get($this->testFile);
        $this->assertStringNotContainsString('    ', $fixedContent);  // No trailing spaces
    }

    public function test_fixes_numeric_formatting(): void
    {
        $content = '<?php

$value = 100.00;
$another = 50.0;';

        File::put($this->testFile, $content);

        $fixes = $this->codeStyleService->fixFile($this->testFile);

        $this->assertNotEmpty($fixes);
        $this->assertContains('numeric_formatting', array_column($fixes, 'type'));

        $fixedContent = File::get($this->testFile);
        $this->assertStringContainsString('$value = 100;', $fixedContent);
        $this->assertStringContainsString('$another = 50;', $fixedContent);
    }

    public function test_adds_final_newline(): void
    {
        $content = '<?php

class TestClass
{
    public function test()
    {
        return true;
    }
}';

        File::put($this->testFile, $content);

        $fixes = $this->codeStyleService->fixFile($this->testFile);

        $this->assertNotEmpty($fixes);
        $this->assertContains('final_newline', array_column($fixes, 'type'));

        $fixedContent = File::get($this->testFile);
        $this->assertStringEndsWith("\n", $fixedContent);
    }

    public function test_validates_file_correctly(): void
    {
        $content = '<?php

use App\Models\User;
use Illuminate\Support\Facades\Hash;

final class TestClass
{
    protected int | string $property;
    
    public function test(): void
    {
        $value = 100.00;
        $callback = fn (string $value) => $value;
    }
}';

        File::put($this->testFile, $content);

        $violations = $this->codeStyleService->validateFile($this->testFile);

        $this->assertNotEmpty($violations);

        $violationTypes = array_column($violations, 'type');
        $this->assertContains('union_type_spacing', $violationTypes);
        $this->assertContains('closure_spacing', $violationTypes);
        $this->assertContains('numeric_formatting', $violationTypes);
    }

    public function test_handles_non_existent_file(): void
    {
        $nonExistentFile = storage_path('non-existent-file.php');

        $fixes = $this->codeStyleService->fixFile($nonExistentFile);
        $violations = $this->codeStyleService->validateFile($nonExistentFile);

        $this->assertEmpty($fixes);
        $this->assertEmpty($violations);
    }

    public function test_fixes_directory(): void
    {
        $testDir = storage_path('test-code-style-dir');
        File::makeDirectory($testDir, 0755, true);

        $file1 = $testDir.'/test1.php';
        $file2 = $testDir.'/test2.php';

        File::put($file1, '<?php use App\Models\User; use Illuminate\Support\Facades\Hash;');
        File::put($file2, '<?php $value = 100.00;');

        $fixes = $this->codeStyleService->fixDirectory($testDir);

        $this->assertNotEmpty($fixes);

        // Clean up
        File::deleteDirectory($testDir);
    }

    public function test_does_not_fix_file_with_no_issues(): void
    {
        $content = '<?php

use Illuminate\Support\Facades\Hash;
use Filament\Forms\Form;
use Spatie\Permission\Models\Role;
use App\Models\User;

final class TestClass
{
    protected int|string $property;

    public function test(): void
    {
        $value = 100;
        $callback = fn(string $value) => $value;
    }
}
';

        File::put($this->testFile, $content);

        $fixes = $this->codeStyleService->fixFile($this->testFile);
        $violations = $this->codeStyleService->validateFile($this->testFile);

        $this->assertEmpty($fixes);
        $this->assertEmpty($violations);
    }

    public function test_handles_empty_file(): void
    {
        File::put($this->testFile, '');

        $fixes = $this->codeStyleService->fixFile($this->testFile);
        $violations = $this->codeStyleService->validateFile($this->testFile);

        $this->assertEmpty($fixes);
        $this->assertEmpty($violations);
    }

    public function test_handles_file_with_only_php_tag(): void
    {
        File::put($this->testFile, '<?php');

        $fixes = $this->codeStyleService->fixFile($this->testFile);

        $this->assertNotEmpty($fixes);
        $this->assertContains('final_newline', array_column($fixes, 'type'));

        $fixedContent = File::get($this->testFile);
        $this->assertStringEndsWith("\n", $fixedContent);
    }
}
