<?php

declare(strict_types=1);

namespace Tests\Unit\Notifications;

use App\Models\User;
use App\Notifications\SystemNotification;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Notifications\DatabaseNotification;
use Tests\TestCase;

final class SystemNotificationTest extends TestCase
{
    use RefreshDatabase;

    public function test_notification_can_be_created(): void
    {
        $systemData = [
            'maintenance_type' => 'scheduled',
            'duration' => '2 hours',
            'affected_services' => ['database', 'api'],
        ];

        $notification = new SystemNotification('maintenance_started', $systemData, 'Custom message');

        $this->assertEquals('maintenance_started', $notification->action);
        $this->assertEquals($systemData, $notification->systemData);
        $this->assertEquals('Custom message', $notification->message);
    }

    public function test_notification_uses_database_channel(): void
    {
        $user = User::factory()->create();
        $systemData = ['maintenance_type' => 'scheduled'];
        $notification = new SystemNotification('maintenance_started', $systemData);

        $channels = $notification->via($user);

        $this->assertEquals(['database'], $channels);
    }

    public function test_notification_database_data_structure(): void
    {
        $user = User::factory()->create();
        $systemData = [
            'maintenance_type' => 'scheduled',
            'duration' => '2 hours',
            'affected_services' => ['database', 'api'],
        ];

        $notification = new SystemNotification('maintenance_started', $systemData);
        $data = $notification->toDatabase($user);

        $this->assertArrayHasKey('type', $data);
        $this->assertArrayHasKey('action', $data);
        $this->assertArrayHasKey('title', $data);
        $this->assertArrayHasKey('message', $data);
        $this->assertArrayHasKey('data', $data);
        $this->assertArrayHasKey('sent_at', $data);

        $this->assertEquals('system', $data['type']);
        $this->assertEquals('maintenance_started', $data['action']);
        $this->assertEquals($systemData, $data['data']);
    }

    public function test_notification_title_generation(): void
    {
        $user = User::factory()->create();
        $systemData = ['maintenance_type' => 'scheduled'];

        $actions = ['maintenance_started', 'maintenance_completed', 'backup_created', 'update_available', 'security_alert', 'performance_issue'];

        foreach ($actions as $action) {
            $notification = new SystemNotification($action, $systemData);
            $data = $notification->toDatabase($user);

            $this->assertIsString($data['title']);
            $this->assertNotEmpty($data['title']);
        }
    }

    public function test_notification_message_generation(): void
    {
        $user = User::factory()->create();
        $systemData = ['maintenance_type' => 'scheduled'];

        $actions = ['maintenance_started', 'maintenance_completed', 'backup_created', 'update_available', 'security_alert', 'performance_issue'];

        foreach ($actions as $action) {
            $notification = new SystemNotification($action, $systemData);
            $data = $notification->toDatabase($user);

            $this->assertIsString($data['message']);
            $this->assertNotEmpty($data['message']);
        }
    }

    public function test_notification_can_be_sent_to_user(): void
    {
        $user = User::factory()->create();
        $systemData = [
            'maintenance_type' => 'scheduled',
            'duration' => '2 hours',
        ];

        $notification = new SystemNotification('maintenance_started', $systemData);
        $user->notify($notification);

        $this->assertDatabaseHas('notifications', [
            'notifiable_type' => User::class,
            'notifiable_id' => $user->id,
            'type' => SystemNotification::class,
        ]);

        $dbNotification = DatabaseNotification::where('notifiable_id', $user->id)->first();
        $this->assertEquals('system', $dbNotification->data['type']);
        $this->assertEquals('maintenance_started', $dbNotification->data['action']);
        $this->assertEquals($systemData, $dbNotification->data['data']);
    }

    public function test_notification_with_custom_message(): void
    {
        $user = User::factory()->create();
        $systemData = ['maintenance_type' => 'scheduled'];
        $customMessage = 'Custom system message';

        $notification = new SystemNotification('maintenance_started', $systemData, $customMessage);
        $data = $notification->toDatabase($user);

        $this->assertEquals($customMessage, $data['message']);
    }

    public function test_notification_defaults_to_empty_system_data(): void
    {
        $notification = new SystemNotification('maintenance_started');

        $this->assertEquals([], $notification->systemData);
    }
}
