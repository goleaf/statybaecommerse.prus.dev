<?php

declare(strict_types=1);

namespace Tests\Unit\Services;

use App\Models\Product;
use App\Services\InventoryService;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

final class InventoryServiceTest extends TestCase
{
    use RefreshDatabase;

    private InventoryService $inventoryService;

    protected function setUp(): void
    {
        parent::setUp();
        $this->inventoryService = app(InventoryService::class);
    }

    public function test_adjust_product_stock_increases_quantity(): void
    {
        $product = Product::factory()->create([
            'manage_stock' => true,
            'stock_quantity' => 10,
        ]);

        $result = $this->inventoryService->adjustProductStock($product, 5, 'restock');

        $this->assertTrue($result);
        $this->assertEquals(15, $product->fresh()->stock_quantity);
    }

    public function test_adjust_product_stock_decreases_quantity(): void
    {
        $product = Product::factory()->create([
            'manage_stock' => true,
            'stock_quantity' => 10,
        ]);

        $result = $this->inventoryService->adjustProductStock($product, -3, 'damaged');

        $this->assertTrue($result);
        $this->assertEquals(7, $product->fresh()->stock_quantity);
    }

    public function test_adjust_product_stock_never_goes_below_zero(): void
    {
        $product = Product::factory()->create([
            'manage_stock' => true,
            'stock_quantity' => 5,
        ]);

        $result = $this->inventoryService->adjustProductStock($product, -10, 'lost');

        $this->assertTrue($result);
        $this->assertEquals(0, $product->fresh()->stock_quantity);
    }

    public function test_adjust_product_stock_returns_true_for_non_tracked_products(): void
    {
        $product = Product::factory()->create([
            'manage_stock' => false,
            'stock_quantity' => 10,
        ]);

        $result = $this->inventoryService->adjustProductStock($product, 5, 'restock');

        $this->assertTrue($result);
        $this->assertEquals(10, $product->fresh()->stock_quantity); // Should not change
    }

    public function test_get_low_stock_products(): void
    {
        Product::factory()->create([
            'manage_stock' => true,
            'stock_quantity' => 3,
            'low_stock_threshold' => 5,
        ]);
        Product::factory()->create([
            'manage_stock' => true,
            'stock_quantity' => 10,
            'low_stock_threshold' => 5,
        ]);
        Product::factory()->create([
            'manage_stock' => false,
            'stock_quantity' => 1,
            'low_stock_threshold' => 5,
        ]);

        $lowStockProducts = $this->inventoryService->getLowStockProducts();

        $this->assertCount(1, $lowStockProducts);
        $this->assertEquals(3, $lowStockProducts->first()->stock_quantity);
    }

    public function test_get_out_of_stock_products(): void
    {
        Product::factory()->create([
            'manage_stock' => true,
            'stock_quantity' => 0,
        ]);
        Product::factory()->create([
            'manage_stock' => true,
            'stock_quantity' => 5,
        ]);
        Product::factory()->create([
            'manage_stock' => false,
            'stock_quantity' => 0,
        ]);

        $outOfStockProducts = $this->inventoryService->getOutOfStockProducts();

        $this->assertCount(1, $outOfStockProducts);
        $this->assertEquals(0, $outOfStockProducts->first()->stock_quantity);
    }

    public function test_get_inventory_summary(): void
    {
        Product::factory()->create([
            'manage_stock' => true,
            'stock_quantity' => 10,
            'low_stock_threshold' => 5,
        ]);
        Product::factory()->create([
            'manage_stock' => true,
            'stock_quantity' => 3,
            'low_stock_threshold' => 5,
        ]);
        Product::factory()->create([
            'manage_stock' => true,
            'stock_quantity' => 0,
        ]);
        Product::factory()->create([
            'manage_stock' => false,
        ]);

        $summary = $this->inventoryService->getInventorySummary();

        $this->assertEquals(4, $summary['total_products']);
        $this->assertEquals(3, $summary['tracked_products']);
        $this->assertEquals(1, $summary['in_stock']);
        $this->assertEquals(1, $summary['low_stock']);
        $this->assertEquals(1, $summary['out_of_stock']);
        $this->assertEquals(1, $summary['not_tracked']);
    }

    public function test_bulk_adjust_stock(): void
    {
        $product1 = Product::factory()->create([
            'manage_stock' => true,
            'stock_quantity' => 10,
        ]);
        $product2 = Product::factory()->create([
            'manage_stock' => true,
            'stock_quantity' => 20,
        ]);

        $adjustments = [
            [
                'product_id' => $product1->id,
                'quantity' => 5,
                'reason' => 'restock',
            ],
            [
                'product_id' => $product2->id,
                'quantity' => -3,
                'reason' => 'damaged',
            ],
        ];

        $results = $this->inventoryService->bulkAdjustStock($adjustments);

        $this->assertCount(2, $results);
        $this->assertTrue($results[0]['success']);
        $this->assertTrue($results[1]['success']);
        $this->assertEquals(15, $product1->fresh()->stock_quantity);
        $this->assertEquals(17, $product2->fresh()->stock_quantity);
    }

    public function test_bulk_adjust_stock_handles_invalid_product_id(): void
    {
        $adjustments = [
            [
                'product_id' => 999999,
                'quantity' => 5,
                'reason' => 'restock',
            ],
        ];

        $results = $this->inventoryService->bulkAdjustStock($adjustments);

        $this->assertCount(1, $results);
        $this->assertFalse($results[0]['success']);
        $this->assertEquals('Product not found', $results[0]['error']);
    }

    public function test_bulk_adjust_stock_handles_missing_product_id(): void
    {
        $adjustments = [
            [
                'quantity' => 5,
                'reason' => 'restock',
            ],
        ];

        $results = $this->inventoryService->bulkAdjustStock($adjustments);

        $this->assertCount(1, $results);
        $this->assertFalse($results[0]['success']);
        $this->assertEquals('Product ID is required', $results[0]['error']);
    }
}
