<?php

declare(strict_types=1);

namespace Tests\Unit\Notifications;

use App\Models\User;
use App\Notifications\TestNotification;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Notifications\DatabaseNotification;
use Tests\TestCase;

final class TestNotificationTest extends TestCase
{
    use RefreshDatabase;

    public function test_notification_can_be_created(): void
    {
        $notification = new TestNotification(
            title: 'Test Title',
            message: 'Test Message',
            type: 'info'
        );

        $this->assertEquals('Test Title', $notification->title);
        $this->assertEquals('Test Message', $notification->message);
        $this->assertEquals('info', $notification->type);
    }

    public function test_notification_uses_database_channel(): void
    {
        $user = User::factory()->create();
        $notification = new TestNotification('Test Title', 'Test Message', 'info');

        $channels = $notification->via($user);

        $this->assertEquals(['database'], $channels);
    }

    public function test_notification_database_data_structure(): void
    {
        $user = User::factory()->create();
        $notification = new TestNotification('Test Title', 'Test Message', 'warning');

        $data = $notification->toDatabase($user);

        $this->assertArrayHasKey('title', $data);
        $this->assertArrayHasKey('message', $data);
        $this->assertArrayHasKey('type', $data);
        $this->assertArrayHasKey('sent_at', $data);

        $this->assertEquals('Test Title', $data['title']);
        $this->assertEquals('Test Message', $data['message']);
        $this->assertEquals('warning', $data['type']);
        $this->assertIsString($data['sent_at']);
    }

    public function test_notification_can_be_sent_to_user(): void
    {
        $user = User::factory()->create();
        $notification = new TestNotification('Test Title', 'Test Message', 'success');

        $user->notify($notification);

        $this->assertDatabaseHas('notifications', [
            'notifiable_type' => User::class,
            'notifiable_id' => $user->id,
            'type' => TestNotification::class,
        ]);

        $dbNotification = DatabaseNotification::where('notifiable_id', $user->id)->first();
        $this->assertEquals('Test Title', $dbNotification->data['title']);
        $this->assertEquals('Test Message', $dbNotification->data['message']);
        $this->assertEquals('success', $dbNotification->data['type']);
    }

    public function test_notification_defaults_to_info_type(): void
    {
        $notification = new TestNotification('Test Title', 'Test Message');

        $this->assertEquals('info', $notification->type);
    }
}
