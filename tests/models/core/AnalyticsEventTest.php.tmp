<?php

declare(strict_types=1);

namespace Tests\Unit\Models;

use App\Models\AnalyticsEvent;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

final class AnalyticsEventTest extends TestCase
{
    use RefreshDatabase;

    public function test_analytics_event_can_be_created(): void
    {
        $user = User::factory()->create();

        $event = AnalyticsEvent::create([
            'event_type' => 'page_view',
            'session_id' => 'test-session-123',
            'user_id' => $user->id,
            'properties' => [],
            'properties' => ['page' => 'home', 'duration' => 30],
            'url' => 'https://example.com',
            'referrer' => 'https://google.com',
            'user_agent' => 'Mozilla/5.0 (Test Browser)',
            'ip_address' => '192.168.1.1',
            'country_code' => 'US',
            'created_at' => now(),
        ]);

        $this->assertInstanceOf(AnalyticsEvent::class, $event);
        $this->assertEquals('page_view', $event->event_type);
        $this->assertEquals('test-session-123', $event->session_id);
        $this->assertEquals($user->id, $event->user_id);
        $this->assertEquals(['page' => 'home', 'duration' => 30], $event->properties);
        $this->assertEquals('https://example.com', $event->url);
        $this->assertEquals('https://google.com', $event->referrer);
        $this->assertEquals('Mozilla/5.0 (Test Browser)', $event->user_agent);
        $this->assertEquals('192.168.1.1', $event->ip_address);
        $this->assertEquals('US', $event->country_code);
    }

    public function test_analytics_event_belongs_to_user(): void
    {
        $user = User::factory()->create();

        $event = AnalyticsEvent::create([
            'event_type' => 'product_view',
            'session_id' => 'test-session-456',
            'user_id' => $user->id,
            'properties' => [],
            'properties' => ['product_id' => 123],
            'url' => 'https://example.com/product/123',
            'created_at' => now(),
        ]);

        $this->assertInstanceOf(User::class, $event->user);
        $this->assertEquals($user->id, $event->user->id);
    }

    public function test_analytics_event_can_be_anonymous(): void
    {
        $event = AnalyticsEvent::create([
            'event_type' => 'page_view',
            'session_id' => 'anonymous-session-789',
            'user_id' => null,
            'properties' => ['page' => 'about'],
            'url' => 'https://example.com/about',
            'created_at' => now(),
        ]);

        $this->assertNull($event->user_id);
        $this->assertNull($event->user);
    }

    public function test_analytics_event_properties_are_casted_to_array(): void
    {
        $event = AnalyticsEvent::create([
            'event_type' => 'add_to_cart',
            'session_id' => 'test-session-101',
            'properties' => ['product_id' => 456, 'quantity' => 2, 'price' => 29.99],
            'url' => 'https://example.com/cart',
            'created_at' => now(),
        ]);

        $this->assertIsArray($event->properties);
        $this->assertEquals(456, $event->properties['product_id']);
        $this->assertEquals(2, $event->properties['quantity']);
        $this->assertEquals(29.99, $event->properties['price']);
    }

    public function test_analytics_event_has_scope_of_type(): void
    {
        $user = User::factory()->create();

        AnalyticsEvent::create([
            'event_type' => 'page_view',
            'session_id' => 'session-1',
            'user_id' => $user->id,
            'properties' => [],
            'created_at' => now(),
        ]);

        AnalyticsEvent::create([
            'event_type' => 'product_view',
            'session_id' => 'session-2',
            'user_id' => $user->id,
            'properties' => [],
            'created_at' => now(),
        ]);

        $pageViewEvents = AnalyticsEvent::ofType('page_view')->get();
        $productViewEvents = AnalyticsEvent::ofType('product_view')->get();

        $this->assertCount(1, $pageViewEvents);
        $this->assertCount(1, $productViewEvents);
        $this->assertEquals('page_view', $pageViewEvents->first()->event_type);
        $this->assertEquals('product_view', $productViewEvents->first()->event_type);
    }

    public function test_analytics_event_has_scope_for_session(): void
    {
        $user = User::factory()->create();

        AnalyticsEvent::create([
            'event_type' => 'page_view',
            'session_id' => 'session-abc',
            'user_id' => $user->id,
            'properties' => [],
            'created_at' => now(),
        ]);

        AnalyticsEvent::create([
            'event_type' => 'product_view',
            'session_id' => 'session-xyz',
            'user_id' => $user->id,
            'properties' => [],
            'created_at' => now(),
        ]);

        $sessionAbcEvents = AnalyticsEvent::forSession('session-abc')->get();
        $sessionXyzEvents = AnalyticsEvent::forSession('session-xyz')->get();

        $this->assertCount(1, $sessionAbcEvents);
        $this->assertCount(1, $sessionXyzEvents);
        $this->assertEquals('session-abc', $sessionAbcEvents->first()->session_id);
        $this->assertEquals('session-xyz', $sessionXyzEvents->first()->session_id);
    }

    public function test_analytics_event_has_scope_for_user(): void
    {
        $user1 = User::factory()->create();
        $user2 = User::factory()->create();

        AnalyticsEvent::create([
            'event_type' => 'page_view',
            'session_id' => 'session-1',
            'user_id' => $user1->id,
            'created_at' => now(),
        ]);

        AnalyticsEvent::create([
            'event_type' => 'product_view',
            'session_id' => 'session-2',
            'user_id' => $user2->id,
            'created_at' => now(),
        ]);

        $user1Events = AnalyticsEvent::forUser($user1->id)->get();
        $user2Events = AnalyticsEvent::forUser($user2->id)->get();

        $this->assertCount(1, $user1Events);
        $this->assertCount(1, $user2Events);
        $this->assertEquals($user1->id, $user1Events->first()->user_id);
        $this->assertEquals($user2->id, $user2Events->first()->user_id);
    }

    public function test_analytics_event_has_scope_in_date_range(): void
    {
        $user = User::factory()->create();

        AnalyticsEvent::create([
            'event_type' => 'page_view',
            'session_id' => 'session-1',
            'user_id' => $user->id,
            'properties' => [],
            'created_at' => now()->subDays(5),
        ]);

        AnalyticsEvent::create([
            'event_type' => 'product_view',
            'session_id' => 'session-2',
            'user_id' => $user->id,
            'properties' => [],
            'created_at' => now()->subDays(2),
        ]);

        AnalyticsEvent::create([
            'event_type' => 'purchase',
            'session_id' => 'session-3',
            'user_id' => $user->id,
            'properties' => [],
            'created_at' => now()->subDays(1),
        ]);

        $recentEvents = AnalyticsEvent::inDateRange(
            now()->subDays(3),
            now()
        )->get();

        $this->assertCount(2, $recentEvents);
        $this->assertTrue($recentEvents->contains('event_type', 'product_view'));
        $this->assertTrue($recentEvents->contains('event_type', 'purchase'));
        $this->assertFalse($recentEvents->contains('event_type', 'page_view'));
    }

    public function test_analytics_event_track_method_creates_event(): void
    {
        $user = User::factory()->create();

        // Mock the session and request
        $this->actingAs($user);

        $event = AnalyticsEvent::track('test_event', ['key' => 'value'], 'https://example.com/test');

        $this->assertInstanceOf(AnalyticsEvent::class, $event);
        $this->assertEquals('test_event', $event->event_type);
        $this->assertEquals($user->id, $event->user_id);
        $this->assertEquals(['key' => 'value'], $event->properties);
        $this->assertEquals('https://example.com/test', $event->url);
        $this->assertNotNull($event->session_id);
        $this->assertNotNull($event->created_at);
    }

    public function test_analytics_event_track_method_with_anonymous_user(): void
    {
        $event = AnalyticsEvent::track('anonymous_event', ['page' => 'home']);

        $this->assertInstanceOf(AnalyticsEvent::class, $event);
        $this->assertEquals('anonymous_event', $event->event_type);
        $this->assertNull($event->user_id);
        $this->assertEquals(['page' => 'home'], $event->properties);
        $this->assertNotNull($event->session_id);
        $this->assertNotNull($event->created_at);
    }
}
