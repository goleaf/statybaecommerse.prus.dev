<?php

declare(strict_types=1);

namespace Tests\Feature;

use App\Models\ProductVariant;
use App\Models\User;
use App\Models\VariantStockHistory;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Livewire\Livewire;
use Tests\TestCase;

class VariantStockHistoryResourceTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp();

        $this->actingAs(User::factory()->create());
    }

    public function test_can_list_variant_stock_histories(): void
    {
        VariantStockHistory::factory()->count(3)->create();

        Livewire::test(\App\Filament\Resources\VariantStockHistoryResource\Pages\ListVariantStockHistories::class)
            ->assertCanSeeTableRecords(VariantStockHistory::all());
    }

    public function test_can_create_variant_stock_history(): void
    {
        $variant = ProductVariant::factory()->create();
        $user = User::factory()->create();

        Livewire::test(\App\Filament\Resources\VariantStockHistoryResource\Pages\CreateVariantStockHistory::class)
            ->fillForm([
                'variant_id' => $variant->id,
                'old_quantity' => 10,
                'new_quantity' => 15,
                'change_type' => 'increase',
                'change_reason' => 'manual',
                'changed_by' => $user->id,
                'reference_type' => 'order',
                'reference_id' => 123,
            ])
            ->call('create')
            ->assertHasNoFormErrors();

        $this->assertDatabaseHas('variant_stock_history', [
            'variant_id' => $variant->id,
            'old_quantity' => 10,
            'new_quantity' => 15,
            'change_type' => 'increase',
            'change_reason' => 'manual',
            'changed_by' => $user->id,
            'reference_type' => 'order',
            'reference_id' => 123,
        ]);
    }

    public function test_can_edit_variant_stock_history(): void
    {
        $stockHistory = VariantStockHistory::factory()->create();

        Livewire::test(\App\Filament\Resources\VariantStockHistoryResource\Pages\EditVariantStockHistory::class, [
            'record' => $stockHistory->getRouteKey(),
        ])
            ->fillForm([
                'change_reason' => 'sale',
            ])
            ->call('save')
            ->assertHasNoFormErrors();

        $this->assertDatabaseHas('variant_stock_history', [
            'id' => $stockHistory->id,
            'change_reason' => 'sale',
        ]);
    }

    public function test_can_view_variant_stock_history(): void
    {
        $stockHistory = VariantStockHistory::factory()->create();

        Livewire::test(\App\Filament\Resources\VariantStockHistoryResource\Pages\ViewVariantStockHistory::class, [
            'record' => $stockHistory->getRouteKey(),
        ])
            ->assertFormSet([
                'variant_id' => $stockHistory->variant_id,
                'old_quantity' => $stockHistory->old_quantity,
                'new_quantity' => $stockHistory->new_quantity,
            ]);
    }

    public function test_can_filter_variant_stock_histories_by_change_type(): void
    {
        VariantStockHistory::factory()->create(['change_type' => 'increase']);
        VariantStockHistory::factory()->create(['change_type' => 'decrease']);

        Livewire::test(\App\Filament\Resources\VariantStockHistoryResource\Pages\ListVariantStockHistories::class)
            ->filterTable('change_type', 'increase')
            ->assertCanSeeTableRecords(VariantStockHistory::where('change_type', 'increase')->get())
            ->assertCanNotSeeTableRecords(VariantStockHistory::where('change_type', 'decrease')->get());
    }

    public function test_can_filter_variant_stock_histories_by_change_reason(): void
    {
        VariantStockHistory::factory()->create(['change_reason' => 'sale']);
        VariantStockHistory::factory()->create(['change_reason' => 'return']);

        Livewire::test(\App\Filament\Resources\VariantStockHistoryResource\Pages\ListVariantStockHistories::class)
            ->filterTable('change_reason', 'sale')
            ->assertCanSeeTableRecords(VariantStockHistory::where('change_reason', 'sale')->get())
            ->assertCanNotSeeTableRecords(VariantStockHistory::where('change_reason', 'return')->get());
    }

    public function test_can_filter_variant_stock_histories_by_variant(): void
    {
        $variant1 = ProductVariant::factory()->create();
        $variant2 = ProductVariant::factory()->create();

        VariantStockHistory::factory()->create(['variant_id' => $variant1->id]);
        VariantStockHistory::factory()->create(['variant_id' => $variant2->id]);

        Livewire::test(\App\Filament\Resources\VariantStockHistoryResource\Pages\ListVariantStockHistories::class)
            ->filterTable('variant_id', $variant1->id)
            ->assertCanSeeTableRecords(VariantStockHistory::where('variant_id', $variant1->id)->get())
            ->assertCanNotSeeTableRecords(VariantStockHistory::where('variant_id', $variant2->id)->get());
    }

    public function test_can_search_variant_stock_histories(): void
    {
        $variant = ProductVariant::factory()->create(['name' => 'Test Variant']);
        VariantStockHistory::factory()->create(['variant_id' => $variant->id]);

        Livewire::test(\App\Filament\Resources\VariantStockHistoryResource\Pages\ListVariantStockHistories::class)
            ->searchTable('Test Variant')
            ->assertCanSeeTableRecords(VariantStockHistory::whereHas('variant', function ($query) {
                $query->where('name', 'like', '%Test Variant%');
            })->get());
    }

    public function test_can_sort_variant_stock_histories(): void
    {
        VariantStockHistory::factory()->create(['old_quantity' => 10]);
        VariantStockHistory::factory()->create(['old_quantity' => 20]);

        Livewire::test(\App\Filament\Resources\VariantStockHistoryResource\Pages\ListVariantStockHistories::class)
            ->sortTable('old_quantity')
            ->assertCanSeeTableRecords(VariantStockHistory::orderBy('old_quantity')->get());
    }

    public function test_can_bulk_delete_variant_stock_histories(): void
    {
        $stockHistories = VariantStockHistory::factory()->count(3)->create();

        Livewire::test(\App\Filament\Resources\VariantStockHistoryResource\Pages\ListVariantStockHistories::class)
            ->callTableBulkAction('delete', $stockHistories)
            ->assertHasNoTableBulkActionErrors();

        $this->assertDatabaseMissing('variant_stock_history', [
            'id' => $stockHistories->first()->id,
        ]);
    }

    public function test_form_validation_works(): void
    {
        Livewire::test(\App\Filament\Resources\VariantStockHistoryResource\Pages\CreateVariantStockHistory::class)
            ->fillForm([
                'variant_id' => null,
                'new_quantity' => -1,
            ])
            ->call('create')
            ->assertHasFormErrors(['variant_id', 'new_quantity']);
    }

    public function test_variant_stock_history_relationships_work(): void
    {
        $variant = ProductVariant::factory()->create();
        $user = User::factory()->create();
        $stockHistory = VariantStockHistory::factory()->create([
            'variant_id' => $variant->id,
            'changed_by' => $user->id,
        ]);

        $this->assertInstanceOf(ProductVariant::class, $stockHistory->variant);
        $this->assertInstanceOf(User::class, $stockHistory->changedBy);
        $this->assertEquals($variant->id, $stockHistory->variant->id);
        $this->assertEquals($user->id, $stockHistory->changedBy->id);
    }

    public function test_variant_stock_history_scopes_work(): void
    {
        VariantStockHistory::factory()->create(['change_type' => 'increase']);
        VariantStockHistory::factory()->create(['change_type' => 'decrease']);

        $increases = VariantStockHistory::increases()->get();
        $decreases = VariantStockHistory::decreases()->get();

        $this->assertCount(1, $increases);
        $this->assertCount(1, $decreases);
        $this->assertEquals('increase', $increases->first()->change_type);
        $this->assertEquals('decrease', $decreases->first()->change_type);
    }

    public function test_quantity_change_is_calculated_correctly(): void
    {
        $stockHistory = VariantStockHistory::factory()->create([
            'old_quantity' => 10,
            'new_quantity' => 15,
        ]);

        $this->assertEquals(5, $stockHistory->quantity_change);
    }

    public function test_is_increase_and_is_decrease_work(): void
    {
        $increase = VariantStockHistory::factory()->create(['quantity_change' => 5]);
        $decrease = VariantStockHistory::factory()->create(['quantity_change' => -3]);

        $this->assertTrue($increase->isIncrease());
        $this->assertFalse($increase->isDecrease());
        $this->assertFalse($decrease->isIncrease());
        $this->assertTrue($decrease->isDecrease());
    }

    public function test_absolute_change_attribute_works(): void
    {
        $stockHistory = VariantStockHistory::factory()->create(['quantity_change' => -5]);

        $this->assertEquals(5, $stockHistory->absolute_change);
    }
}
