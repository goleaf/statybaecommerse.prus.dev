<?php

declare(strict_types=1);

namespace Tests\Feature;

use App\Models\SystemSettingCategory;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Livewire\Livewire;
use Tests\TestCase;

class SystemSettingCategoryResourceTest extends TestCase
{
    use RefreshDatabase;

    protected User $adminUser;

    protected function setUp(): void
    {
        parent::setUp();

        $this->adminUser = User::factory()->create([
            'email' => 'admin@example.com',
            'is_admin' => true,
        ]);
    }

    public function test_can_list_system_setting_categories(): void
    {
        $categories = SystemSettingCategory::factory()->count(3)->create();

        Livewire::actingAs($this->adminUser)
            ->test('filament.admin.resources.system-setting-categories.pages.list-system-setting-categories')
            ->assertCanSeeTableRecords($categories);
    }

    public function test_can_create_system_setting_category(): void
    {
        $categoryData = [
            'name' => 'Test Category',
            'slug' => 'test-category',
            'description' => 'Test description',
            'icon' => 'heroicon-o-cog',
            'color' => '#FF0000',
            'sort_order' => 1,
            'is_active' => true,
        ];

        Livewire::actingAs($this->adminUser)
            ->test('filament.admin.resources.system-setting-categories.pages.create-system-setting-category')
            ->fillForm($categoryData)
            ->call('create')
            ->assertHasNoFormErrors();

        $this->assertDatabaseHas('system_setting_categories', [
            'name' => 'Test Category',
            'slug' => 'test-category',
            'description' => 'Test description',
            'icon' => 'heroicon-o-cog',
            'color' => '#FF0000',
            'sort_order' => 1,
            'is_active' => true,
        ]);
    }

    public function test_can_edit_system_setting_category(): void
    {
        $category = SystemSettingCategory::factory()->create([
            'name' => 'Original Name',
            'slug' => 'original-slug',
        ]);

        $updatedData = [
            'name' => 'Updated Name',
            'slug' => 'updated-slug',
            'description' => 'Updated description',
        ];

        Livewire::actingAs($this->adminUser)
            ->test('filament.admin.resources.system-setting-categories.pages.edit-system-setting-category', ['record' => $category->id])
            ->fillForm($updatedData)
            ->call('save')
            ->assertHasNoFormErrors();

        $this->assertDatabaseHas('system_setting_categories', [
            'id' => $category->id,
            'name' => 'Updated Name',
            'slug' => 'updated-slug',
            'description' => 'Updated description',
        ]);
    }

    public function test_can_view_system_setting_category(): void
    {
        $category = SystemSettingCategory::factory()->create([
            'name' => 'Test Category',
            'description' => 'Test description',
        ]);

        Livewire::actingAs($this->adminUser)
            ->test('filament.admin.resources.system-setting-categories.pages.view-system-setting-category', ['record' => $category->id])
            ->assertFormSet([
                'name' => 'Test Category',
                'description' => 'Test description',
            ]);
    }

    public function test_can_delete_system_setting_category(): void
    {
        $category = SystemSettingCategory::factory()->create();

        Livewire::actingAs($this->adminUser)
            ->test('filament.admin.resources.system-setting-categories.pages.list-system-setting-categories')
            ->callTableAction('delete', $category);

        $this->assertSoftDeleted('system_setting_categories', [
            'id' => $category->id,
        ]);
    }

    public function test_can_duplicate_system_setting_category(): void
    {
        $category = SystemSettingCategory::factory()->create([
            'name' => 'Original Category',
            'slug' => 'original-category',
        ]);

        Livewire::actingAs($this->adminUser)
            ->test('filament.admin.resources.system-setting-categories.pages.list-system-setting-categories')
            ->callTableAction('duplicate', $category);

        $this->assertDatabaseHas('system_setting_categories', [
            'name' => 'Original Category (Copy)',
            'slug' => 'original-category-copy',
        ]);
    }

    public function test_can_bulk_activate_categories(): void
    {
        $categories = SystemSettingCategory::factory()->count(3)->create([
            'is_active' => false,
        ]);

        Livewire::actingAs($this->adminUser)
            ->test('filament.admin.resources.system-setting-categories.pages.list-system-setting-categories')
            ->callTableBulkAction('activate', $categories);

        foreach ($categories as $category) {
            $this->assertDatabaseHas('system_setting_categories', [
                'id' => $category->id,
                'is_active' => true,
            ]);
        }
    }

    public function test_can_bulk_deactivate_categories(): void
    {
        $categories = SystemSettingCategory::factory()->count(3)->create([
            'is_active' => true,
        ]);

        Livewire::actingAs($this->adminUser)
            ->test('filament.admin.resources.system-setting-categories.pages.list-system-setting-categories')
            ->callTableBulkAction('deactivate', $categories);

        foreach ($categories as $category) {
            $this->assertDatabaseHas('system_setting_categories', [
                'id' => $category->id,
                'is_active' => false,
            ]);
        }
    }

    public function test_can_filter_categories_by_parent(): void
    {
        $parentCategory = SystemSettingCategory::factory()->create(['name' => 'Parent Category']);
        $childCategory = SystemSettingCategory::factory()->create([
            'parent_id' => $parentCategory->id,
            'name' => 'Child Category',
        ]);
        $otherCategory = SystemSettingCategory::factory()->create(['name' => 'Other Category']);

        Livewire::actingAs($this->adminUser)
            ->test('filament.admin.resources.system-setting-categories.pages.list-system-setting-categories')
            ->filterTable('parent_id', $parentCategory->id)
            ->assertCanSeeTableRecords([$childCategory])
            ->assertCanNotSeeTableRecords([$otherCategory]);
    }

    public function test_can_filter_categories_by_active_status(): void
    {
        $activeCategory = SystemSettingCategory::factory()->create(['is_active' => true]);
        $inactiveCategory = SystemSettingCategory::factory()->create(['is_active' => false]);

        Livewire::actingAs($this->adminUser)
            ->test('filament.admin.resources.system-setting-categories.pages.list-system-setting-categories')
            ->filterTable('is_active', true)
            ->assertCanSeeTableRecords([$activeCategory])
            ->assertCanNotSeeTableRecords([$inactiveCategory]);
    }

    public function test_can_search_categories_by_name(): void
    {
        $category1 = SystemSettingCategory::factory()->create(['name' => 'Test Category One']);
        $category2 = SystemSettingCategory::factory()->create(['name' => 'Test Category Two']);
        $category3 = SystemSettingCategory::factory()->create(['name' => 'Different Category']);

        Livewire::actingAs($this->adminUser)
            ->test('filament.admin.resources.system-setting-categories.pages.list-system-setting-categories')
            ->searchTable('Test Category')
            ->assertCanSeeTableRecords([$category1, $category2])
            ->assertCanNotSeeTableRecords([$category3]);
    }

    public function test_validates_required_fields(): void
    {
        Livewire::actingAs($this->adminUser)
            ->test('filament.admin.resources.system-setting-categories.pages.create-system-setting-category')
            ->fillForm([])
            ->call('create')
            ->assertHasFormErrors(['name', 'slug']);
    }

    public function test_validates_unique_slug(): void
    {
        $existingCategory = SystemSettingCategory::factory()->create(['slug' => 'existing-slug']);

        Livewire::actingAs($this->adminUser)
            ->test('filament.admin.resources.system-setting-categories.pages.create-system-setting-category')
            ->fillForm([
                'name' => 'Test Category',
                'slug' => 'existing-slug',
            ])
            ->call('create')
            ->assertHasFormErrors(['slug']);
    }

    public function test_auto_generates_slug_from_name(): void
    {
        Livewire::actingAs($this->adminUser)
            ->test('filament.admin.resources.system-setting-categories.pages.create-system-setting-category')
            ->fillForm([
                'name' => 'Test Category Name',
                'slug' => '', // Will be auto-generated
            ])
            ->call('create')
            ->assertHasNoFormErrors();

        $this->assertDatabaseHas('system_setting_categories', [
            'name' => 'Test Category Name',
            'slug' => 'test-category-name',
        ]);
    }

    public function test_can_set_parent_category(): void
    {
        $parentCategory = SystemSettingCategory::factory()->create(['name' => 'Parent Category']);
        $childData = [
            'name' => 'Child Category',
            'slug' => 'child-category',
            'parent_id' => $parentCategory->id,
        ];

        Livewire::actingAs($this->adminUser)
            ->test('filament.admin.resources.system-setting-categories.pages.create-system-setting-category')
            ->fillForm($childData)
            ->call('create')
            ->assertHasNoFormErrors();

        $this->assertDatabaseHas('system_setting_categories', [
            'name' => 'Child Category',
            'slug' => 'child-category',
            'parent_id' => $parentCategory->id,
        ]);
    }

    public function test_displays_settings_count(): void
    {
        $category = SystemSettingCategory::factory()->create();
        // Note: This would require SystemSetting model and factory to be created

        Livewire::actingAs($this->adminUser)
            ->test('filament.admin.resources.system-setting-categories.pages.list-system-setting-categories')
            ->assertCanSeeTableRecords([$category]);
    }

    public function test_sorts_by_sort_order_by_default(): void
    {
        $category1 = SystemSettingCategory::factory()->create(['sort_order' => 3, 'name' => 'Third']);
        $category2 = SystemSettingCategory::factory()->create(['sort_order' => 1, 'name' => 'First']);
        $category3 = SystemSettingCategory::factory()->create(['sort_order' => 2, 'name' => 'Second']);

        Livewire::actingAs($this->adminUser)
            ->test('filament.admin.resources.system-setting-categories.pages.list-system-setting-categories')
            ->assertCanSeeTableRecordsInOrder([$category2, $category3, $category1]);
    }
}
