<?php

declare(strict_types=1);

namespace Tests\Feature;

use App\Filament\Resources\OrderResource\RelationManagers\OrderShippingRelationManager;
use App\Models\Order;
use App\Models\OrderShipping;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Livewire\Livewire;
use Tests\TestCase;

/**
 * OrderShippingRelationManagerTest
 *
 * Comprehensive test suite for OrderShippingRelationManager with Filament v4 compatibility
 */
final class OrderShippingRelationManagerTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp();

        $this->user = User::factory()->create();
        $this->order = Order::factory()->create(['user_id' => $this->user->id]);
    }

    /**
     * @test
     */
    public function it_can_render_order_shipping_relation_manager(): void
    {
        $this->actingAs($this->user);

        $component = Livewire::test(OrderShippingRelationManager::class, [
            'ownerRecord' => $this->order,
        ]);

        $component->assertSuccessful();
    }

    /**
     * @test
     */
    public function it_can_create_order_shipping(): void
    {
        $this->actingAs($this->user);

        $component = Livewire::test(OrderShippingRelationManager::class, [
            'ownerRecord' => $this->order,
        ]);

        $component
            ->call('create')
            ->assertFormExists()
            ->fillForm([
                'shipping_method' => 'express',
                'tracking_number' => 'TRK123456789',
                'carrier' => 'DHL',
                'service_type' => 'Express',
                'base_cost' => 15.0,
                'insurance_cost' => 5.0,
                'total_cost' => 20.0,
            ])
            ->call('create')
            ->assertHasNoFormErrors();

        $this->assertDatabaseHas('order_shippings', [
            'order_id' => $this->order->id,
            'shipping_method' => 'express',
            'tracking_number' => 'TRK123456789',
            'carrier' => 'DHL',
        ]);
    }

    /**
     * @test
     */
    public function it_can_mark_shipping_as_shipped(): void
    {
        $this->actingAs($this->user);

        $shipping = OrderShipping::factory()->create([
            'order_id' => $this->order->id,
            'status' => 'pending',
        ]);

        $component = Livewire::test(OrderShippingRelationManager::class, [
            'ownerRecord' => $this->order,
        ]);

        $component
            ->call('mark_shipped', $shipping)
            ->assertHasNoFormErrors();

        $this->assertDatabaseHas('order_shippings', [
            'id' => $shipping->id,
            'status' => 'shipped',
        ]);
    }

    /**
     * @test
     */
    public function it_can_mark_shipping_as_delivered(): void
    {
        $this->actingAs($this->user);

        $shipping = OrderShipping::factory()->create([
            'order_id' => $this->order->id,
            'status' => 'shipped',
        ]);

        $component = Livewire::test(OrderShippingRelationManager::class, [
            'ownerRecord' => $this->order,
        ]);

        $component
            ->call('mark_delivered', $shipping)
            ->assertHasNoFormErrors();

        $this->assertDatabaseHas('order_shippings', [
            'id' => $shipping->id,
            'status' => 'delivered',
            'is_delivered' => true,
        ]);
    }

    /**
     * @test
     */
    public function it_can_filter_by_shipping_method(): void
    {
        $this->actingAs($this->user);

        OrderShipping::factory()->create([
            'order_id' => $this->order->id,
            'shipping_method' => 'standard',
        ]);

        OrderShipping::factory()->create([
            'order_id' => $this->order->id,
            'shipping_method' => 'express',
        ]);

        $component = Livewire::test(OrderShippingRelationManager::class, [
            'ownerRecord' => $this->order,
        ]);

        $component
            ->filterTable('shipping_method', 'express')
            ->assertCanSeeTableRecords(
                OrderShipping::where('shipping_method', 'express')->get()
            );
    }

    /**
     * @test
     */
    public function it_can_perform_bulk_mark_shipped(): void
    {
        $this->actingAs($this->user);

        $shippings = OrderShipping::factory()->count(2)->create([
            'order_id' => $this->order->id,
            'status' => 'pending',
        ]);

        $component = Livewire::test(OrderShippingRelationManager::class, [
            'ownerRecord' => $this->order,
        ]);

        $component
            ->callTableBulkAction('mark_shipped', $shippings)
            ->assertHasNoFormErrors();

        foreach ($shippings as $shipping) {
            $this->assertDatabaseHas('order_shippings', [
                'id' => $shipping->id,
                'status' => 'shipped',
            ]);
        }
    }
}
