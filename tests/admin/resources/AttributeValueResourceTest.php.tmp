<?php

declare(strict_types=1);

namespace Tests\Feature;

use App\Models\Attribute;
use App\Models\AttributeValue;
use App\Models\Product;
use App\Models\Translations\AttributeValueTranslation;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class AttributeValueResourceTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp();

        $user = User::factory()->create();
        $this->actingAs($user);
    }

    public function test_attribute_value_resource_index_page_loads(): void
    {
        $attribute = Attribute::factory()->create();
        $attributeValue = AttributeValue::factory()->create(['attribute_id' => $attribute->id]);

        $response = $this->get('/admin/attribute-values');

        $response->assertStatus(200);
    }

    public function test_attribute_value_resource_create_page_loads(): void
    {
        $response = $this->get('/admin/attribute-values/create');

        $response->assertStatus(200);
    }

    public function test_attribute_value_resource_can_create_attribute_value(): void
    {
        $attribute = Attribute::factory()->create();

        $response = $this->post('/admin/attribute-values', [
            'attribute_id' => $attribute->id,
            'value' => 'Test Value',
            'description' => 'Test Description',
            'color_code' => '#FF0000',
            'sort_order' => 1,
            'is_enabled' => true,
            'is_required' => false,
            'is_default' => false,
        ]);

        $response->assertRedirect('/admin/attribute-values');

        $this->assertDatabaseHas('attribute_values', [
            'attribute_id' => $attribute->id,
            'value' => 'Test Value',
            'description' => 'Test Description',
            'color_code' => '#FF0000',
            'sort_order' => 1,
            'is_enabled' => true,
            'is_required' => false,
            'is_default' => false,
        ]);
    }

    public function test_attribute_value_resource_can_create_with_translations(): void
    {
        $attribute = Attribute::factory()->create();

        $response = $this->post('/admin/attribute-values', [
            'attribute_id' => $attribute->id,
            'value' => 'Test Value',
            'translations' => [
                [
                    'locale' => 'en',
                    'value' => 'English Value',
                    'description' => 'English Description',
                ],
                [
                    'locale' => 'lt',
                    'value' => 'Lithuanian Value',
                    'description' => 'Lithuanian Description',
                ],
            ],
        ]);

        $response->assertRedirect('/admin/attribute-values');

        $attributeValue = AttributeValue::where('value', 'Test Value')->first();
        $this->assertNotNull($attributeValue);

        $this->assertDatabaseHas('attribute_value_translations', [
            'attribute_value_id' => $attributeValue->id,
            'locale' => 'en',
            'value' => 'English Value',
            'description' => 'English Description',
        ]);

        $this->assertDatabaseHas('attribute_value_translations', [
            'attribute_value_id' => $attributeValue->id,
            'locale' => 'lt',
            'value' => 'Lithuanian Value',
            'description' => 'Lithuanian Description',
        ]);
    }

    public function test_attribute_value_resource_edit_page_loads(): void
    {
        $attribute = Attribute::factory()->create();
        $attributeValue = AttributeValue::factory()->create(['attribute_id' => $attribute->id]);

        $response = $this->get("/admin/attribute-values/{$attributeValue->id}/edit");

        $response->assertStatus(200);
    }

    public function test_attribute_value_resource_can_update_attribute_value(): void
    {
        $attribute = Attribute::factory()->create();
        $attributeValue = AttributeValue::factory()->create([
            'attribute_id' => $attribute->id,
            'value' => 'Original Value',
        ]);

        $response = $this->put("/admin/attribute-values/{$attributeValue->id}", [
            'attribute_id' => $attribute->id,
            'value' => 'Updated Value',
            'description' => 'Updated Description',
            'color_code' => '#00FF00',
            'sort_order' => 2,
            'is_enabled' => false,
            'is_required' => true,
            'is_default' => true,
        ]);

        $response->assertRedirect("/admin/attribute-values/{$attributeValue->id}/edit");

        $this->assertDatabaseHas('attribute_values', [
            'id' => $attributeValue->id,
            'value' => 'Updated Value',
            'description' => 'Updated Description',
            'color_code' => '#00FF00',
            'sort_order' => 2,
            'is_enabled' => false,
            'is_required' => true,
            'is_default' => true,
        ]);
    }

    public function test_attribute_value_resource_can_update_translations(): void
    {
        $attribute = Attribute::factory()->create();
        $attributeValue = AttributeValue::factory()->create(['attribute_id' => $attribute->id]);

        $translation = AttributeValueTranslation::factory()->create([
            'attribute_value_id' => $attributeValue->id,
            'locale' => 'en',
            'value' => 'Original English Value',
        ]);

        $response = $this->put("/admin/attribute-values/{$attributeValue->id}", [
            'attribute_id' => $attribute->id,
            'value' => 'Updated Value',
            'translations' => [
                [
                    'id' => $translation->id,
                    'locale' => 'en',
                    'value' => 'Updated English Value',
                    'description' => 'Updated English Description',
                ],
                [
                    'locale' => 'lt',
                    'value' => 'Lithuanian Value',
                    'description' => 'Lithuanian Description',
                ],
            ],
        ]);

        $response->assertRedirect("/admin/attribute-values/{$attributeValue->id}/edit");

        $this->assertDatabaseHas('attribute_value_translations', [
            'id' => $translation->id,
            'value' => 'Updated English Value',
            'description' => 'Updated English Description',
        ]);

        $this->assertDatabaseHas('attribute_value_translations', [
            'attribute_value_id' => $attributeValue->id,
            'locale' => 'lt',
            'value' => 'Lithuanian Value',
            'description' => 'Lithuanian Description',
        ]);
    }

    public function test_attribute_value_resource_can_delete_attribute_value(): void
    {
        $attribute = Attribute::factory()->create();
        $attributeValue = AttributeValue::factory()->create(['attribute_id' => $attribute->id]);

        $response = $this->delete("/admin/attribute-values/{$attributeValue->id}");

        $response->assertRedirect('/admin/attribute-values');

        $this->assertSoftDeleted('attribute_values', [
            'id' => $attributeValue->id,
        ]);
    }

    public function test_attribute_value_resource_view_page_loads(): void
    {
        $attribute = Attribute::factory()->create();
        $attributeValue = AttributeValue::factory()->create(['attribute_id' => $attribute->id]);

        $response = $this->get("/admin/attribute-values/{$attributeValue->id}");

        $response->assertStatus(200);
    }

    public function test_attribute_value_resource_can_restore_deleted_attribute_value(): void
    {
        $attribute = Attribute::factory()->create();
        $attributeValue = AttributeValue::factory()->create(['attribute_id' => $attribute->id]);
        $attributeValue->delete();

        $response = $this->post("/admin/attribute-values/{$attributeValue->id}/restore");

        $response->assertRedirect('/admin/attribute-values');

        $this->assertDatabaseHas('attribute_values', [
            'id' => $attributeValue->id,
            'deleted_at' => null,
        ]);
    }

    public function test_attribute_value_resource_can_force_delete_attribute_value(): void
    {
        $attribute = Attribute::factory()->create();
        $attributeValue = AttributeValue::factory()->create(['attribute_id' => $attribute->id]);
        $attributeValue->delete();

        $response = $this->delete("/admin/attribute-values/{$attributeValue->id}/force-delete");

        $response->assertRedirect('/admin/attribute-values');

        $this->assertDatabaseMissing('attribute_values', [
            'id' => $attributeValue->id,
        ]);
    }

    public function test_attribute_value_resource_filters_work(): void
    {
        $attribute1 = Attribute::factory()->create();
        $attribute2 = Attribute::factory()->create();

        $enabledValue = AttributeValue::factory()->create([
            'attribute_id' => $attribute1->id,
            'is_enabled' => true,
        ]);

        $disabledValue = AttributeValue::factory()->create([
            'attribute_id' => $attribute2->id,
            'is_enabled' => false,
        ]);

        // Test enabled filter
        $response = $this->get('/admin/attribute-values?is_enabled=1');
        $response->assertStatus(200);

        // Test disabled filter
        $response = $this->get('/admin/attribute-values?is_enabled=0');
        $response->assertStatus(200);

        // Test attribute filter
        $response = $this->get("/admin/attribute-values?attribute_id={$attribute1->id}");
        $response->assertStatus(200);
    }

    public function test_attribute_value_resource_search_works(): void
    {
        $attribute = Attribute::factory()->create();
        $attributeValue1 = AttributeValue::factory()->create([
            'attribute_id' => $attribute->id,
            'value' => 'Red Color',
        ]);
        $attributeValue2 = AttributeValue::factory()->create([
            'attribute_id' => $attribute->id,
            'value' => 'Blue Color',
        ]);

        $response = $this->get('/admin/attribute-values?search=Red');
        $response->assertStatus(200);
    }

    public function test_attribute_value_resource_bulk_actions_work(): void
    {
        $attribute = Attribute::factory()->create();
        $attributeValue1 = AttributeValue::factory()->create(['attribute_id' => $attribute->id]);
        $attributeValue2 = AttributeValue::factory()->create(['attribute_id' => $attribute->id]);

        $response = $this->post('/admin/attribute-values/bulk-actions', [
            'action' => 'delete',
            'records' => [$attributeValue1->id, $attributeValue2->id],
        ]);

        $response->assertRedirect('/admin/attribute-values');

        $this->assertSoftDeleted('attribute_values', [
            'id' => $attributeValue1->id,
        ]);

        $this->assertSoftDeleted('attribute_values', [
            'id' => $attributeValue2->id,
        ]);
    }

    public function test_attribute_value_resource_relations_work(): void
    {
        $attribute = Attribute::factory()->create();
        $attributeValue = AttributeValue::factory()->create(['attribute_id' => $attribute->id]);
        $product = Product::factory()->create();
        $attributeValue->products()->attach($product->id);

        $response = $this->get("/admin/attribute-values/{$attributeValue->id}");

        $response->assertStatus(200);
        $response->assertSee($product->getDisplayName());
    }

    public function test_attribute_value_resource_widgets_load(): void
    {
        $attribute = Attribute::factory()->create();
        AttributeValue::factory()->count(5)->create(['attribute_id' => $attribute->id]);

        $response = $this->get('/admin/attribute-values');

        $response->assertStatus(200);
    }

    public function test_attribute_value_resource_validation_works(): void
    {
        $response = $this->post('/admin/attribute-values', [
            'value' => '',  // Required field
        ]);

        $response->assertSessionHasErrors(['attribute_id', 'value']);
    }

    public function test_attribute_value_resource_unique_slug_validation(): void
    {
        $attribute = Attribute::factory()->create();
        $attributeValue1 = AttributeValue::factory()->create([
            'attribute_id' => $attribute->id,
            'slug' => 'test-slug',
        ]);

        $response = $this->post('/admin/attribute-values', [
            'attribute_id' => $attribute->id,
            'value' => 'Test Value',
            'slug' => 'test-slug',  // Duplicate slug
        ]);

        $response->assertSessionHasErrors(['slug']);
    }

    public function test_attribute_value_resource_meta_data_handling(): void
    {
        $attribute = Attribute::factory()->create();

        $response = $this->post('/admin/attribute-values', [
            'attribute_id' => $attribute->id,
            'value' => 'Test Value',
            'meta_data' => [
                'created_by' => 'admin',
                'version' => '1.0',
                'tags' => ['red', 'color'],
            ],
        ]);

        $response->assertRedirect('/admin/attribute-values');

        $attributeValue = AttributeValue::where('value', 'Test Value')->first();
        $this->assertNotNull($attributeValue);
        $this->assertEquals([
            'created_by' => 'admin',
            'version' => '1.0',
            'tags' => ['red', 'color'],
        ], $attributeValue->meta_data);
    }
}
