<?php

declare(strict_types=1);

namespace Tests\Feature;

use App\Models\SeoData;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

final class SeoDataResourceTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp();

        $this->actingAs(User::factory()->create());
    }

    public function test_can_create_seo_data(): void
    {
        $seoData = [
            'title' => 'Test SEO Title',
            'description' => 'Test SEO description',
            'keywords' => 'test, seo, keywords',
            'type' => 'page',
            'url' => '/test-page',
            'is_active' => true,
            'is_indexed' => true,
        ];

        $seo = SeoData::create($seoData);

        $this->assertDatabaseHas('seo_data', [
            'title' => json_encode(['lt' => 'Test SEO Title']),
            'description' => json_encode(['lt' => 'Test SEO description']),
            'keywords' => json_encode(['lt' => 'test, seo, keywords']),
            'type' => 'page',
            'url' => '/test-page',
        ]);

        $this->assertEquals('Test SEO Title', $seo->title);
        $this->assertEquals('page', $seo->type);
        $this->assertEquals('/test-page', $seo->url);
    }

    public function test_can_update_seo_data(): void
    {
        $seo = SeoData::factory()->create();

        $seo->update([
            'title' => 'Updated SEO Title',
            'description' => 'Updated SEO description',
            'is_indexed' => false,
        ]);

        $this->assertEquals('Updated SEO Title', $seo->getTranslation('title', 'lt'));
        $this->assertEquals('Updated SEO description', $seo->getTranslation('description', 'lt'));
        $this->assertFalse($seo->is_indexed);
    }

    public function test_can_delete_seo_data(): void
    {
        $seo = SeoData::factory()->create();

        $seo->delete();

        $this->assertSoftDeleted('seo_data', [
            'id' => $seo->id,
        ]);
    }

    public function test_can_filter_seo_data_by_type(): void
    {
        SeoData::factory()->create(['type' => 'page']);
        SeoData::factory()->create(['type' => 'product']);

        $pageSeo = SeoData::where('type', 'page')->get();
        $productSeo = SeoData::where('type', 'product')->get();

        $this->assertCount(1, $pageSeo);
        $this->assertCount(1, $productSeo);
        $this->assertEquals('page', $pageSeo->first()->type);
        $this->assertEquals('product', $productSeo->first()->type);
    }

    public function test_can_filter_seo_data_by_indexed_status(): void
    {
        SeoData::factory()->create(['is_indexed' => true]);
        SeoData::factory()->create(['is_indexed' => false]);

        $indexedSeo = SeoData::where('is_indexed', true)->get();
        $nonIndexedSeo = SeoData::where('is_indexed', false)->get();

        $this->assertCount(1, $indexedSeo);
        $this->assertCount(1, $nonIndexedSeo);
        $this->assertTrue($indexedSeo->first()->is_indexed);
        $this->assertFalse($nonIndexedSeo->first()->is_indexed);
    }

    public function test_can_filter_seo_data_by_canonical_status(): void
    {
        SeoData::factory()->create(['is_canonical' => true]);
        SeoData::factory()->create(['is_canonical' => false]);

        $canonicalSeo = SeoData::where('is_canonical', true)->get();
        $nonCanonicalSeo = SeoData::where('is_canonical', false)->get();

        $this->assertCount(1, $canonicalSeo);
        $this->assertCount(1, $nonCanonicalSeo);
        $this->assertTrue($canonicalSeo->first()->is_canonical);
        $this->assertFalse($nonCanonicalSeo->first()->is_canonical);
    }
}
