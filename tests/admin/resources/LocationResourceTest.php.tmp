<?php

declare(strict_types=1);

namespace Tests\Feature;

use App\Models\Country;
use App\Models\Location;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

final class LocationResourceTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp();

        $this->actingAs(User::factory()->create());
    }

    public function test_locations_index_page_loads(): void
    {
        Location::factory()->count(3)->create();

        $response = $this->get('/admin/locations');

        $response->assertStatus(200);
    }

    public function test_locations_create_page_loads(): void
    {
        $response = $this->get('/admin/locations/create');

        $response->assertStatus(200);
    }

    public function test_locations_can_be_created(): void
    {
        $country = Country::factory()->create(['cca2' => 'LT']);

        $locationData = [
            'code' => 'WH001',
            'name' => 'Test Warehouse',
            'type' => 'warehouse',
            'address_line_1' => '123 Test Street',
            'city' => 'Vilnius',
            'country_code' => 'LT',
            'phone' => '+37012345678',
            'email' => 'test@example.com',
            'is_enabled' => true,
            'is_default' => false,
            'sort_order' => 1,
        ];

        $response = $this->post('/admin/locations', $locationData);

        $this->assertDatabaseHas('locations', [
            'code' => 'WH001',
            'name' => 'Test Warehouse',
            'type' => 'warehouse',
            'is_enabled' => true,
        ]);

        $response->assertRedirect();
    }

    public function test_locations_edit_page_loads(): void
    {
        $location = Location::factory()->create();

        $response = $this->get("/admin/locations/{$location->id}/edit");

        $response->assertStatus(200);
    }

    public function test_locations_can_be_updated(): void
    {
        $location = Location::factory()->create(['name' => 'Old Name']);

        $updateData = [
            'name' => 'Updated Name',
            'type' => 'store',
            'is_enabled' => false,
        ];

        $response = $this->put("/admin/locations/{$location->id}", $updateData);

        $this->assertDatabaseHas('locations', [
            'id' => $location->id,
            'name' => 'Updated Name',
            'type' => 'store',
            'is_enabled' => false,
        ]);

        $response->assertRedirect();
    }

    public function test_locations_can_be_deleted(): void
    {
        $location = Location::factory()->create();

        $response = $this->delete("/admin/locations/{$location->id}");

        $this->assertSoftDeleted('locations', ['id' => $location->id]);
        $response->assertRedirect();
    }

    public function test_locations_view_page_loads(): void
    {
        $location = Location::factory()->create();

        $response = $this->get("/admin/locations/{$location->id}");

        $response->assertStatus(200);
    }

    public function test_locations_require_unique_code(): void
    {
        Location::factory()->create(['code' => 'WH001']);

        $locationData = [
            'code' => 'WH001', // Duplicate code
            'name' => 'Test Warehouse',
            'type' => 'warehouse',
        ];

        $response = $this->post('/admin/locations', $locationData);

        $response->assertSessionHasErrors(['code']);
    }

    public function test_locations_require_name(): void
    {
        $locationData = [
            'code' => 'WH001',
            'name' => '', // Empty name
            'type' => 'warehouse',
        ];

        $response = $this->post('/admin/locations', $locationData);

        $response->assertSessionHasErrors(['name']);
    }

    public function test_locations_require_type(): void
    {
        $locationData = [
            'code' => 'WH001',
            'name' => 'Test Warehouse',
            'type' => '', // Empty type
        ];

        $response = $this->post('/admin/locations', $locationData);

        $response->assertSessionHasErrors(['type']);
    }

    public function test_locations_accept_valid_email(): void
    {
        $locationData = [
            'code' => 'WH001',
            'name' => 'Test Warehouse',
            'type' => 'warehouse',
            'email' => 'test@example.com',
        ];

        $response = $this->post('/admin/locations', $locationData);

        $this->assertDatabaseHas('locations', [
            'code' => 'WH001',
            'email' => 'test@example.com',
        ]);

        $response->assertRedirect();
    }

    public function test_locations_reject_invalid_email(): void
    {
        $locationData = [
            'code' => 'WH001',
            'name' => 'Test Warehouse',
            'type' => 'warehouse',
            'email' => 'invalid-email',
        ];

        $response = $this->post('/admin/locations', $locationData);

        $response->assertSessionHasErrors(['email']);
    }

    public function test_locations_accept_valid_coordinates(): void
    {
        $locationData = [
            'code' => 'WH001',
            'name' => 'Test Warehouse',
            'type' => 'warehouse',
            'latitude' => 54.6872,
            'longitude' => 25.2797,
        ];

        $response = $this->post('/admin/locations', $locationData);

        $this->assertDatabaseHas('locations', [
            'code' => 'WH001',
            'latitude' => 54.6872,
            'longitude' => 25.2797,
        ]);

        $response->assertRedirect();
    }

    public function test_locations_reject_invalid_latitude(): void
    {
        $locationData = [
            'code' => 'WH001',
            'name' => 'Test Warehouse',
            'type' => 'warehouse',
            'latitude' => 91.0, // Invalid latitude (> 90)
        ];

        $response = $this->post('/admin/locations', $locationData);

        $response->assertSessionHasErrors(['latitude']);
    }

    public function test_locations_reject_invalid_longitude(): void
    {
        $locationData = [
            'code' => 'WH001',
            'name' => 'Test Warehouse',
            'type' => 'warehouse',
            'longitude' => 181.0, // Invalid longitude (> 180)
        ];

        $response = $this->post('/admin/locations', $locationData);

        $response->assertSessionHasErrors(['longitude']);
    }

    public function test_locations_can_have_opening_hours(): void
    {
        $openingHours = [
            ['day' => 'monday', 'open_time' => '09:00', 'close_time' => '17:00', 'is_closed' => false],
            ['day' => 'tuesday', 'open_time' => '09:00', 'close_time' => '17:00', 'is_closed' => false],
            ['day' => 'sunday', 'open_time' => null, 'close_time' => null, 'is_closed' => true],
        ];

        $locationData = [
            'code' => 'WH001',
            'name' => 'Test Warehouse',
            'type' => 'warehouse',
            'opening_hours' => $openingHours,
        ];

        $response = $this->post('/admin/locations', $locationData);

        $location = Location::where('code', 'WH001')->first();
        $this->assertEquals($openingHours, $location->opening_hours);

        $response->assertRedirect();
    }

    public function test_locations_can_have_contact_info(): void
    {
        $contactInfo = [
            'manager' => 'John Doe',
            'department' => 'Warehouse',
            'emergency_contact' => '+37012345678',
        ];

        $locationData = [
            'code' => 'WH001',
            'name' => 'Test Warehouse',
            'type' => 'warehouse',
            'contact_info' => $contactInfo,
        ];

        $response = $this->post('/admin/locations', $locationData);

        $location = Location::where('code', 'WH001')->first();
        $this->assertEquals($contactInfo, $location->contact_info);

        $response->assertRedirect();
    }

    public function test_locations_can_be_filtered_by_type(): void
    {
        Location::factory()->create(['type' => 'warehouse', 'name' => 'Warehouse 1']);
        Location::factory()->create(['type' => 'store', 'name' => 'Store 1']);

        $response = $this->get('/admin/locations?type=warehouse');

        $response->assertStatus(200);
        $response->assertSee('Warehouse 1');
        $response->assertDontSee('Store 1');
    }

    public function test_locations_can_be_filtered_by_country(): void
    {
        $country = Country::factory()->create(['cca2' => 'LT', 'name' => 'Lithuania']);
        Location::factory()->create(['country_code' => 'LT', 'name' => 'Lithuania Location']);
        Location::factory()->create(['country_code' => 'US', 'name' => 'US Location']);

        $response = $this->get('/admin/locations?country_code=LT');

        $response->assertStatus(200);
        $response->assertSee('Lithuania Location');
        $response->assertDontSee('US Location');
    }

    public function test_locations_can_be_filtered_by_enabled_status(): void
    {
        Location::factory()->create(['is_enabled' => true, 'name' => 'Enabled Location']);
        Location::factory()->create(['is_enabled' => false, 'name' => 'Disabled Location']);

        $response = $this->get('/admin/locations?is_enabled=1');

        $response->assertStatus(200);
        $response->assertSee('Enabled Location');
        $response->assertDontSee('Disabled Location');
    }

    public function test_locations_can_be_searched(): void
    {
        Location::factory()->create(['name' => 'Main Warehouse']);
        Location::factory()->create(['name' => 'Secondary Store']);

        $response = $this->get('/admin/locations?search=Main');

        $response->assertStatus(200);
        $response->assertSee('Main Warehouse');
        $response->assertDontSee('Secondary Store');
    }

    public function test_locations_can_be_bulk_enabled(): void
    {
        $location1 = Location::factory()->create(['is_enabled' => false]);
        $location2 = Location::factory()->create(['is_enabled' => false]);

        $response = $this->post('/admin/locations/bulk-actions', [
            'action' => 'enable',
            'records' => [$location1->id, $location2->id],
        ]);

        $this->assertDatabaseHas('locations', ['id' => $location1->id, 'is_enabled' => true]);
        $this->assertDatabaseHas('locations', ['id' => $location2->id, 'is_enabled' => true]);

        $response->assertRedirect();
    }

    public function test_locations_can_be_bulk_disabled(): void
    {
        $location1 = Location::factory()->create(['is_enabled' => true]);
        $location2 = Location::factory()->create(['is_enabled' => true]);

        $response = $this->post('/admin/locations/bulk-actions', [
            'action' => 'disable',
            'records' => [$location1->id, $location2->id],
        ]);

        $this->assertDatabaseHas('locations', ['id' => $location1->id, 'is_enabled' => false]);
        $this->assertDatabaseHas('locations', ['id' => $location2->id, 'is_enabled' => false]);

        $response->assertRedirect();
    }

    public function test_locations_can_be_reordered(): void
    {
        $location1 = Location::factory()->create(['sort_order' => 1]);
        $location2 = Location::factory()->create(['sort_order' => 2]);

        $response = $this->post('/admin/locations/reorder', [
            'items' => [
                ['id' => $location2->id, 'sort_order' => 1],
                ['id' => $location1->id, 'sort_order' => 2],
            ],
        ]);

        $this->assertDatabaseHas('locations', ['id' => $location2->id, 'sort_order' => 1]);
        $this->assertDatabaseHas('locations', ['id' => $location1->id, 'sort_order' => 2]);

        $response->assertRedirect();
    }
}
