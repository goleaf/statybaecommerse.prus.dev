<?php

declare(strict_types=1);

namespace Tests\Feature;

use App\Models\City;
use App\Models\Country;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

final class CityResourceTest extends TestCase
{
    use RefreshDatabase;

    private User $adminUser;

    protected function setUp(): void
    {
        parent::setUp();

        $this->adminUser = User::factory()->create([
            'email' => 'admin@example.com',
            'is_admin' => true,
        ]);
    }

    public function test_can_view_cities_index(): void
    {
        City::factory()->count(3)->create();

        $response = $this
            ->actingAs($this->adminUser)
            ->get(route('filament.admin.resources.cities.index'));

        $response->assertOk();
    }

    public function test_can_create_city(): void
    {
        $country = Country::factory()->create();

        $cityData = [
            'name' => 'Test City',
            'code' => 'TC',
            'description' => 'Test description',
            'country_id' => $country->id,
            'is_active' => true,
            'is_capital' => false,
            'population' => 100000,
            'sort_order' => 1,
        ];

        $response = $this
            ->actingAs($this->adminUser)
            ->post(route('filament.admin.resources.cities.create'), $cityData);

        $this->assertDatabaseHas('cities', [
            'name' => 'Test City',
            'code' => 'TC',
            'country_id' => $country->id,
        ]);
    }

    public function test_can_update_city(): void
    {
        $city = City::factory()->create(['name' => 'Old Name']);
        $country = Country::factory()->create();

        $updateData = [
            'name' => 'Updated City',
            'country_id' => $country->id,
            'is_capital' => true,
        ];

        $response = $this
            ->actingAs($this->adminUser)
            ->put(route('filament.admin.resources.cities.update', ['record' => $city->id]), $updateData);

        $this->assertDatabaseHas('cities', [
            'id' => $city->id,
            'name' => 'Updated City',
            'country_id' => $country->id,
            'is_capital' => true,
        ]);
    }

    public function test_can_delete_city(): void
    {
        $city = City::factory()->create();

        $response = $this
            ->actingAs($this->adminUser)
            ->delete(route('filament.admin.resources.cities.destroy', ['record' => $city->id]));

        $this->assertSoftDeleted('cities', ['id' => $city->id]);
    }

    public function test_can_view_city(): void
    {
        $city = City::factory()->create();

        $response = $this
            ->actingAs($this->adminUser)
            ->get(route('filament.admin.resources.cities.view', ['record' => $city->id]));

        $response->assertOk();
    }

    public function test_can_filter_cities_by_country(): void
    {
        $country1 = Country::factory()->create(['name' => 'Lithuania']);
        $country2 = Country::factory()->create(['name' => 'Latvia']);

        $city1 = City::factory()->create(['country_id' => $country1->id, 'name' => 'Vilnius']);
        $city2 = City::factory()->create(['country_id' => $country2->id, 'name' => 'Riga']);

        $response = $this
            ->actingAs($this->adminUser)
            ->get(route('filament.admin.resources.cities.index', ['tableFilters' => ['country_id' => ['value' => $country1->id]]]));

        $response->assertOk();
    }

    public function test_can_filter_cities_by_active_status(): void
    {
        City::factory()->create(['is_active' => true, 'name' => 'Active City']);
        City::factory()->create(['is_active' => false, 'name' => 'Inactive City']);

        $response = $this
            ->actingAs($this->adminUser)
            ->get(route('filament.admin.resources.cities.index', ['tableFilters' => ['is_active' => ['value' => 'true']]]));

        $response->assertOk();
    }

    public function test_can_filter_cities_by_capital_status(): void
    {
        City::factory()->create(['is_capital' => true, 'name' => 'Capital City']);
        City::factory()->create(['is_capital' => false, 'name' => 'Regular City']);

        $response = $this
            ->actingAs($this->adminUser)
            ->get(route('filament.admin.resources.cities.index', ['tableFilters' => ['is_capital' => ['value' => 'true']]]));

        $response->assertOk();
    }

    public function test_can_filter_cities_by_type(): void
    {
        City::factory()->create(['type' => 'metropolitan', 'name' => 'Metropolitan City']);
        City::factory()->create(['type' => 'urban', 'name' => 'Urban City']);

        $response = $this
            ->actingAs($this->adminUser)
            ->get(route('filament.admin.resources.cities.index', ['tableFilters' => ['type' => ['value' => 'metropolitan']]]));

        $response->assertOk();
    }

    public function test_can_filter_cities_by_level(): void
    {
        City::factory()->create(['level' => 0, 'name' => 'City Level 0']);
        City::factory()->create(['level' => 1, 'name' => 'City Level 1']);

        $response = $this
            ->actingAs($this->adminUser)
            ->get(route('filament.admin.resources.cities.index', ['tableFilters' => ['level' => ['value' => '0']]]));

        $response->assertOk();
    }

    public function test_can_search_cities_by_name(): void
    {
        City::factory()->create(['name' => 'Vilnius']);
        City::factory()->create(['name' => 'Kaunas']);

        $response = $this
            ->actingAs($this->adminUser)
            ->get(route('filament.admin.resources.cities.index', ['tableSearch' => 'Vilnius']));

        $response->assertOk();
    }

    public function test_can_sort_cities_by_name(): void
    {
        City::factory()->create(['name' => 'Z City']);
        City::factory()->create(['name' => 'A City']);

        $response = $this
            ->actingAs($this->adminUser)
            ->get(route('filament.admin.resources.cities.index', ['tableSort' => 'name']));

        $response->assertOk();
    }

    public function test_can_sort_cities_by_population(): void
    {
        City::factory()->create(['population' => 100000]);
        City::factory()->create(['population' => 50000]);

        $response = $this
            ->actingAs($this->adminUser)
            ->get(route('filament.admin.resources.cities.index', ['tableSort' => 'population']));

        $response->assertOk();
    }

    public function test_can_bulk_activate_cities(): void
    {
        $cities = City::factory()->count(3)->create(['is_active' => false]);

        $response = $this
            ->actingAs($this->adminUser)
            ->post(route('filament.admin.resources.cities.bulk-activate'), [
                'records' => $cities->pluck('id')->toArray(),
            ]);

        foreach ($cities as $city) {
            $this->assertDatabaseHas('cities', [
                'id' => $city->id,
                'is_active' => true,
            ]);
        }
    }

    public function test_can_bulk_deactivate_cities(): void
    {
        $cities = City::factory()->count(3)->create(['is_active' => true]);

        $response = $this
            ->actingAs($this->adminUser)
            ->post(route('filament.admin.resources.cities.bulk-deactivate'), [
                'records' => $cities->pluck('id')->toArray(),
            ]);

        foreach ($cities as $city) {
            $this->assertDatabaseHas('cities', [
                'id' => $city->id,
                'is_active' => false,
            ]);
        }
    }

    public function test_can_toggle_city_active_status(): void
    {
        $city = City::factory()->create(['is_active' => false]);

        $response = $this
            ->actingAs($this->adminUser)
            ->post(route('filament.admin.resources.cities.toggle-active', ['record' => $city->id]));

        $this->assertDatabaseHas('cities', [
            'id' => $city->id,
            'is_active' => true,
        ]);
    }

    public function test_can_create_city_with_all_fields(): void
    {
        $country = Country::factory()->create();
        $parentCity = City::factory()->create();

        $cityData = [
            'name' => 'Test City',
            'code' => 'TC',
            'description' => 'Test description',
            'country_id' => $country->id,
            'parent_id' => $parentCity->id,
            'level' => 1,
            'type' => 'urban',
            'area' => 100.5,
            'density' => 500.25,
            'elevation' => 200.75,
            'timezone' => 'Europe/Vilnius',
            'currency_code' => 'EUR',
            'language_code' => 'lt',
            'phone_code' => '+370',
            'population' => 100000,
            'is_active' => true,
            'is_capital' => false,
            'sort_order' => 1,
        ];

        $response = $this
            ->actingAs($this->adminUser)
            ->post(route('filament.admin.resources.cities.create'), $cityData);

        $this->assertDatabaseHas('cities', [
            'name' => 'Test City',
            'code' => 'TC',
            'country_id' => $country->id,
            'parent_id' => $parentCity->id,
            'level' => 1,
            'type' => 'urban',
            'area' => 100.5,
            'density' => 500.25,
            'elevation' => 200.75,
            'timezone' => 'Europe/Vilnius',
            'currency_code' => 'EUR',
            'language_code' => 'lt',
            'phone_code' => '+370',
            'population' => 100000,
            'is_active' => true,
            'is_capital' => false,
            'sort_order' => 1,
        ]);
    }

    public function test_can_update_city_with_all_fields(): void
    {
        $city = City::factory()->create(['name' => 'Old Name']);
        $country = Country::factory()->create();
        $parentCity = City::factory()->create();

        $updateData = [
            'name' => 'Updated City',
            'code' => 'UC',
            'description' => 'Updated description',
            'country_id' => $country->id,
            'parent_id' => $parentCity->id,
            'level' => 2,
            'type' => 'metropolitan',
            'area' => 200.75,
            'density' => 750.5,
            'elevation' => 300.25,
            'timezone' => 'Europe/London',
            'currency_code' => 'GBP',
            'language_code' => 'en',
            'phone_code' => '+44',
            'population' => 200000,
            'is_active' => true,
            'is_capital' => true,
            'sort_order' => 2,
        ];

        $response = $this
            ->actingAs($this->adminUser)
            ->put(route('filament.admin.resources.cities.update', ['record' => $city->id]), $updateData);

        $this->assertDatabaseHas('cities', [
            'id' => $city->id,
            'name' => 'Updated City',
            'code' => 'UC',
            'country_id' => $country->id,
            'parent_id' => $parentCity->id,
            'level' => 2,
            'type' => 'metropolitan',
            'area' => 200.75,
            'density' => 750.5,
            'elevation' => 300.25,
            'timezone' => 'Europe/London',
            'currency_code' => 'GBP',
            'language_code' => 'en',
            'phone_code' => '+44',
            'population' => 200000,
            'is_active' => true,
            'is_capital' => true,
            'sort_order' => 2,
        ]);
    }

    public function test_can_create_city_with_coordinates(): void
    {
        $country = Country::factory()->create();

        $cityData = [
            'name' => 'Test City',
            'code' => 'TC',
            'country_id' => $country->id,
            'latitude' => 54.6872,
            'longitude' => 25.2797,
            'is_active' => true,
        ];

        $response = $this
            ->actingAs($this->adminUser)
            ->post(route('filament.admin.resources.cities.create'), $cityData);

        $this->assertDatabaseHas('cities', [
            'name' => 'Test City',
            'latitude' => 54.6872,
            'longitude' => 25.2797,
        ]);
    }

    public function test_can_create_city_with_hierarchy(): void
    {
        $country = Country::factory()->create();
        $parentCity = City::factory()->create(['level' => 0]);
        $childCity = City::factory()->create(['level' => 1, 'parent_id' => $parentCity->id]);

        $this->assertDatabaseHas('cities', [
            'id' => $childCity->id,
            'parent_id' => $parentCity->id,
            'level' => 1,
        ]);
    }

    public function test_can_validate_city_required_fields(): void
    {
        $response = $this
            ->actingAs($this->adminUser)
            ->post(route('filament.admin.resources.cities.create'), []);

        $response->assertSessionHasErrors(['name', 'country_id']);
    }

    public function test_can_validate_city_unique_code(): void
    {
        $country = Country::factory()->create();
        City::factory()->create(['code' => 'TC']);

        $cityData = [
            'name' => 'Test City',
            'code' => 'TC',  // Duplicate code
            'country_id' => $country->id,
        ];

        $response = $this
            ->actingAs($this->adminUser)
            ->post(route('filament.admin.resources.cities.create'), $cityData);

        $response->assertSessionHasErrors(['code']);
    }

    public function test_can_validate_city_numeric_fields(): void
    {
        $country = Country::factory()->create();

        $cityData = [
            'name' => 'Test City',
            'country_id' => $country->id,
            'population' => 'invalid',
            'area' => 'invalid',
            'density' => 'invalid',
            'elevation' => 'invalid',
        ];

        $response = $this
            ->actingAs($this->adminUser)
            ->post(route('filament.admin.resources.cities.create'), $cityData);

        $response->assertSessionHasErrors(['population', 'area', 'density', 'elevation']);
    }

    public function test_can_validate_city_coordinate_ranges(): void
    {
        $country = Country::factory()->create();

        $cityData = [
            'name' => 'Test City',
            'country_id' => $country->id,
            'latitude' => 95.0,  // Invalid latitude
            'longitude' => 185.0,  // Invalid longitude
        ];

        $response = $this
            ->actingAs($this->adminUser)
            ->post(route('filament.admin.resources.cities.create'), $cityData);

        $response->assertSessionHasErrors(['latitude', 'longitude']);
    }
}
