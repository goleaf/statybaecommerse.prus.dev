<?php

declare(strict_types=1);

namespace Tests\Feature;

use App\Models\Collection;
use App\Models\Product;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class CollectionResourceTest extends TestCase
{
    use RefreshDatabase;

    protected User $adminUser;

    protected function setUp(): void
    {
        parent::setUp();

        $this->adminUser = User::factory()->create([
            'is_admin' => true,
        ]);
    }

    public function test_can_list_collections(): void
    {
        $collections = Collection::factory()->count(3)->create();

        $this->actingAs($this->adminUser)
            ->get('/admin/collections')
            ->assertOk()
            ->assertSee($collections->first()->name);
    }

    public function test_can_create_collection(): void
    {
        $collectionData = [
            'name' => 'Test Collection',
            'slug' => 'test-collection',
            'description' => 'Test description',
            'is_visible' => true,
            'is_automatic' => false,
            'sort_order' => 1,
            'display_type' => 'grid',
            'products_per_page' => 12,
            'show_filters' => true,
        ];

        $this->actingAs($this->adminUser)
            ->post('/admin/collections', $collectionData)
            ->assertRedirect();

        $this->assertDatabaseHas('collections', [
            'name' => 'Test Collection',
            'slug' => 'test-collection',
            'is_visible' => true,
            'is_automatic' => false,
        ]);
    }

    public function test_can_view_collection(): void
    {
        $collection = Collection::factory()->create();

        $this->actingAs($this->adminUser)
            ->get("/admin/collections/{$collection->id}")
            ->assertOk()
            ->assertSee($collection->name);
    }

    public function test_can_edit_collection(): void
    {
        $collection = Collection::factory()->create([
            'name' => 'Original Name',
        ]);

        $updateData = [
            'name' => 'Updated Name',
            'slug' => 'updated-slug',
            'description' => 'Updated description',
        ];

        $this->actingAs($this->adminUser)
            ->put("/admin/collections/{$collection->id}", $updateData)
            ->assertRedirect();

        $this->assertDatabaseHas('collections', [
            'id' => $collection->id,
            'name' => 'Updated Name',
            'slug' => 'updated-slug',
        ]);
    }

    public function test_can_delete_collection(): void
    {
        $collection = Collection::factory()->create();

        $this->actingAs($this->adminUser)
            ->delete("/admin/collections/{$collection->id}")
            ->assertRedirect();

        $this->assertDatabaseMissing('collections', [
            'id' => $collection->id,
        ]);
    }

    public function test_can_filter_collections_by_visibility(): void
    {
        $visibleCollection = Collection::factory()->create(['is_visible' => true]);
        $hiddenCollection = Collection::factory()->create(['is_visible' => false]);

        $this->actingAs($this->adminUser)
            ->get('/admin/collections?is_visible=1')
            ->assertOk()
            ->assertSee($visibleCollection->name)
            ->assertDontSee($hiddenCollection->name);
    }

    public function test_can_filter_collections_by_type(): void
    {
        $manualCollection = Collection::factory()->create(['is_automatic' => false]);
        $automaticCollection = Collection::factory()->create(['is_automatic' => true]);

        $this->actingAs($this->adminUser)
            ->get('/admin/collections?is_automatic=0')
            ->assertOk()
            ->assertSee($manualCollection->name)
            ->assertDontSee($automaticCollection->name);
    }

    public function test_can_search_collections(): void
    {
        $collection1 = Collection::factory()->create(['name' => 'Summer Collection']);
        $collection2 = Collection::factory()->create(['name' => 'Winter Collection']);

        $this->actingAs($this->adminUser)
            ->get('/admin/collections?search=Summer')
            ->assertOk()
            ->assertSee($collection1->name)
            ->assertDontSee($collection2->name);
    }

    public function test_can_sort_collections(): void
    {
        $collection1 = Collection::factory()->create(['sort_order' => 2]);
        $collection2 = Collection::factory()->create(['sort_order' => 1]);

        $this->actingAs($this->adminUser)
            ->get('/admin/collections?sort=sort_order')
            ->assertOk();
    }

    public function test_can_toggle_collection_visibility(): void
    {
        $collection = Collection::factory()->create(['is_visible' => false]);

        $this->actingAs($this->adminUser)
            ->post("/admin/collections/{$collection->id}/toggle-visibility")
            ->assertRedirect();

        $this->assertDatabaseHas('collections', [
            'id' => $collection->id,
            'is_visible' => true,
        ]);
    }

    public function test_can_manage_collection_products(): void
    {
        $collection = Collection::factory()->create();
        $products = Product::factory()->count(3)->create();

        $this->actingAs($this->adminUser)
            ->get("/admin/collections/{$collection->id}/products")
            ->assertOk();
    }

    public function test_collection_validation_rules(): void
    {
        $invalidData = [
            'name' => '', // Required field
            'slug' => 'invalid slug with spaces', // Invalid slug format
        ];

        $this->actingAs($this->adminUser)
            ->post('/admin/collections', $invalidData)
            ->assertSessionHasErrors(['name', 'slug']);
    }

    public function test_collection_unique_slug_validation(): void
    {
        $existingCollection = Collection::factory()->create(['slug' => 'existing-slug']);

        $newCollectionData = [
            'name' => 'New Collection',
            'slug' => 'existing-slug', // Duplicate slug
        ];

        $this->actingAs($this->adminUser)
            ->post('/admin/collections', $newCollectionData)
            ->assertSessionHasErrors(['slug']);
    }

    public function test_collection_automatic_rules_validation(): void
    {
        $collectionData = [
            'name' => 'Automatic Collection',
            'slug' => 'automatic-collection',
            'is_automatic' => true,
            'rules' => [
                'category_id' => '1',
                'price_min' => '10',
            ],
        ];

        $this->actingAs($this->adminUser)
            ->post('/admin/collections', $collectionData)
            ->assertRedirect();

        $this->assertDatabaseHas('collections', [
            'name' => 'Automatic Collection',
            'is_automatic' => true,
        ]);
    }

    public function test_collection_meta_fields(): void
    {
        $collectionData = [
            'name' => 'SEO Collection',
            'slug' => 'seo-collection',
            'meta_title' => 'SEO Title',
            'meta_description' => 'SEO Description',
            'meta_keywords' => ['keyword1', 'keyword2'],
        ];

        $this->actingAs($this->adminUser)
            ->post('/admin/collections', $collectionData)
            ->assertRedirect();

        $this->assertDatabaseHas('collections', [
            'name' => 'SEO Collection',
            'meta_title' => 'SEO Title',
            'meta_description' => 'SEO Description',
        ]);
    }

    public function test_collection_display_settings(): void
    {
        $collectionData = [
            'name' => 'Display Collection',
            'slug' => 'display-collection',
            'display_type' => 'list',
            'products_per_page' => 24,
            'show_filters' => false,
        ];

        $this->actingAs($this->adminUser)
            ->post('/admin/collections', $collectionData)
            ->assertRedirect();

        $this->assertDatabaseHas('collections', [
            'name' => 'Display Collection',
            'display_type' => 'list',
            'products_per_page' => 24,
            'show_filters' => false,
        ]);
    }

    public function test_collection_bulk_actions(): void
    {
        $collections = Collection::factory()->count(3)->create(['is_visible' => false]);

        $this->actingAs($this->adminUser)
            ->post('/admin/collections/bulk-actions', [
                'action' => 'toggle_visibility',
                'records' => $collections->pluck('id')->toArray(),
            ])
            ->assertRedirect();

        foreach ($collections as $collection) {
            $this->assertDatabaseHas('collections', [
                'id' => $collection->id,
                'is_visible' => true,
            ]);
        }
    }

    public function test_collection_soft_delete(): void
    {
        $collection = Collection::factory()->create();

        $this->actingAs($this->adminUser)
            ->delete("/admin/collections/{$collection->id}")
            ->assertRedirect();

        $this->assertSoftDeleted('collections', [
            'id' => $collection->id,
        ]);
    }

    public function test_collection_media_upload(): void
    {
        $collection = Collection::factory()->create();

        // Test image upload (would need actual file upload for full test)
        $this->actingAs($this->adminUser)
            ->post("/admin/collections/{$collection->id}/media", [
                'image' => 'test-image.jpg',
            ])
            ->assertRedirect();
    }

    public function test_collection_translations(): void
    {
        $collection = Collection::factory()->create();

        $translationData = [
            'locale' => 'lt',
            'name' => 'Test Kolekcija',
            'description' => 'Test apraÅ¡ymas',
        ];

        $this->actingAs($this->adminUser)
            ->post("/admin/collections/{$collection->id}/translations", $translationData)
            ->assertRedirect();

        $this->assertDatabaseHas('collection_translations', [
            'collection_id' => $collection->id,
            'locale' => 'lt',
            'name' => 'Test Kolekcija',
        ]);
    }

    public function test_collection_products_relationship(): void
    {
        $collection = Collection::factory()->create();
        $products = Product::factory()->count(3)->create();

        $collection->products()->attach($products->pluck('id'));

        $this->actingAs($this->adminUser)
            ->get("/admin/collections/{$collection->id}")
            ->assertOk()
            ->assertSee('3'); // Products count
    }

    public function test_collection_permissions(): void
    {
        $regularUser = User::factory()->create(['is_admin' => false]);
        $collection = Collection::factory()->create();

        $this->actingAs($regularUser)
            ->get('/admin/collections')
            ->assertForbidden();

        $this->actingAs($regularUser)
            ->post('/admin/collections', [])
            ->assertForbidden();

        $this->actingAs($regularUser)
            ->get("/admin/collections/{$collection->id}")
            ->assertForbidden();
    }
}
