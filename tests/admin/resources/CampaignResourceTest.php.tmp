<?php

declare(strict_types=1);

namespace Tests\Feature;

use App\Models\Campaign;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

final class CampaignResourceTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp();

        $this->actingAs(User::factory()->create());
    }

    public function test_can_create_campaign(): void
    {
        $campaignData = [
            'name' => 'Test Campaign',
            'slug' => 'test-campaign',
            'status' => 'draft',
            'is_active' => true,
        ];

        $campaign = Campaign::create($campaignData);

        $this->assertDatabaseHas('discount_campaigns', [
            'name' => 'Test Campaign',
            'slug' => 'test-campaign',
            'status' => 'draft',
        ]);

        $this->assertEquals('Test Campaign', $campaign->name);
        $this->assertEquals('draft', $campaign->status);
    }

    public function test_can_update_campaign(): void
    {
        $campaign = Campaign::factory()->create();

        $campaign->update([
            'name' => 'Updated Campaign Name',
            'status' => 'active',
        ]);

        $this->assertEquals('Updated Campaign Name', $campaign->name);
        $this->assertEquals('active', $campaign->status);
    }

    public function test_can_delete_campaign(): void
    {
        $campaign = Campaign::factory()->create();

        $campaign->delete();

        $this->assertSoftDeleted('discount_campaigns', [
            'id' => $campaign->id,
        ]);
    }

    public function test_can_filter_campaigns_by_status(): void
    {
        // Create campaigns with different statuses
        $activeCampaign = Campaign::factory()->active()->create();
        $pausedCampaign = Campaign::factory()->create(['status' => 'paused']);

        // Debug: Check what was actually created
        $allCampaigns = Campaign::all();
        $this->assertCount(2, $allCampaigns, 'Should have 2 campaigns total');

        $activeCampaigns = Campaign::where('status', 'active')->get();
        $pausedCampaigns = Campaign::where('status', 'paused')->get();

        $this->assertCount(1, $activeCampaigns);
        $this->assertCount(1, $pausedCampaigns);
        $this->assertEquals('active', $activeCampaigns->first()->status);
        $this->assertEquals('paused', $pausedCampaigns->first()->status);
    }

    public function test_can_filter_campaigns_by_different_status(): void
    {
        Campaign::factory()->draft()->create();
        Campaign::factory()->scheduled()->create();

        $draftCampaigns = Campaign::where('status', 'draft')->get();
        $scheduledCampaigns = Campaign::where('status', 'scheduled')->get();

        $this->assertCount(1, $draftCampaigns);
        $this->assertCount(1, $scheduledCampaigns);
        $this->assertEquals('draft', $draftCampaigns->first()->status);
        $this->assertEquals('scheduled', $scheduledCampaigns->first()->status);
    }

    public function test_can_filter_campaigns_by_active_status(): void
    {
        Campaign::factory()->create(['is_active' => true]);
        Campaign::factory()->create(['is_active' => false]);

        $activeCampaigns = Campaign::where('is_active', true)->get();
        $inactiveCampaigns = Campaign::where('is_active', false)->get();

        $this->assertCount(1, $activeCampaigns);
        $this->assertCount(1, $inactiveCampaigns);
        $this->assertTrue($activeCampaigns->first()->is_active);
        $this->assertFalse($inactiveCampaigns->first()->is_active);
    }
}
