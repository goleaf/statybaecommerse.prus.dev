<?php

declare(strict_types=1);

namespace Tests\Feature;

use App\Filament\Widgets\RecentActivityWidget;
use App\Models\Order;
use App\Models\Product;
use App\Models\Review;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class RecentActivityWidgetTest extends TestCase
{
    use RefreshDatabase;

    public function test_recent_activity_widget_can_be_instantiated(): void
    {
        $widget = new RecentActivityWidget;
        $this->assertInstanceOf(RecentActivityWidget::class, $widget);
    }

    public function test_recent_activity_widget_handles_empty_database(): void
    {
        $widget = new RecentActivityWidget;
        $query = $widget->getTableQuery();

        // Should not throw exceptions with empty database
        $this->assertNotNull($query);
    }

    public function test_recent_activity_widget_with_basic_data(): void
    {
        // Create only basic data that we know works
        $user = User::factory()->create();
        $product = Product::factory()->create();

        $order = Order::factory()->create([
            'user_id' => $user->id,
            'total' => 100.0,
            'status' => 'completed',
            'created_at' => now(),
        ]);

        $review = Review::factory()->create([
            'product_id' => $product->id,
            'rating' => 5,
            'is_approved' => true,
            'created_at' => now(),
        ]);

        $widget = new RecentActivityWidget;
        $query = $widget->getTableQuery();

        $this->assertNotNull($query);

        // Test that the query can be executed
        $results = $query->get();
        $this->assertIsIterable($results);
    }

    public function test_recent_activity_widget_column_span(): void
    {
        $widget = new RecentActivityWidget;
        $this->assertEquals('full', $widget->getColumnSpan());
    }

    public function test_recent_activity_widget_sort_order(): void
    {
        $this->assertEquals(3, RecentActivityWidget::getSort());
    }

    public function test_recent_activity_widget_heading(): void
    {
        $widget = new RecentActivityWidget;
        $this->assertEquals('Recent Activity Dashboard', $widget->getHeading());
    }

    public function test_recent_activity_widget_basic_queries(): void
    {
        // Create only basic data that we know works
        $user = User::factory()->create(['created_at' => now()]);
        $product = Product::factory()->create(['created_at' => now()]);
        $order = Order::factory()->create(['created_at' => now()]);
        $review = Review::factory()->create([
            'created_at' => now(),
            'is_approved' => true,
        ]);

        $widget = new RecentActivityWidget;
        $query = $widget->getTableQuery();

        $results = $query->get();

        // Should have results from basic models
        $this->assertGreaterThan(0, $results->count());

        // Check that we have different types
        $types = $results->pluck('type')->unique();
        $this->assertTrue($types->contains('Order'));
        $this->assertTrue($types->contains('Product'));
        $this->assertTrue($types->contains('User'));
        $this->assertTrue($types->contains('Review'));
    }

    public function test_recent_activity_widget_filters_recent_data(): void
    {
        // Create old data (should not appear)
        $oldOrder = Order::factory()->create([
            'created_at' => now()->subDays(10),
        ]);

        // Create recent data (should appear)
        $recentOrder = Order::factory()->create([
            'created_at' => now()->subDays(3),
        ]);

        $widget = new RecentActivityWidget;
        $query = $widget->getTableQuery();

        $results = $query->get();

        // Should only include recent data (last 7 days)
        $this->assertGreaterThan(0, $results->count());

        // Check that old data is not included
        $orderIds = $results->where('type', 'Order')->pluck('title');
        $this->assertStringContainsString('Order #'.$recentOrder->id, $orderIds->first());
    }
}
